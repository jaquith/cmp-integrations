{"info":{"type":"runner","start":"2020-11-04T11:40:47.786Z","_duration":47139,"cid":"0-0","capabilities":{"goog:chromeOptions":{"debuggerAddress":"localhost:49202"},"browserVersion":"86.0.4240.75","timeouts":{"pageLoad":300000,"implicit":0,"script":30000},"strictFileInteractability":false,"acceptInsecureCerts":true,"webauthn:virtualAuthenticators":true,"networkConnectionEnabled":false,"chrome":{"chromedriverVersion":"86.0.4240.22 (398b0743353ff36fb1b82468f63a3a93b4e2e89e-refs/branch-heads/4240@{#378})","userDataDir":"/var/folders/qv/8dr6ylkn3c98dm4r414wh_0h0000kr/T/.com.google.Chrome.dBrWYP"},"browserName":"chrome","setWindowRect":true,"proxy":{"httpProxy":"13.57.103.60:52268","sslProxy":"13.57.103.60:52268","proxyType":"manual"},"pageLoadStrategy":"normal","platformName":"mac os x","unhandledPromptBehavior":"dismiss and notify","sessionId":"c1830c80f6594fb5a4509548eb0716ed"},"sanitizedCapabilities":"chrome.86_0_4240_75.macosx","config":{"protocol":"https","hostname":"ondemand.eu-central-1.saucelabs.com","port":443,"path":"/wd/hub","specs":["tests/specs/examples/usercentrics-v2/standard_no-map_opt-out.js"],"suites":{},"exclude":[],"logLevel":"warn","logLevels":{},"excludeDriverLogs":[],"bail":0,"waitforInterval":500,"waitforTimeout":20000,"framework":"mocha","reporters":["spec",[null,{"outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}}}]],"services":[["sauce"]],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"connectionRetryTimeout":40000,"connectionRetryCount":2,"execArgv":[],"runnerEnv":{},"runner":"local","mochaOpts":{"timeout":67000,"ui":"bdd","color":true,"retries":0,"specFileRetries":0},"jasmineNodeOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"before":[null,null],"beforeSession":[null,null],"beforeSuite":[null,null],"beforeHook":[],"beforeTest":[null,null],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[null],"afterSession":[],"after":[null],"onComplete":[null],"onReload":[null],"beforeFeature":[null],"beforeScenario":[null],"beforeStep":[],"afterStep":[],"afterScenario":[null],"afterFeature":[],"specFileRetries":0,"baseUrl":"","user":"caleb.jaquith","key":"6fab5239-14b0-49cf-8488-21839bd22c08","coloredLogs":true,"screenshotPath":"./errorShots/","host":"https://ondemand.eu-central-1.saucelabs.com","region":"eu","capabilities":[{"browserName":"chrome","browserVersion":"latest","platformName":"macOS 10.15","teal:enableProxy":true,"teal:enableTrace":false,"teal:runCrossBrowser":true,"teal:runRemotely":true,"teal:showDurations":true,"teal:enableSauceConnect":false,"teal:hasReporterContext":true,"teal:hasRunnerContext":true,"teal:reporterContext":"<p>This report has been generated by Tealium's automated testing platform.</p>\n<p>These tests will have been created specifically for your project by a Tealium Implementation Engineer to verify a configuration or use case.</p>\n<p>The intent is to document the tests run on the completed configuration (acceptance tests). It can also serve as a limited regression test as work continues, to ensure that future projects don't break previous ones.\nFor more information, see the <a href=\"https://jaquith.github.io/webdriverio-standalone/\">developer documentation</a>.</p>","teal:summaryContext":"<p>A suite of tests, intended to ensure the integration between Tealium iQ Tag Management and the Usercentrics Browser SDK (CMP v2) works as expected in multiple potential configuration cases.</p>\n<p>Includes some common error and misconfiguration cases.</p>\n<p>Does not include any TCF support, that setting is not checked.</p>","teal:capabilityNumber":1,"sauce:options":{},"teal:specPath":"tests/specs/examples/usercentrics-v2/standard_no-map_opt-out.js","teal:testContext":"<p>A Tealium iQ setup where the 'map' is missing (misconfiguration case).</p>\n<p>No tags should fire regardless of user choice.</p>\n<p>Opt-out case.</p>","teal:testTitle":"Standard TiQ Setup, Map Missing from Page, User Opts Out","teal:helpers":["helpers/specific/usercentrics-v2-general-integration-test-helper.js"],"proxy":{"proxyType":"manual","sslProxy":"13.57.103.60:52268","httpProxy":"13.57.103.60:52268"},"acceptInsecureCerts":true,"teal:opJourneyId":3962,"teal:opRunId":23266,"teal:opInitialActionId":51095}],"sauceConnect":false,"ignoredWorkerServices":[],"specFileRetryAttempts":0},"specs":["/Users/calebjaquith/.git/webdriverio-standalone/tests/specs/examples/usercentrics-v2/standard_no-map_opt-out.js"],"sessionId":"c1830c80f6594fb5a4509548eb0716ed","isMultiremote":false,"retry":0,"failures":0,"retries":0,"end":"2020-11-04T11:41:34.925Z"},"metrics":{"passed":22,"skipped":0,"failed":0,"start":"2020-11-04T11:40:47.786Z","end":"2020-11-04T11:41:34.925Z","duration":47139},"suites":[{"type":"suite","start":"2020-11-04T11:40:47.791Z","_duration":0,"uid":"suite-0-0","cid":"0-0","title":"STEP 1 - initial visit to test page","fullTitle":"STEP 1 - initial visit to test page","tests":[{"type":"test","start":"2020-11-04T11:40:47.792Z","_duration":8719,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html"},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":"iVBORw0KGgoAAAANSUhEUgAABAAAAAJuCAYAAAAuM3CTAAABJ2lDQ1BTa2lhAAAokX2RP0vDQBjGf1YX0UHQUgeFjF380xqrggomanFtFWq3NA1BbGtII+rs6ofQVfwAfgQ3B8HJVXAUBGefs0MKEt+HN/fjuXtz995BbhZFbgq6vSSuVR2rcdy0GArP70dkxwh8v5ovvCz8sy4rxttB39f4qUxiba5ftsUz4YAvDbcGfGM4Pqy54ltxMRzi1hBfJFEifjLr/Sg2/Cbe7HbO/fTcTAa9o7rGhnKOKmdSSIeAJeqccoInqrCDwy6rrEj7yhJllnFZl2zlhrSnGUeuLVpThSuV5bjpfSYObH3A6HPqNa/gQT0W7NQrzkP+Dh63Iy/2fq0x80iB6r/yOvY9TL/DxLXcgplOa9O3yOjV+tOrxQE9fBZFpq8SlR83D0jfxwqOHQAAIABJREFUeJzs3Xl8DPf/B/BXJK6wrhJXXBFBUmnROCrRuKqKOlppKHV9qbpaFKV1JKirStVVN1EqRV1VV5xREZVKiJILkRAJiWRzH/v5/ZHHzi+TmU02h1B5PR+PfcjO55jP7MyO/bxn5vMxEUIIEBEREREREdErrcyLbgARERERERERPX8MABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQJmL7oB9N+XkpKCw4cPo2rVqujRowdMTU1fdJNKTFRUFG7duoWkpCS0bNkSTZo0KVXbT1QYOp0O586dw6NHj9C/f39UqlTphbSjNJ+7iIiIqHTK9w6A0aNHw8TExKjX8uXLZWXfffddg3m/+OKL57ZRVHLu3r2L2rVrw9XVFb169YKtrS0yMjJedLOeu2vXrqFdu3aoW7cuunXrhg8++ADNmjVDvXr1sH///gLXZ2dnZ/T3LL+Xo6Pjc9ji58fDw6NA21elShU0b94cH3/8MVatWoWHDx++6E34TwkNDc33M161alWB6vz+++/zrfP+/fsAgKysLDg4OKBbt24YOnQo6tati3///fd5bGqeXoVzlzHfnWvXrhWozvfffz/P+ho0aPCc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NaeSmA6XiIioNGMAgIgoB3t7e+nv3bt3Y/PmzUhKSpLl0el08PPzw5AhQ6RxAn755ZcSbSe9/OrXrw9bW1vp/ahRoxAYGKjIl5CQgPXr12POnDkAgLFjx6J3794l1s4X5cqVK4pl27dvV3zfiIiIqPhwDAAiohx0Oh0WLFiAFStWQKvVSsttbGxQuXJlREREyAYHHDFiBObOnYsmTZq8iObSSy4wMBDffPMNDh06JC2zsLBAnTp1kJqaikePHknHmaWlJRYvXgxXV9cXNmhhSdBqtRg0aBBOnDihmm5paYlBgwZhxYoVHPiPiIiomDEAQESkIikpCb6+vggODkZISAi0Wi1MTExQtWpVVK9eHXZ2dmjXrh1q1ar1optK/wHBwcHw9/dHUFAQHj16hPT0dFSqVAnVqlVDvXr14ODgADs7u1e646+XnJyMb7/9Ns88ZmZmWLp0KQMARERExYwBACIiIiIiIqJSgGMAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQIMABARERERERGVAgwAEBEREREREZUCDAAQERERERERlQKlPgAghICvry9SUlJedFOIiIiIiIiInpt8AwDz5s1DlSpVYGJigqZNm6JLly7o0qUL2rVrBxMTE3Tu3Lkk2pmnjh07Su174403YGJigipVquCNN96Q2r527VrVsjdv3kT79u2xdevWEm61upCQEHz66acwMTGBiYkJ2rZti+bNm6N58+YYP348Ll269KKbSERERERERP9B+QYA3NzcMGbMGADAmjVrcPbsWZw9exa+vr64ffs2MjIynnsjASAuLg67du1STUtPT4evry9CQ0Ph7e0NAOjatSv8/f3x7NkzzJ49G8nJyaplW7Zsid9//x2DBw9+bm0vCGtra+zcuRNWVlYAAG9vb9y5cwc+Pj64efMmHB0d8ffffxtdnxAC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EREREVEpwAAAERERERERUSnAAAARERERERFRKcAAABEREREREVEpwAAAERERERERUSnAAAARERERERFRKcAAABEREREREVEpwAAAERERERERUSnAAAARERERERFRKcAAABEREREREVEpYGZMJg8PDyQnJyMsLOx5t4dKmJWVFczNzTFs2LAX3RQiIiIiIiJ6jkyEECKvDB4eHjA3N0e3bt1Kqk1Uwry8vJCcnMwgABERERER0Sss30cAkpKS2Pl/xXXr1g1JSUkvuhlERERERET0HOUbALh7925JtINeMO5nIiIiIiKiVxsHASQiIiIiIiIqBYo1AODp6YmRI0caNVjgokWLcPDgQdW0/fv3Y8mSJUatMzAwECNHjkRmZma+eSdMmAAfHx+j6n3ZnDt3DjNmzFBNmzx5Mi5fvlzCLSIiIiIiIqL/kmILAOh0Ori7u+PgwYPw8PDIN7+3tzeCgoJU04KDg3HhwgWj1vvkyRMcPHgQOp0u37y7d+/Gw4cPjar3ZRMWFoZjx46ppkVERPAZfiIiIiIiIspTsQUALl++jMjISMyZMwdbtmxBSkqKIk9aWhqCg4NVr9YLIRAcHIzk5GSj1hcREYEnT56opmm1Wvz7778G64qNjUVoaKgsaJCWlqbIHx8fL2treno6goKCkJ6ejpSUFNVtzN3GZ8+eKZZnZWUhKCjIYPuio6Px4MED5DVBQ2pqKuLj4wEA27dvh7Ozs5Sm0+lw7969fOsgIiIiIiKi0qPYAgC//PILHB0d8emnn0Kr1eLIkSOy9O3bt6NOnTpo164dbG1tERoaKqX5+fmhefPmaNeuHerXr4+jR48aXE9cXBy6deuGVq1aoVmzZnB3d5fShBBwc3NDw4YN8fbbb6N+/fpYt26drPzatWvRtGlTvPXWW2jbti3u3LkDANi6datstoOUlBQ0btxYurV+27ZtqF27Ntq3bw9ra2t07doVCxYsUG3j3bt34eDggFatWqFJkyZwcXFBSkoKMjMz8d1336Fly5Zo37496tevj5UrV0rl/v77b7i4uKB58+awt7eHk5OT6uMUd+/ehb29PSZOnIiMjAy8/vrrOHToEIDsRyLat2+P1q1bw97eHl26dEF4eLjBz5OIiIiIiIhKh2IJAMTHx2PPnj345JNPULNmTXzwwQfYvHmzlB4YGIgpU6Zg/vz5uHfvHsaPH4+YmBgA2VfeXV1d4ejoiODgYHh6eiIwMNDguqZNm4bk5GT4+Pjg0qVLsqvoBw4cwKpVq7Bz505ERkZi5cqV+Oabb3DlyhUpz+PHj3HmzBn8888/qFGjBr788kspzdA4AgEBAZg6dSrc3Nxw//59zJkzB7dv31bNK4SAi4sLGjVqBH9/f9y8eRPXr1/Hpk2bsG3bNixfvhzLly9HeHg4Fi9eDHd3d5w6dQrJyckYMmQITE1N4e/vD29vb5iZmWHMmDGyq/j3799H37594ejoiK1bt6Js2bLSejMyMjBixAg0adIEN2/exJUrV1CxYkXZNhIREREREVHpVCwBAP3V506dOiE+Ph69e/fG1atXcfPmTQCQrqJ/9tlnqFq1KsaPHy+VDQ4ORkxMDMaOHYuaNWuiR48esivxOQkhcPr0aekqua2tLVxdXaX0o0ePonHjxqhRowb++ecfNGvWDBqNBidOnJDyuLi4oHXr1mjcuDGGDRsGHx8f1dv0c7p48SI0Gg0+//xzVKlSBaNHj0atWrVU80ZERCAkJASjR49Gw4YNUb9+ffzxxx8YMGAADh8+jI4dO6Jfv37QaDT47LPPUKtWLRw/fhzXr19HTEwMJkyYgIYNG8LOzg5jxoyBn58fHj16BACIjIxE7969Ubt2bWzcuFHq/OsFBQUhJCQEHTt2xL179xATE4MOHTrg7Nmz0Gq1eW4jERERERERvdrMiqOSHTt2AADs7e1ly7dv347vv/8e9+7dg52dHSpUqAAAKFeuHDp06AAAePDgAQCgRYsWUjkHBwecP39esZ64uDhotVq0bNlSWta6dWvp7/DwcDx9+hRfffWVtKx+/fqyK+hvvvmm9Le+nqdPnyrWlXN8gIcPH8LKykrqcJcpU0axrXr3798HANjZ2UnLmjVrBgCIiopC7969peUmJiZo3749oqOjpTsiWrVqJaXr/46NjZWWaTQa+Pn54datW4o26Ac43L17Nzw9PaXlLVq0QGxsLDQajWqbiYiIiIiI6NVX5DsAAgMD4efnh23btuHff/+VXuPHj8eWLVuQkJAAGxsbBAYGIiEhAQCQkZEh3ebftGlTAMD169elOnP+nVONGjWkDrCe/i4DALC0tISVlRUuX74svRYvXowhQ4ZIee7duyf9ra+nbt26MDMzkw3qFxUVJf3t5OQEf39/6Sp6eno6vLy8VNtoYWEBALhx44a0zNPTE+vWrUOjRo3w119/ScuzsrJw/vx52Nraol69egCAf/75R0r/+++/AQBNmjQBANSqVQsXL15E586dMX78eKSnp8vWra9j4cKF0vbv27cPCxYsQJ06dVTbS0RERERERKVDkQMAnp6eqFWrFvr06YM6depIr08//RRA9nP5jo6OAIBly5bh4cOHWL16tdSZbtq0KaytrbF69WqEhobi2LFjOH78uMH1DRo0CLt378Zff/0Ff39/2ZSDH3zwAfz9/bFp0ybExcXB09MTAwYMwOPHj6U827Ztw71793Dt2jVs3boV/fv3h7m5OerWrYvIyEgcP34cDx8+xOLFi6UynTt3BgB89dVX8Pb2xowZMwy2z8rKCi1atMCGDRtw584d3Lx5E1999RWqVauGAQMG4OrVq/Dw8EBUVBRWrFgBrVYLJycntGrVCo0bN8bKlSsRGBiIK1euYNOmTXB0dESlSpUAZN85YWZmJuX54YcfZOu2sbGBtbU1VqxYAX9/f0REROB///sffvzxR5QrV86o/UlERERERESvpiIFADIzM7Ft2zYMHjwYZmbypwmaN28OBwcHbN68GVZWVvj1119x8OBB2NnZYdeuXWjRogXKlCkDU1NTeHp6IjY2Fm+99RY++eQTdOnSBaampqrrXLhwIRwcHNC7d284OzujcePGALJvpx84cCC++eYbzJgxA1ZWVnB3d/Ru1d8AACAASURBVIe7u7sUgACyO8mtW7dG9+7dUa9ePSxZsgQA0L17d7z//vsYPHgw7OzsoNFooNFoYGJiAnNzcxw+fBh37txB37598fjxYzRu3Bjly5dXtM/MzAzbtm1DXFwcOnTogPfffx+urq5wcXGBq6srpk6dismTJ6Nly5bYvHkzNmzYAEdHR1SoUAG7du1CdHQ0HB0d8d5776FBgwayAIeelZUVFi5ciKVLl8oGTCxbtix27dqF9PR0ODs7o1WrVtBoNFi9ejVMTEwKvH+JiIiIiIjo1WEi8pkofubMmZg1a1axrEwIgcePH6N27dqqHdInT56gWrVqimCCmoSEBJiamkpXx3PKzMxETEwM6tatq1o2OTkZqampqFGjhiLt2bNnMDMzQ+XKlaVlt2/fhre3N0aNGoUyZcogPT0dbdq0weeff44JEyYYbOPTp09RuXJlRaAgIyMDT548Mdi+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2XinY9mUpt53zWnVqtX7evCfrPv7vtO/8ZIlS/KjH/0oI0eOzKmnnrpRB/8AAPCv7gOfA+CDct1112X//ffPyJEjs2TJkgwfPjxHHHHEB71a0KT27dvn3nvvTadOnTJixIh88pOfzJgxY1JdXf1Br9r/Ka1bt86kSZOy77775sorr/ygVwcAADaJZi8BuOmmmyr3dwegcXfddVe+/vWvf9CrAQAADWr2DIB27dpVbjMGQMMeeeSR9+SyEgAA2FSaPQMgSeUWanWzhgPw/9XU1KSqqsrdAgAA+Jf2LzMJIMC/Mgf5AAB82DV7BsBtt92WqqqqHHTQQe/XOgH8S3rkkUeybNkyEQAAgA+lZucAWLp0qYN/gCQHHXRQli5d+kGvBgAAvCPNBoCZM2e+H+sB8KHgv4kAAHxYNRsAAAAAgA+/TRIATj/99AwcOHCDr9tuuy1JMmTIkEycOHFTLKpJL7/8cl588cX3fDl1XnzxxQwcODALFix435a5McaOHZvvfve7G/z7nXjrNq4/xmPHjs3555//7le4CY1ty+9+97tccMEFm3x5b2df/dWvfpUjjjgixx133Lte7vu97ybJsmXL8sMf/jCDBg3KT37yk8yZM+c9X+aqVasycODAPP300xs8dvfdd+eyyy7b4GvUqFGbdB3e7XsCAAA+rDZJALjnnnvy2muvZbvttqv31alTpyTJ7Nmz35frZvfaa6889dRT7/ly6qxZsyazZs3K6tWr37dlboxnn302Y8aM2eDf78Rbt3H9MZ41a1bGjh377le4CY1ty3PPPfeutqsxo0aN2qgD4YULF+bss8/ODjvskIEDB77r5X4Q++5RRx2V22+/PT179sy9996b/v37v+f78po1azJq1Ki89tprGzw2f/78PPvss5WvRx99NNdff32eeeaZTboO7/Y9AQAAH1ab7DaAxx57bL7yla80+Nj//M//pKqqKmvWrMmSJUvSrl27vPDCC6mpqclmm22WJJk3b14WLVqUHXfcMS1bNrxaK1euzJo1a1JVVVX52aJFi9KuXbusWLEiixcvzpIlS/LGG2+kVatWlcdnz56djh07Zvvtt6/3em+++Waee+65dO7cOW3bts3KlSvTvn37es9ZtmxZktRb5ooVK7J27dpsv/32+fWvf50tt9yy8tiqVasyc+bMbL311vnoRz+aZN1Eii1atEjbtm2TJMuXL8/atWvTrl27yu+sXr263jLWt2LFirz44ovp1q1bZbySZPXq1ZW4suOOOzb6+4295urVqyvb+8Ybb2TZsmWVbVmzZk2WLl1abxuXLFlSb4zrrF27Ns8//3w6dOiQzp07N7vchrYlSebOnZtXX301Xbt2zVZbbbVR27F69eo899xz6dKlS72/Q91jTY3PwoULs3jx4g32i/UtWrQorVu3Tps2bSo/W7NmTV544YUkyeDBg7PrrrtWHps3b15WrlyZ7bbbrrJ9dX/fNWvWZNGiRdluu+3qLeOt41q37zY1HqtWrcrzzz+f6urqrFmzJkkq+9eSJUsya9asbLPNNtl6660b3K6HHnookyZNyuTJk1NdXZ1Bgwbl8MMPz+OPP5599tmnwd9Zvnx5Zs2alRYtWtR7n9bW1qZ9+/ZZvnx5XnzxxVRXV9cbr7qxXrRoUZP7x9lnn52zzz678v2ZZ56Zl19+Oeecc06jv5Osuya/Y8eOlfdbsu5926pVq2y22Wb55z//mW233XaD/ePNN99MbW1t2rVrV++/ObW1tamqqmr0v0MAAPBh9b7MAbDrrrvmvvvuy7Rp01JdXZ0vfOEL2WOPPXL55Zfn9ddfzwknnJCdd945ffr0SU1NTcaNG9fg6/ziF7+od0eC5cuXp7q6OhMnTszhhx+eJPna176WH//4x6mtrc2AAQNSXV2dvn37ZrfddsvJJ59cOVh64oknsvPOO2ePPfbIDjvskKOPPjqHHHLIBsu85ZZb8ulPf7reJ6MDBw7MN7/5zcyYMSPV1dWZPXt2knWfHnfr1i177713unXrltNPPz3Lly/PeeedVy+OnHjiidlrr70q3//nf/5nBg8e3OA2f//738/HPvax9OnTJzvvvHPuu+++JMl9992XmpqafOYzn0nfvn3TvXv3RsetIb/+9a+z/fbbVw7kb7jhhlRXV1cObB944IHsuuuuefrppyvb+NYxTpIFCxbkwAMPTO/evbPTTjvlzDPPrIzxxm7L008/nT333DO77LJL+vXrl5qamvzoRz9qdhsWLFiQffbZJ3vttVeqq6tzxRVXVB5ranyWLVuWE044ITvuuGN222239O3bNzNmzNjg9a+44opUV1fnr3/9a72fz5gxI/vvv3+S5OCDD85NN92UJ554IgMGDMjOO++c3XbbLf369ctzzz2XJPnlL3+Z/fbbL717907Pnj3z0EMP1Xu9t45rc+Nx6623pkuXLtlrr73SrVu3HHjggZVtHzFiRLbffvt87nOfy6c+9akMGDCgErHW98gjj+TQQw/NVlttlXHjxmX27NmZOHFiowf/l112WT7+8Y9n7733Tp8+fbLPPvvkpZdeSrLu/X3aaadlu+22yz777JOddtopjz76aJJ1ceicc87JjjvumE9/+tM55phjGvlr1jd69OjceeedueWWWzaIcnXuueee9O3bN7169Uq3bt0yaNCgLFmyJEly1lln5Utf+lJqamqy9957p7q6Ov/93/9d7/dXr16dnj175oYbbqj87LnnnssOO+zQ4CUKAADwYbfJAsDdd9+d888/v/J1+eWX13v8zTffrPz7Ix/5SEaPHp2BAwfme9/7XiZPnpw//vGPefbZZ3P88cfnlFNOyaJFixpcTmOnKE+YMCFJcscdd+Sb3/xm7rrrrowdOzaPPfZY5s+fnxtvvDG//e1v8+STT2b58uU56aSTst9+++Xvf/97Ro0alWnTpjX4ul/84hczf/78yuvPmzcvo0ePzgknnFBv22bOnJmBAwfmq1/9ambNmpVRo0blwQcfzE033ZTDDz88Y8aMyfLly7N06dKMGzcuc+bMycyZM/Pmm29m1KhR+fd///cNlj1q1Kj84Ac/yM9//vO8/PLLGTx4cM4555zMmzcv55xzTk499dTMnTs3zzzzTGpqanLjjTc28Req78ADD0ySysFt3an8dde/jxkzJkcddVQ233zzyja+dYyTZPHixTn22GMzZ86c/Nd//VfuvPPO/OMf/9jobVm0aFGuvPLKdOzYMTNnzsyLL76YQYMG5ZJLLsnatWub3IbFixenf//+ef755zNs2LAMGzYs48aNy4oVK5ocn4svvjjTpk3LmDFj8uKLL6Zr16656KKL6r32VVddlWHDhuXBBx/M5z73uXqP/du//Vsee+yxJMnkyZMzePDgnHTSSdl8880zZcqUTJgwIS1btszgwYMr+/2zzz6bM844I/fff3/69etX7/XeOq5NjcfUqVPzrW99K5dddlleeOGFXHTRRZk+fXrltS688MKcf/75efXVVzNhwoSMHTs248eP32DsZs+enTlz5qRnz575/Oc/n759+2bw4MENjvnUqVNz/fXX59Zbb6287rPPPptf//rXlec89dRTGT9+fGbOnJmamppcf/31SdbFj9tvvz0jR47MjBkzNjj7oSFr167Nd77znZxyyinZY489GnzOlClTcvrpp+ewww7L888/n+HDh+fhhx/OtddeW3nOI488kltuuSVz5szJ4MGDc95559WLU61atcqgQYNyxx13VH527733pnv37tltt92aXU8AAPiw2WQBYNWqVamtra18rVy5stHnnnXWWdlrr73yiU98IsOHD0/fvn2zePHiTJ8+Pf369cvixYvz+OOPv6v1OeGEEzJ16tR07tw5TzzxRF5//fUk6w4an3nmmcyfPz9nnnlmOnfunP322y+HHXZYg6/TtWvXHHLIIRk+fHiS5P7770/nzp2z77771nve7373uyTrruWeOnVqWrZsmT59+uSBBx7Ifvvtl2TdWQePPvpounbtmm7dumXixIl5+umnM3/+/AbPPvjjH/+YHj165LjjjkubNm0yZMiQjBw5Mu3bt8/48eNz/vnnZ/bs2Xn88cdTVVVV2caNse2222bPPffMuHHjsmjRovzlL3/JQQcdlHHjxmX16tX5zW9+kyOPPHKjXuvss89OVVVVTjzxxCRpcDK7xraldevWGTZsWO66664sW7Ysjz32WOUgbcWKFc0u+xvf+Ea23HLL/Md//Ec6dOiQ3/3ud9liiy2aHJ/Ro0fnmGOOyZ577pn27dvnRz/6US655JLKa1599dW5+uqrc+edd2bvvfdudh2efPLJzJ8/P2eddVY+8YlPpEePHhk8eHAmTZqUl19+ufK8IUOGpF+/fs1eqtHUeIwfPz4dOnTIGWeckY4dO+a0006rd1p9dXV17rnnnvzsZz9Ly5Yts2DBggb37VdffTXTpk3LDTfckPnz5+eWW27JiBEjcv/992/w3J133jmPPfZYDj300DzzzDP529/+ls6dO6e2trbynLpLITp16pTDDjss8+bNS7LufXHAAQdk//33zzbbbJMzzjij2fH885//nOeff77JuRXqgtW3vvWtbLnlljn44INz5JFH1psw8Mgjj8xhhx2Wqqqqyr781rlIjj/++Dz77LOZPHly1q5dm1/+8pf58pe/3Ow6AgDAh9Emu8j11FNPbXQOgLf62Mc+lmTdtbaLFy/OhAkT6k301b179wZPW36rpj4hfu211/LVr341kyZNSufOnSuf4q5du7ZyUNatW7fK83fddddGJ2E7+eST85WvfCXXXHNNbr/99gwcOHCD64PrLgO49NJL6/18q622ypZbbplDDjkkv//977NmzZocdthh2XzzzTNu3LjMmzcv++yzT4PXRs+YMSO9evWqfN+6dev07t07STJy5MhcdtllSZLdd989K1euTIcOHRodj4b0798/9913X3bfffdUV1fn1FNPzXnnnZe//vWvWbx4cfbbb7/MmjWrydeorq6unCVQN6dBQ2dpNLUt48ePzze/+c3MmTMn1dXVlU+J1z9rpCHdunWrXNfdokWL9OnTJ3Pnzk2LFi0aHZ9Vq1Zlzpw59T7h7dKlS7p06VL5/pVXXknnzp1z9913V07Pb8r8+fOTJD179qz8rO7fdZPdrT9OzZk6dWqj4/HSSy+lpqamMk9AixYt6m3LrbfemssvvzxDhw7NhRdemO7du+d///d/86lPfareMrbddtt07949n//855MkX/jCF3LppZdm8uTJG5ymv2bNmlxzzTUZMWJEkmTffffNihUr6v191r/+vm3btpVoMXPmzBxwwAEbjEtTbrvttvTq1ave/vJW8+bNS48ePSr7XJL07t07d999d71tXH+dkg33qR49emT33XfPvffem5UrV2bOnDmb5K4OAADwr+h9mQNgg4W2WLfYjh07pkOHDjnppJMyceLETJw4Mb///e9zySWXNHgtcsuWLbN8+fLK93Pnzm10GRdffHFWrlyZJ598Mn//+98rB+Zr166tfKq7/rXdf/7znxt9rcMOOywdOnTIjTfemClTpmTAgAEbPKdr165J1l07X7ctN998c+WT5SOOOCJjxozJmDFj0q9fv+y333757W9/m9/85jc5+uijG1xu165d650JsWjRonzjG9/IAw88kMsuuyzXXXddXnrppfzhD3/Innvu2ei194055JBDMmnSpIwYMSKHHHJIPvvZz2b+/Pm5/vrrc+SRRzZ67fU70di2PPPMMznttNNy4IEHZubMmZk8eXJOPfXUJE0HnmTdafV1sWH16tV57LHHssMOO2Tq1KmNjs8WW2yRDh06ZMqUKZXXmTx5cs4///zKWSvf//7384tf/CKjRo3aqFvQffzjH6+8Tp0nnngiSbLjjjsmyUZPKLd69eomx6Nfv36ZMmVKFi9enGTdmTePPPJIknWTZD711FP53ve+l3/+858ZOXJkFixYkJ/85CcbLKe6urre92vWrEltbW2Dkwb+6le/yogRIzJmzJi8+uqrue+++9KxY8eN2t922WWXynwASZqd0X/NmjW55557cvLJJzf5vK5du2batGn1zkKYOHHiRp2x8VZf/vKXc88992TUqFE5/PDD68UgAAD4v+QDCQDrO/744/OLX/wiDz30UF5//fVceuml+drXvrbBDPHJujMH5syZk9GjR+ell17K0KFD6z3eoUOHTJ06Na+++mpatmyZqqqqdOrUKQsWLKgEgFWrVuWjH/1o9t1331xxxRUZO3Zsbrjhhnq3BfvnP/+ZG264oXKQ1aZNm5xyyikZOnRo9t5773zyk5/cYN0OPvjgJOsmS5s9e3aefPLJ9O/fvzLx3MEHH5xp06Zl+vTp+exnP5t99tknixcvzqRJk3LooYc2ODb9+/fP9OnT86tf/Sqvvvpqhg0blocffrjyiXCnTp3SqlWrPPzww7nttts26qyJ9e2yyy6prq7OiBEjsu+++6Zz587p0aNHRo8e3eCcBG8d47ejsW2pm4G/Q4cOqaqqyj/+8Y/84Ac/SLLub9Wcn/70p3n99ddz7bXXZvHixfXmLWhsfE488cQMHz48f/zjHzN79uxceumlWbJkSVq3bp1k3d+7b9++GTRoUIYMGVI5nb0xPXv2THV1da677rpMmzYtjz76aG655Zb07du33ifUTakb17plNTYedZeenHvuuZkwYULOP//8ymtsvvnmufTSS3PRRRdl4cKF+cQnPpEtttiicjvO9Z1yyimZPn16fvrTn2bhwoWV/X39T+vr1AW7rbfeOitXrswPf/jDzJkzp8nLfOocccQRefzxx3PPPfdk1qxZzU7uWHcLxh49ejT5vLozM6688srMmTMno0aNysiRI+tNErqxjj322MyfPz8333xzs+EBAAA+zN7XAFB3YFZ3QJGs+6T+0EMPzYknnpiampr85S9/yc9//vMGP4msu873S1/6Unr06JEOHTqkQ4cOlVhwzDHH5KqrrsrQoUMzZMiQLFu2LNXV1enWrVs+/vGPp7q6OlOnTk2S/PjHP85HP/rRDBgwIPfee28OOOCAygHg3/72t1x88cWVAJCkMulf3aexb92O6urq3HnnnRk9enR69uyZo3+MPU8AAA6zSURBVI8+OkcddVSGDBmSJNl+++2z++67p0ePHtlmm23ykY98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AABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAH+H04CXXshhDaeAAAAAElFTkSuQmCC"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124056.034.png"}],"errorIndex":0,"end":"2020-11-04T11:40:56.511Z"},{"type":"test","start":"2020-11-04T11:40:56.521Z","_duration":102,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:40:56.623Z"},{"type":"test","start":"2020-11-04T11:40:56.623Z","_duration":3159,"uid":"test-00-2","cid":"0-0","title":"should NOT have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should NOT have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3ALohvsSkq6VVFuQheoIlDFbdzqJSmDh9h.u4CsIPH3wHGrhjOrc2Q2L%2FLSkTZ2%2Bg83k%2FhnVYjilEw","path":"/","httpOnly":true,"secure":false}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"getCookieByName","sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:40:59.783Z"},{"type":"test","start":"2020-11-04T11:40:59.784Z","_duration":283,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"result":{"value":true},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"result":{"value":true},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:00.067Z"},{"type":"test","start":"2020-11-04T11:41:00.067Z","_duration":97,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:00.165Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:40:47.792Z","_duration":8719,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html"},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-map.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124056.034.png"}],"errorIndex":0,"end":"2020-11-04T11:40:56.511Z"},{"type":"test","start":"2020-11-04T11:40:56.521Z","_duration":102,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:40:56.623Z"},{"type":"test","start":"2020-11-04T11:40:56.623Z","_duration":3159,"uid":"test-00-2","cid":"0-0","title":"should NOT have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should NOT have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3ALohvsSkq6VVFuQheoIlDFbdzqJSmDh9h.u4CsIPH3wHGrhjOrc2Q2L%2FLSkTZ2%2Bg83k%2FhnVYjilEw","path":"/","httpOnly":true,"secure":false}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"getCookieByName","sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:40:59.783Z"},{"type":"test","start":"2020-11-04T11:40:59.784Z","_duration":283,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"result":{"value":true},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"699089dc-7559-499c-9776-04583370211f","ELEMENT":"699089dc-7559-499c-9776-04583370211f"}]},"result":{"value":true},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:00.067Z"},{"type":"test","start":"2020-11-04T11:41:00.067Z","_duration":97,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:00.165Z"}],"end":"2020-11-04T11:41:00.165Z","duration":12374},{"type":"suite","start":"2020-11-04T11:41:00.168Z","_duration":0,"uid":"suite-0-1","cid":"0-0","title":"STEP 2 - deny tracking","fullTitle":"STEP 2 - deny tracking","tests":[{"type":"test","start":"2020-11-04T11:41:00.168Z","_duration":5086,"uid":"test-01-0","cid":"0-0","title":"should deny tracking","fullTitle":"STEP 2 - deny tracking should deny tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"41809264-0f01-4d4a-aaa6-98a660c4e01a"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/41809264-0f01-4d4a-aaa6-98a660c4e01a/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/41809264-0f01-4d4a-aaa6-98a660c4e01a/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:05.254Z"},{"type":"test","start":"2020-11-04T11:41:05.255Z","_duration":684,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - deny tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124105.304.png"}],"errorIndex":0,"end":"2020-11-04T11:41:05.940Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:00.168Z","_duration":5086,"uid":"test-01-0","cid":"0-0","title":"should deny tracking","fullTitle":"STEP 2 - deny tracking should deny tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"41809264-0f01-4d4a-aaa6-98a660c4e01a"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/41809264-0f01-4d4a-aaa6-98a660c4e01a/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/41809264-0f01-4d4a-aaa6-98a660c4e01a/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:05.254Z"},{"type":"test","start":"2020-11-04T11:41:05.255Z","_duration":684,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - deny tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"27a545fe-a388-4617-af7d-2441531d455b","ELEMENT":"27a545fe-a388-4617-af7d-2441531d455b"}]},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124105.304.png"}],"errorIndex":0,"end":"2020-11-04T11:41:05.940Z"}],"end":"2020-11-04T11:41:05.940Z","duration":5772},{"type":"suite","start":"2020-11-04T11:41:05.946Z","_duration":0,"uid":"suite-0-2","cid":"0-0","title":"STEP 3 - fire virtual page view by clicking button","fullTitle":"STEP 3 - fire virtual page view by clicking button","tests":[{"type":"test","start":"2020-11-04T11:41:05.947Z","_duration":4799,"uid":"test-02-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should accept tracking","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should accept tracking","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"1608bde7-adb5-436d-abd5-4020739bb6d3"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/1608bde7-adb5-436d-abd5-4020739bb6d3/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/1608bde7-adb5-436d-abd5-4020739bb6d3/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:10.746Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:05.947Z","_duration":4799,"uid":"test-02-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should accept tracking","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should accept tracking","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"1608bde7-adb5-436d-abd5-4020739bb6d3"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/1608bde7-adb5-436d-abd5-4020739bb6d3/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/1608bde7-adb5-436d-abd5-4020739bb6d3/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:10.746Z"}],"end":"2020-11-04T11:41:10.746Z","duration":4800},{"type":"suite","start":"2020-11-04T11:41:10.747Z","_duration":0,"uid":"suite-0-3","cid":"0-0","title":"STEP 4 - fire virtual page view to tag 10 only by clicking button","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button","tests":[{"type":"test","start":"2020-11-04T11:41:10.747Z","_duration":4828,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"b6f4dc83-eb6c-408b-bb29-1622f6ecf5e6"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/b6f4dc83-eb6c-408b-bb29-1622f6ecf5e6/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/b6f4dc83-eb6c-408b-bb29-1622f6ecf5e6/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:15.575Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:10.747Z","_duration":4828,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"b6f4dc83-eb6c-408b-bb29-1622f6ecf5e6"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/b6f4dc83-eb6c-408b-bb29-1622f6ecf5e6/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/b6f4dc83-eb6c-408b-bb29-1622f6ecf5e6/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:15.575Z"}],"end":"2020-11-04T11:41:15.575Z","duration":4828},{"type":"suite","start":"2020-11-04T11:41:15.575Z","_duration":0,"uid":"suite-0-4","cid":"0-0","title":"STEP 5 - fire virtual page view to tag 11 only","fullTitle":"STEP 5 - fire virtual page view to tag 11 only","tests":[{"type":"test","start":"2020-11-04T11:41:15.576Z","_duration":4874,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"311887b3-b4cb-4415-ba0c-8d5d31fbb2db"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/311887b3-b4cb-4415-ba0c-8d5d31fbb2db/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/311887b3-b4cb-4415-ba0c-8d5d31fbb2db/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:20.450Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:15.576Z","_duration":4874,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"311887b3-b4cb-4415-ba0c-8d5d31fbb2db"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/311887b3-b4cb-4415-ba0c-8d5d31fbb2db/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/311887b3-b4cb-4415-ba0c-8d5d31fbb2db/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:20.450Z"}],"end":"2020-11-04T11:41:20.450Z","duration":4875},{"type":"suite","start":"2020-11-04T11:41:20.451Z","_duration":0,"uid":"suite-0-5","cid":"0-0","title":"STEP 6 - fire virtual page view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only","tests":[{"type":"test","start":"2020-11-04T11:41:20.451Z","_duration":4743,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"59c06d06-a7c5-4b8c-960f-3e46a6c62be9"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/59c06d06-a7c5-4b8c-960f-3e46a6c62be9/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/59c06d06-a7c5-4b8c-960f-3e46a6c62be9/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:25.194Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:20.451Z","_duration":4743,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"59c06d06-a7c5-4b8c-960f-3e46a6c62be9"}},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/59c06d06-a7c5-4b8c-960f-3e46a6c62be9/click","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/59c06d06-a7c5-4b8c-960f-3e46a6c62be9/click","body":{},"result":{"value":null},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:25.194Z"}],"end":"2020-11-04T11:41:25.194Z","duration":4743},{"type":"suite","start":"2020-11-04T11:41:25.194Z","_duration":0,"uid":"suite-0-6","cid":"0-0","title":"FINALIZE - get Proxy logs to confirm tag firings","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings","tests":[{"type":"test","start":"2020-11-04T11:41:25.194Z","_duration":8970,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:34.164Z"},{"type":"test","start":"2020-11-04T11:41:34.165Z","_duration":75,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:34.240Z"},{"type":"test","start":"2020-11-04T11:41:34.240Z","_duration":44,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T11:41:34.285Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:25.194Z","_duration":8970,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:34.164Z"},{"type":"test","start":"2020-11-04T11:41:34.165Z","_duration":75,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:34.240Z"},{"type":"test","start":"2020-11-04T11:41:34.240Z","_duration":44,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T11:41:34.285Z"}],"end":"2020-11-04T11:41:34.285Z","duration":9091},{"type":"suite","start":"2020-11-04T11:41:34.285Z","_duration":0,"uid":"suite-0-7","cid":"0-0","title":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","tests":[{"type":"test","start":"2020-11-04T11:41:34.285Z","_duration":46,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:34.331Z"},{"type":"test","start":"2020-11-04T11:41:34.331Z","_duration":51,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.382Z"},{"type":"test","start":"2020-11-04T11:41:34.382Z","_duration":56,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.438Z"},{"type":"test","start":"2020-11-04T11:41:34.438Z","_duration":59,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.497Z"},{"type":"test","start":"2020-11-04T11:41:34.497Z","_duration":44,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.541Z"},{"type":"test","start":"2020-11-04T11:41:34.542Z","_duration":68,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.610Z"},{"type":"test","start":"2020-11-04T11:41:34.611Z","_duration":39,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.650Z"},{"type":"test","start":"2020-11-04T11:41:34.650Z","_duration":42,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:41:34.692Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:41:34.285Z","_duration":46,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:41:34.331Z"},{"type":"test","start":"2020-11-04T11:41:34.331Z","_duration":51,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.382Z"},{"type":"test","start":"2020-11-04T11:41:34.382Z","_duration":56,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.438Z"},{"type":"test","start":"2020-11-04T11:41:34.438Z","_duration":59,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.497Z"},{"type":"test","start":"2020-11-04T11:41:34.497Z","_duration":44,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.541Z"},{"type":"test","start":"2020-11-04T11:41:34.542Z","_duration":68,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.610Z"},{"type":"test","start":"2020-11-04T11:41:34.611Z","_duration":39,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:41:34.650Z"},{"type":"test","start":"2020-11-04T11:41:34.650Z","_duration":42,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"c1830c80f6594fb5a4509548eb0716ed","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:41:34.692Z"}],"end":"2020-11-04T11:41:34.692Z","duration":407}],"title":"Test Report Title","options":{"stdout":true,"outputDir":"./reports/html-reports/","filename":"report.html","templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"reportTitle":"Test Report Title","options":{"logLevel":"warn","outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}},"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}},"showInBrowser":false,"useOnAfterCommandForScreenshot":false,"LOG":{"category":"default","context":{}},"logLevel":"warn","debug":true,"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}}}