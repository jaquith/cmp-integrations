{"info":{"type":"runner","start":"2020-11-04T11:45:37.833Z","_duration":35735,"cid":"0-0","capabilities":{"goog:chromeOptions":{"debuggerAddress":"localhost:49195"},"browserVersion":"86.0.4240.75","timeouts":{"pageLoad":300000,"implicit":0,"script":30000},"strictFileInteractability":false,"acceptInsecureCerts":true,"webauthn:virtualAuthenticators":true,"networkConnectionEnabled":false,"chrome":{"chromedriverVersion":"86.0.4240.22 (398b0743353ff36fb1b82468f63a3a93b4e2e89e-refs/branch-heads/4240@{#378})","userDataDir":"/var/folders/qv/8dr6ylkn3c98dm4r414wh_0h0000kr/T/.com.google.Chrome.plsz6w"},"browserName":"chrome","setWindowRect":true,"proxy":{"httpProxy":"13.57.103.60:60549","sslProxy":"13.57.103.60:60549","proxyType":"manual"},"pageLoadStrategy":"normal","platformName":"mac os x","unhandledPromptBehavior":"dismiss and notify","sessionId":"c093a097a537478f889f2b69553b50e3"},"sanitizedCapabilities":"chrome.86_0_4240_75.macosx","config":{"protocol":"https","hostname":"ondemand.eu-central-1.saucelabs.com","port":443,"path":"/wd/hub","specs":["tests/specs/examples/usercentrics-v2/noview_opt-in.js"],"suites":{},"exclude":[],"logLevel":"warn","logLevels":{},"excludeDriverLogs":[],"bail":0,"waitforInterval":500,"waitforTimeout":20000,"framework":"mocha","reporters":["spec",[null,{"outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}}}]],"services":[["sauce"]],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"connectionRetryTimeout":40000,"connectionRetryCount":2,"execArgv":[],"runnerEnv":{},"runner":"local","mochaOpts":{"timeout":67000,"ui":"bdd","color":true,"retries":0,"specFileRetries":0},"jasmineNodeOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"before":[null,null],"beforeSession":[null,null],"beforeSuite":[null,null],"beforeHook":[],"beforeTest":[null,null],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[null],"afterSession":[],"after":[null],"onComplete":[null],"onReload":[null],"beforeFeature":[null],"beforeScenario":[null],"beforeStep":[],"afterStep":[],"afterScenario":[null],"afterFeature":[],"specFileRetries":0,"baseUrl":"","user":"caleb.jaquith","key":"6fab5239-14b0-49cf-8488-21839bd22c08","coloredLogs":true,"screenshotPath":"./errorShots/","host":"https://ondemand.eu-central-1.saucelabs.com","region":"eu","capabilities":[{"browserName":"chrome","browserVersion":"latest","platformName":"macOS 10.15","teal:enableProxy":true,"teal:enableTrace":false,"teal:runCrossBrowser":true,"teal:runRemotely":true,"teal:showDurations":true,"teal:enableSauceConnect":false,"teal:hasReporterContext":true,"teal:hasRunnerContext":true,"teal:reporterContext":"<p>This report has been generated by Tealium's automated testing platform.</p>\n<p>These tests will have been created specifically for your project by a Tealium Implementation Engineer to verify a configuration or use case.</p>\n<p>The intent is to document the tests run on the completed configuration (acceptance tests). It can also serve as a limited regression test as work continues, to ensure that future projects don't break previous ones.\nFor more information, see the <a href=\"https://jaquith.github.io/webdriverio-standalone/\">developer documentation</a>.</p>","teal:summaryContext":"<p>A suite of tests, intended to ensure the integration between Tealium iQ Tag Management and the Usercentrics Browser SDK (CMP v2) works as expected in multiple potential configuration cases.</p>\n<p>Includes some common error and misconfiguration cases.</p>\n<p>Does not include any TCF support, that setting is not checked.</p>","teal:capabilityNumber":1,"sauce:options":{},"teal:specPath":"tests/specs/examples/usercentrics-v2/noview_opt-in.js","teal:testContext":"<p>A Tealium iQ setup with the <a href=\"https://docs.tealium.com/platforms/javascript/settings/#noview\">noview</a> setting active and the Usercentrics integration correctly set up.</p>\n<p>User opt-in case.</p>","teal:testTitle":"'noview' Setting Active, User Opts In","teal:helpers":["helpers/specific/usercentrics-v2-general-integration-test-helper.js"],"proxy":{"proxyType":"manual","sslProxy":"13.57.103.60:60549","httpProxy":"13.57.103.60:60549"},"acceptInsecureCerts":true,"teal:opJourneyId":3962,"teal:opRunId":23270,"teal:opInitialActionId":51116}],"sauceConnect":false,"ignoredWorkerServices":[],"specFileRetryAttempts":0},"specs":["/Users/calebjaquith/.git/webdriverio-standalone/tests/specs/examples/usercentrics-v2/noview_opt-in.js"],"sessionId":"c093a097a537478f889f2b69553b50e3","isMultiremote":false,"retry":0,"failures":0,"retries":0,"end":"2020-11-04T11:46:13.568Z"},"metrics":{"passed":22,"skipped":0,"failed":0,"start":"2020-11-04T11:45:37.833Z","end":"2020-11-04T11:46:13.568Z","duration":35735},"suites":[{"type":"suite","start":"2020-11-04T11:45:37.837Z","_duration":0,"uid":"suite-0-0","cid":"0-0","title":"STEP 1 - initial visit to test page","fullTitle":"STEP 1 - initial visit to test page","tests":[{"type":"test","start":"2020-11-04T11:45:37.838Z","_duration":8918,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html"},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124546.034.png"}],"errorIndex":0,"end":"2020-11-04T11:45:46.756Z"},{"type":"test","start":"2020-11-04T11:45:46.763Z","_duration":117,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:46.880Z"},{"type":"test","start":"2020-11-04T11:45:46.880Z","_duration":5412,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5.202},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5.202,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session","expiry":1636026349,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934","path":"/","httpOnly":true,"secure":false}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session","expiry":1636026349,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:52.292Z"},{"type":"test","start":"2020-11-04T11:45:52.292Z","_duration":468,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"result":{"value":true},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"result":{"value":true},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:52.760Z"},{"type":"test","start":"2020-11-04T11:45:52.760Z","_duration":142,"uid":"test-00-4","cid":"0-0","title":"should NOT have queued an initial view event (because of the noview setting)","fullTitle":"STEP 1 - initial visit to test page should NOT have queued an initial view event (because of the noview setting)","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have queued an initial view event (because of the noview setting)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have queued an initial view event (because of the noview setting)","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"result":{"value":0},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:52.902Z"},{"type":"test","start":"2020-11-04T11:45:52.902Z","_duration":141,"uid":"test-00-5","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:53.043Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:45:37.838Z","_duration":8918,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html"},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124546.034.png"}],"errorIndex":0,"end":"2020-11-04T11:45:46.756Z"},{"type":"test","start":"2020-11-04T11:45:46.763Z","_duration":117,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:46.880Z"},{"type":"test","start":"2020-11-04T11:45:46.880Z","_duration":5412,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5.202},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5.202,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session","expiry":1636026349,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934","path":"/","httpOnly":true,"secure":false}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session","expiry":1636026349,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:52.292Z"},{"type":"test","start":"2020-11-04T11:45:52.292Z","_duration":468,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"result":{"value":true},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"b20782a6-4e27-4fc9-8bb4-fd87895819ce","ELEMENT":"b20782a6-4e27-4fc9-8bb4-fd87895819ce"}]},"result":{"value":true},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:52.760Z"},{"type":"test","start":"2020-11-04T11:45:52.760Z","_duration":142,"uid":"test-00-4","cid":"0-0","title":"should NOT have queued an initial view event (because of the noview setting)","fullTitle":"STEP 1 - initial visit to test page should NOT have queued an initial view event (because of the noview setting)","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have queued an initial view event (because of the noview setting)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have queued an initial view event (because of the noview setting)","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"result":{"value":0},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:52.902Z"},{"type":"test","start":"2020-11-04T11:45:52.902Z","_duration":141,"uid":"test-00-5","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:53.043Z"}],"end":"2020-11-04T11:45:53.043Z","duration":15206},{"type":"suite","start":"2020-11-04T11:45:53.045Z","_duration":0,"uid":"suite-0-1","cid":"0-0","title":"STEP 2 - accept all tracking","fullTitle":"STEP 2 - accept all tracking","tests":[{"type":"test","start":"2020-11-04T11:45:53.045Z","_duration":5101,"uid":"test-01-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 2 - accept all tracking should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d825e863-74a5-4188-84c7-9fcab015cc1a"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/d825e863-74a5-4188-84c7-9fcab015cc1a/click","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/d825e863-74a5-4188-84c7-9fcab015cc1a/click","body":{},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:58.146Z"},{"type":"test","start":"2020-11-04T11:45:58.147Z","_duration":671,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - accept all tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124558.190.png"}],"errorIndex":0,"end":"2020-11-04T11:45:58.819Z"},{"type":"test","start":"2020-11-04T11:45:58.820Z","_duration":114,"uid":"test-01-2","cid":"0-0","title":"should have an empty queue","fullTitle":"STEP 2 - accept all tracking should have an empty queue","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should have an empty queue","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should have an empty queue","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"result":{"value":0},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:58.934Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:45:53.045Z","_duration":5101,"uid":"test-01-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 2 - accept all tracking should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"d825e863-74a5-4188-84c7-9fcab015cc1a"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/d825e863-74a5-4188-84c7-9fcab015cc1a/click","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/d825e863-74a5-4188-84c7-9fcab015cc1a/click","body":{},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:58.146Z"},{"type":"test","start":"2020-11-04T11:45:58.147Z","_duration":671,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - accept all tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"35af6dde-990e-40e6-9b98-096eef9ce5eb","ELEMENT":"35af6dde-990e-40e6-9b98-096eef9ce5eb"}]},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124558.190.png"}],"errorIndex":0,"end":"2020-11-04T11:45:58.819Z"},{"type":"test","start":"2020-11-04T11:45:58.820Z","_duration":114,"uid":"test-01-2","cid":"0-0","title":"should have an empty queue","fullTitle":"STEP 2 - accept all tracking should have an empty queue","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should have an empty queue","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should have an empty queue","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration.implicitEventQueue.length\n    }).apply(null, arguments)","args":[]},"result":{"value":0},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:45:58.934Z"}],"end":"2020-11-04T11:45:58.934Z","duration":5889},{"type":"suite","start":"2020-11-04T11:45:58.935Z","_duration":0,"uid":"suite-0-2","cid":"0-0","title":"STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button","fullTitle":"STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button","tests":[{"type":"test","start":"2020-11-04T11:45:58.935Z","_duration":4791,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-6-and-7"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-6-and-7"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"e9dbf658-9691-4402-b88f-8d8506d972b5"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/e9dbf658-9691-4402-b88f-8d8506d972b5/click","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/e9dbf658-9691-4402-b88f-8d8506d972b5/click","body":{},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:03.726Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:45:58.935Z","_duration":4791,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view to tags 6 and 7 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-6-and-7"},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-6-and-7"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"e9dbf658-9691-4402-b88f-8d8506d972b5"}},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/e9dbf658-9691-4402-b88f-8d8506d972b5/click","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/e9dbf658-9691-4402-b88f-8d8506d972b5/click","body":{},"result":{"value":null},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:03.726Z"}],"end":"2020-11-04T11:46:03.726Z","duration":4791},{"type":"suite","start":"2020-11-04T11:46:03.726Z","_duration":0,"uid":"suite-0-3","cid":"0-0","title":"FINALIZE - get Proxy logs to confirm tag firings","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings","tests":[{"type":"test","start":"2020-11-04T11:46:03.727Z","_duration":9109,"uid":"test-03-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:12.836Z"},{"type":"test","start":"2020-11-04T11:46:12.836Z","_duration":45,"uid":"test-03-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:12.881Z"},{"type":"test","start":"2020-11-04T11:46:12.881Z","_duration":39,"uid":"test-03-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [\n    {\n      \"timestamp\": 1604490360761,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=7&_rnd=0.7272784035033297\",\n      \"id\": \"ee458114-19c5-480e-a2f4-9594481c7b05\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.146 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"7\",\n        \"_rnd\": \"0.7272784035033297\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    },\n    {\n      \"timestamp\": 1604490360769,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=6&_rnd=0.9060692680518727\",\n      \"id\": \"cd719346-00f8-41dd-bf39-9dcb45409c6a\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.148 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"6\",\n        \"_rnd\": \"0.9060692680518727\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    }\n  ],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [\n    {\n      \"timestamp\": 1604490360761,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=7&_rnd=0.7272784035033297\",\n      \"id\": \"ee458114-19c5-480e-a2f4-9594481c7b05\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.146 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"7\",\n        \"_rnd\": \"0.7272784035033297\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    },\n    {\n      \"timestamp\": 1604490360769,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=6&_rnd=0.9060692680518727\",\n      \"id\": \"cd719346-00f8-41dd-bf39-9dcb45409c6a\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.148 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"6\",\n        \"_rnd\": \"0.9060692680518727\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    }\n  ]\n}"}],"errorIndex":0,"end":"2020-11-04T11:46:12.920Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:46:03.727Z","_duration":9109,"uid":"test-03-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:12.836Z"},{"type":"test","start":"2020-11-04T11:46:12.836Z","_duration":45,"uid":"test-03-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:12.881Z"},{"type":"test","start":"2020-11-04T11:46:12.881Z","_duration":39,"uid":"test-03-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [\n    {\n      \"timestamp\": 1604490360761,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=7&_rnd=0.7272784035033297\",\n      \"id\": \"ee458114-19c5-480e-a2f4-9594481c7b05\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.146 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"7\",\n        \"_rnd\": \"0.7272784035033297\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    },\n    {\n      \"timestamp\": 1604490360769,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=6&_rnd=0.9060692680518727\",\n      \"id\": \"cd719346-00f8-41dd-bf39-9dcb45409c6a\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.148 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"6\",\n        \"_rnd\": \"0.9060692680518727\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    }\n  ],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [\n    {\n      \"timestamp\": 1604490360761,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=7&_rnd=0.7272784035033297\",\n      \"id\": \"ee458114-19c5-480e-a2f4-9594481c7b05\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.146 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"7\",\n        \"_rnd\": \"0.7272784035033297\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    },\n    {\n      \"timestamp\": 1604490360769,\n      \"requestLog\": \"https://solutions.tealium.net/hosted/i.gif?tagUid=6&_rnd=0.9060692680518727\",\n      \"id\": \"cd719346-00f8-41dd-bf39-9dcb45409c6a\",\n      \"enabledSsl\": true,\n      \"responseInfo\": {\n        \"Status\": \"200\",\n        \"Time Started - Ended\": \"11:46:00.7 AM - 11:46:00.7 AM\",\n        \"Load Time\": \"0.148 s\",\n        \"Headers\": \"Accept-Ranges: bytes\\nAccess-Control-Allow-Origin: *\\nCache-Control: public, max-age=0\\nContent-Type: image/gif\\nDate: Wed, 04 Nov 2020 11:46:00 GMT\\nETag: W/\\\"5f-1758ab29ed1\\\"\\nLast-Modified: Mon, 02 Nov 2020 20:42:43 GMT\\nX-Clacks-Overhead: GNU Terry Pratchet\\nContent-Length: 95\\nConnection: keep-alive\",\n        \"Cookies\": \"\",\n        \"File Type\": \"image/gif\",\n        \"Size\": \"95.0 B\",\n        \"Payload\": \"PNG\\r\\n\\u001a\\n\\u0000\\u0000\\u0000\\rIHDR\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0001\\u0001\\u0003\\u0000\\u0000\\u0000%ÛVÊ\\u0000\\u0000\\u0000\\u0003PLTEÿM\\u0000\\\\58\\u0000\\u0000\\u0000\\u0001tRNSÌÒ4Vý\\u0000\\u0000\\u0000\\nIDATxcb\\u0000\\u0000\\u0000\\u0006\\u0000\\u000367|¨\\u0000\\u0000\\u0000\\u0000IEND®B`\",\n        \"parsedHeaders\": {\n          \"accept-ranges\": \"bytes\",\n          \"access-control-allow-origin\": \"*\",\n          \"cache-control\": \"public, max-age=0\",\n          \"content-type\": \"image/gif\",\n          \"date\": \"Wed, 04 Nov 2020 11:46:00 GMT\",\n          \"etag\": \"W/\\\"5f-1758ab29ed1\\\"\",\n          \"last-modified\": \"Mon, 02 Nov 2020 20:42:43 GMT\",\n          \"x-clacks-overhead\": \"GNU Terry Pratchet\",\n          \"content-length\": \"95\",\n          \"connection\": \"keep-alive\"\n        }\n      },\n      \"journeyTagIds\": [],\n      \"stepId\": 51118,\n      \"requestInfo\": {\n        \"Protocol\": \"https\",\n        \"Method\": \"GET\",\n        \"Time Started - Ended\": \"11:46:00.6 AM - 11:46:00.7 AM\",\n        \"Headers\": \"Host: solutions.tealium.net\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\\nAccept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Dest: image\\nReferer: https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9\\nCookie: connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Cookies\": \"connect.sid: s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934\\nutag_main: v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\",\n        \"Size\": \"0.0 B\",\n        \"parsedHeaders\": {\n          \"host\": \"solutions.tealium.net\",\n          \"connection\": \"keep-alive\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36\",\n          \"accept\": \"image/avif,image/webp,image/apng,image/*,*/*;q=0.8\",\n          \"sec-fetch-site\": \"same-origin\",\n          \"sec-fetch-mode\": \"no-cors\",\n          \"sec-fetch-dest\": \"image\",\n          \"referer\": \"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview.html\",\n          \"accept-encoding\": \"gzip, deflate, br\",\n          \"accept-language\": \"en-US,en;q=0.9\",\n          \"cookie\": \"connect.sid=s%3Ap3MLhWPo39WI6ZViwI5-e9hL4SsG-X4G.RkkIIRIFNh4fNb6aBtTGgL%2BdP7dyQlXxjMj5KvYA934; utag_main=v_id:01759313c9f20036ab5707c0c49a03078004a07000718$_sn:1$_se:1$_ss:1$_st:1604492149044$ses_id:1604490349044%3Bexp-session$_pn:1%3Bexp-session\"\n        }\n      },\n      \"queryParameters\": {\n        \"tagUid\": \"6\",\n        \"_rnd\": \"0.9060692680518727\"\n      },\n      \"requestWithoutQueryString\": \"https://solutions.tealium.net/hosted/i.gif\",\n      \"stepName\": \"step3\"\n    }\n  ]\n}"}],"errorIndex":0,"end":"2020-11-04T11:46:12.920Z"}],"end":"2020-11-04T11:46:12.920Z","duration":9194},{"type":"suite","start":"2020-11-04T11:46:12.921Z","_duration":0,"uid":"suite-0-4","cid":"0-0","title":"VERIFY - check the network logs to make sure the correct tags fired for each step","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step","tests":[{"type":"test","start":"2020-11-04T11:46:12.921Z","_duration":48,"uid":"test-04-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - basic log validation","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - basic log validation","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:12.969Z"},{"type":"test","start":"2020-11-04T11:46:12.969Z","_duration":41,"uid":"test-04-1","cid":"0-0","title":"Step 1 should not fire any tags","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Step 1 should not fire any tags","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 1 should not fire any tags","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 1 should not fire any tags","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"The noview setting should be respected."}],"errorIndex":0,"end":"2020-11-04T11:46:13.010Z"},{"type":"test","start":"2020-11-04T11:46:13.010Z","_duration":51,"uid":"test-04-2","cid":"0-0","title":"Step 2 should not fire any tags","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Step 2 should not fire any tags","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 2 should not fire any tags","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 2 should not fire any tags","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:13.061Z"},{"type":"test","start":"2020-11-04T11:46:13.062Z","_duration":50,"uid":"test-04-3","cid":"0-0","title":"Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"The virtual view is scoped to tags 6 and 7, but only 7 has implicit consent."}],"errorIndex":0,"end":"2020-11-04T11:46:13.112Z"},{"type":"test","start":"2020-11-04T11:46:13.112Z","_duration":37,"uid":"test-04-4","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 8 was never specified in a virtual view, and there has been no general tracking event."}],"errorIndex":0,"end":"2020-11-04T11:46:13.149Z"},{"type":"test","start":"2020-11-04T11:46:13.150Z","_duration":47,"uid":"test-04-5","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 9 was never specified in a virtual view, and there has been no general tracking event."}],"errorIndex":0,"end":"2020-11-04T11:46:13.197Z"},{"type":"test","start":"2020-11-04T11:46:13.197Z","_duration":49,"uid":"test-04-6","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 10 was never specified in a virtual view, and there has been no general tracking event."}],"errorIndex":0,"end":"2020-11-04T11:46:13.246Z"},{"type":"test","start":"2020-11-04T11:46:13.246Z","_duration":44,"uid":"test-04-7","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 11 is misconfigured, as 'Another Tag', which isn't a configured Service in Usercentrics"}],"errorIndex":0,"end":"2020-11-04T11:46:13.290Z"},{"type":"test","start":"2020-11-04T11:46:13.290Z","_duration":49,"uid":"test-04-8","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:46:13.339Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:46:12.921Z","_duration":48,"uid":"test-04-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - basic log validation","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - basic log validation","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:12.969Z"},{"type":"test","start":"2020-11-04T11:46:12.969Z","_duration":41,"uid":"test-04-1","cid":"0-0","title":"Step 1 should not fire any tags","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Step 1 should not fire any tags","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 1 should not fire any tags","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 1 should not fire any tags","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"The noview setting should be respected."}],"errorIndex":0,"end":"2020-11-04T11:46:13.010Z"},{"type":"test","start":"2020-11-04T11:46:13.010Z","_duration":51,"uid":"test-04-2","cid":"0-0","title":"Step 2 should not fire any tags","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Step 2 should not fire any tags","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 2 should not fire any tags","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 2 should not fire any tags","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:46:13.061Z"},{"type":"test","start":"2020-11-04T11:46:13.062Z","_duration":50,"uid":"test-04-3","cid":"0-0","title":"Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Step 3 should ONLY have fired tags 6 and 7 based on EXPLICIT consent","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"The virtual view is scoped to tags 6 and 7, but only 7 has implicit consent."}],"errorIndex":0,"end":"2020-11-04T11:46:13.112Z"},{"type":"test","start":"2020-11-04T11:46:13.112Z","_duration":37,"uid":"test-04-4","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 8 was never specified in a virtual view, and there has been no general tracking event."}],"errorIndex":0,"end":"2020-11-04T11:46:13.149Z"},{"type":"test","start":"2020-11-04T11:46:13.150Z","_duration":47,"uid":"test-04-5","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 9 was never specified in a virtual view, and there has been no general tracking event."}],"errorIndex":0,"end":"2020-11-04T11:46:13.197Z"},{"type":"test","start":"2020-11-04T11:46:13.197Z","_duration":49,"uid":"test-04-6","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 10 was never specified in a virtual view, and there has been no general tracking event."}],"errorIndex":0,"end":"2020-11-04T11:46:13.246Z"},{"type":"test","start":"2020-11-04T11:46:13.246Z","_duration":44,"uid":"test-04-7","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 11 is misconfigured, as 'Another Tag', which isn't a configured Service in Usercentrics"}],"errorIndex":0,"end":"2020-11-04T11:46:13.290Z"},{"type":"test","start":"2020-11-04T11:46:13.290Z","_duration":49,"uid":"test-04-8","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure the correct tags fired for each step Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure the correct tags fired for each step - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"c093a097a537478f889f2b69553b50e3","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:46:13.339Z"}],"end":"2020-11-04T11:46:13.339Z","duration":418}],"title":"Test Report Title","options":{"stdout":true,"outputDir":"./reports/html-reports/","filename":"report.html","templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"reportTitle":"Test Report Title","options":{"logLevel":"warn","outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}},"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}},"showInBrowser":false,"useOnAfterCommandForScreenshot":false,"LOG":{"category":"default","context":{}},"logLevel":"warn","debug":true,"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}}}