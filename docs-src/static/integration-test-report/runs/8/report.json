{"info":{"type":"runner","start":"2020-11-04T11:43:22.639Z","_duration":39455,"cid":"0-0","capabilities":{"goog:chromeOptions":{"debuggerAddress":"localhost:49196"},"browserVersion":"86.0.4240.75","timeouts":{"pageLoad":300000,"implicit":0,"script":30000},"strictFileInteractability":false,"acceptInsecureCerts":true,"webauthn:virtualAuthenticators":true,"networkConnectionEnabled":false,"chrome":{"chromedriverVersion":"86.0.4240.22 (398b0743353ff36fb1b82468f63a3a93b4e2e89e-refs/branch-heads/4240@{#378})","userDataDir":"/var/folders/qv/8dr6ylkn3c98dm4r414wh_0h0000kr/T/.com.google.Chrome.52g9Dk"},"browserName":"chrome","setWindowRect":true,"proxy":{"httpProxy":"13.57.103.60:64691","sslProxy":"13.57.103.60:64691","proxyType":"manual"},"pageLoadStrategy":"normal","platformName":"mac os x","unhandledPromptBehavior":"dismiss and notify","sessionId":"4b34837a8a5a4e20b22f1eb6f514029c"},"sanitizedCapabilities":"chrome.86_0_4240_75.macosx","config":{"protocol":"https","hostname":"ondemand.eu-central-1.saucelabs.com","port":443,"path":"/wd/hub","specs":["tests/specs/examples/usercentrics-v2/standard_no-usercentrics.js"],"suites":{},"exclude":[],"logLevel":"warn","logLevels":{},"excludeDriverLogs":[],"bail":0,"waitforInterval":500,"waitforTimeout":20000,"framework":"mocha","reporters":["spec",[null,{"outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}}}]],"services":[["sauce"]],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"connectionRetryTimeout":40000,"connectionRetryCount":2,"execArgv":[],"runnerEnv":{},"runner":"local","mochaOpts":{"timeout":67000,"ui":"bdd","color":true,"retries":0,"specFileRetries":0},"jasmineNodeOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"before":[null,null],"beforeSession":[null,null],"beforeSuite":[null,null],"beforeHook":[],"beforeTest":[null,null],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[null],"afterSession":[],"after":[null],"onComplete":[null],"onReload":[null],"beforeFeature":[null],"beforeScenario":[null],"beforeStep":[],"afterStep":[],"afterScenario":[null],"afterFeature":[],"specFileRetries":0,"baseUrl":"","user":"caleb.jaquith","key":"6fab5239-14b0-49cf-8488-21839bd22c08","coloredLogs":true,"screenshotPath":"./errorShots/","host":"https://ondemand.eu-central-1.saucelabs.com","region":"eu","capabilities":[{"browserName":"chrome","browserVersion":"latest","platformName":"macOS 10.15","teal:enableProxy":true,"teal:enableTrace":false,"teal:runCrossBrowser":true,"teal:runRemotely":true,"teal:showDurations":true,"teal:enableSauceConnect":false,"teal:hasReporterContext":true,"teal:hasRunnerContext":true,"teal:reporterContext":"<p>This report has been generated by Tealium's automated testing platform.</p>\n<p>These tests will have been created specifically for your project by a Tealium Implementation Engineer to verify a configuration or use case.</p>\n<p>The intent is to document the tests run on the completed configuration (acceptance tests). It can also serve as a limited regression test as work continues, to ensure that future projects don't break previous ones.\nFor more information, see the <a href=\"https://jaquith.github.io/webdriverio-standalone/\">developer documentation</a>.</p>","teal:summaryContext":"<p>A suite of tests, intended to ensure the integration between Tealium iQ Tag Management and the Usercentrics Browser SDK (CMP v2) works as expected in multiple potential configuration cases.</p>\n<p>Includes some common error and misconfiguration cases.</p>\n<p>Does not include any TCF support, that setting is not checked.</p>","teal:capabilityNumber":1,"sauce:options":{},"teal:specPath":"tests/specs/examples/usercentrics-v2/standard_no-usercentrics.js","teal:testContext":"<p>A Tealium iQ setup where the Usercentrics CMP has not been added to the page (misconfiguration case, no way for the user to indicate a decision at all).</p>\n<p>No tags should fire.</p>","teal:testTitle":"Standard TiQ Setup, Usercentrics Missing from Page","teal:helpers":["helpers/specific/usercentrics-v2-general-integration-test-helper.js"],"proxy":{"proxyType":"manual","sslProxy":"13.57.103.60:64691","httpProxy":"13.57.103.60:64691"},"acceptInsecureCerts":true,"teal:opJourneyId":3962,"teal:opRunId":23268,"teal:opInitialActionId":51107}],"sauceConnect":false,"ignoredWorkerServices":[],"specFileRetryAttempts":0},"specs":["/Users/calebjaquith/.git/webdriverio-standalone/tests/specs/examples/usercentrics-v2/standard_no-usercentrics.js"],"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","isMultiremote":false,"retry":0,"failures":0,"retries":0,"end":"2020-11-04T11:44:02.094Z"},"metrics":{"passed":21,"skipped":0,"failed":0,"start":"2020-11-04T11:43:22.639Z","end":"2020-11-04T11:44:02.094Z","duration":39455},"suites":[{"type":"suite","start":"2020-11-04T11:43:22.644Z","_duration":0,"uid":"suite-0-0","cid":"0-0","title":"STEP 1 - initial visit to test page","fullTitle":"STEP 1 - initial visit to test page","tests":[{"type":"test","start":"2020-11-04T11:43:22.645Z","_duration":8266,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html"},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":"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REREREREVAmwAYCIiIiIiIioEmADABEREREREVElwAYAIiIiIiIiokqADQBERERERERElQAbAIiIiIiIiIgqATYAEBEREREREVUCbAAgIiIiIiIiqgTYAEBERERERERUCbABgIiIiIiIiKgSYAMAERERERERUSXABgAiIiIiIiKiSoANAERERERERESVABsAiIiIiIiIiCoBNgAQERERERERVQJsACAiIiIiIiKqBNgAQERERERERFQJsAGAiIiIiIiIqBJgAwARERERERFRJcAGACIiIiIiIqJKgA0ARERERERERJUAGwCIiIiIiIiIKgE2ABARERERERFVApW+AUAIgStXriAjI+NlF4WIiIiIiIiozBTZAPDVV1+hdu3aMDExQatWrdCzZ0/07NkTnTp1gomJCbp3714e5SxU165dpfL961//gomJCWrXro1//etfUtk3bNigOG1ISAg6d+6M7du3l3OplUVGRuLDDz+EiYkJTExM0LFjR7Rp0wZt2rSBl5cXLl68+LKLSERERERERH9DRTYALFiwABMmTAAArF+/HmfPnsXZs2dx5coV3LlzBzk5OWVeSABISkrCrl27FNOys7Nx5coVREVFwd/fHwDQq1cvBAUF4fnz55g7dy7S09MVp23Xrh1+//13jBgxoszKbgwbGxv89NNPsLa2BgD4+/sjLCwMAQEBCAkJgbOzM65du2bw/IQQWL9+vWzczp07oVarS7XcREREREREVLEZ9ApAgwYNAAAmJiay8S1atMDmzZtLv1QFpKen4/3338eNGzcU08eNGwcnJyfFtCpVqmDatGlo1aoVgBcVYu2/ZmZmGDx4MOrVq6czbX5+fqHlKipdn4JlUNK0aVMAgKmpKQCgbt268PLyAgCcO3fO4GV9+eWX2LJli/T56NGjGDt2bKk33Aghir09iIiIiIiIqOyVKAaAm5sb2rdvj9zcXAwePBi1a9eGs7MzHjx4AADw8vJCw4YNpbvyJ0+exNtvv43atWvjnXfeQWRkJADgyJEjGDp0KMaOHYvVq1ejWbNmaNWqFYKCggAA48ePx6lTp+Dt7Y2uXbsiLi5OVo7JkycXWs6GDRvC3t4ec+bMwRtvvIE9e/agTp06mD9/Pg4cOIDBgwdjxYoVUv7ExES4u7ujW7duaNOmDdzd3bFs2TKcPn3aoPSoqCgMHjxYWu7J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Bi336dOnOHDgAPLz84vMu3v3bjx8+NCg+VY00dHROHbsmGJabGws3+EnIiIiIiKiQpVaA8ClS5cQFxeHefPmYdu2bcjIyNDJk5WVhYiICMW79UIIREREID093aDlxcbG4unTp4pparUat2/f1juvxMREREVFyRoNsrKydPInJyfLypqdnY3w8HBkZ2cjIyNDcR0LlvH58+c64/Py8hAeHq63fAkJCXjw4AEK66AhMzMTycnJAICdO3fC1dVVSsvPz8e9e/eKnAcRERERERFVHqXWAPDzzz/D2dkZH374IdRqNQ4fPixL37lzJxo1aoROnTrBzs4OUVFRUlpgYCDatGmDTp06oWnTpjhy5Ije5SQlJaF3795o3749WrdujYULF0ppQggsWLAAzZs3x1tvvYWmTZti48aNsuk3bNiAVq1a4c0330THjh0RFhYGANi+fbust4OMjAy0aNFCerR+x44daNiwITp37gwbGxv06tULixYtUizj3bt34eTkhPbt26Nly5Zwd3dHRkYGcnNzsXTpUrRr1w6dO3dG06ZNsWbNGmm6a9euwd3dHW3atIGDgwNcXFwUX6e4e/cuHBwcMGXKFOTk5OD111/HwYMHAbx4JaJz587o0KEDHBwc0LNnT8TExOjdnkRERERERFQ5lEoDQHJyMvbs2YMPPvgA9evXx3vvvYetW7dK6aGhoZg+fTq+/vpr3Lt3D15eXnjy5AmAF3fePTw84OzsjIiICPj4+CA0NFTvsmbMmIH09HQEBATg4sWLsrvo+/fvx9q1a/HTTz8hLi4Oa9aswRdffIHLly9LeR4/fowzZ87gr7/+Qr169fDJJ59IafriCAQHB+PTTz/FggULcP/+fcybNw937txRzCuEgLu7O1577TUEBQUhJCQEN27cwJYtW7Bjxw6sWrUKq1atQkxMDJYtW4aFCxfi1KlTSE9Px8iRI2FqaoqgoCD4+/vDzMwMEyZMkN3Fv3//Ptzc3ODs7Izt27ejatWq0nJzcnIwZswYtGzZEiEhIbh8+TJq1KghW0ciIiIiIiKqnEqlAUBz97lbt25ITk7GgAEDcPXqVYSEhACAdBf9o48+Qp06deDl5SVNGxERgSdPnmDixImoX78++vbtK7sTr00IgdOnT0t3ye3s7ODh4SGlHzlyBC1atEC9evXw119/oXXr1lCpVDhx4oSUx93d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zz33HO7u7uh0Os6cOcOoUaNMxmb8+PGkpKSwbds2bt68yerVq/n++++VJ8J2dna0atWK77//nrCwsCaNmqitd+/eaDQaIiIiGDp0KGq1GhcXF6KiokyuSVA3xvfDXF0MK/CrVCqsra25fPkyq1atAmquVWO++OILbt++zaeffopOpzNat8BcfPz8/Ni9ezexsbFkZ2ezZMkSiouLlae7VlZWeHh4MGPGDIKCgpTh7Oa4urqi0WhYs2YNSUlJnDhxgo0bN+Lh4aGMimiMIa6GvMzFwzD15K233iI+Pp7g4GAljZYtW7JkyRI++OAD7ty5Q/fu3WndurXyOs66DK87dHFxabBshg67Tp06UV5ezt/+9jdycnIanOZjMHbsWE6dOsWuXbvIzMxs0uKOD8LS0pKpU6eyfft2jh49Snp6uvJWgdqjApqa1ssvv8yHH36Is7Mz/fv3f0ilFkIIIYQQ4tF4pB0AhoaZoUEBNU/qR40ahZ+fH1qtlp9++olNmzaZfH3ZyJEjGTduHC+99BIuLi6oVCpUKpXSWTB58mRWrFhBaGgoQUFBlJSUoNFocHJyomvXrmg0GhITEwH4/PPP6dixI76+vuzZs4dhw4YpDcBffvmFRYsWKR0AgLLon+FpbN16aDQaduzYQVRUFK6urkycOJEJEyYQFBQEgKOjI/369cPFxYXOnTvToUMHBgwYgLOzszJEua6JEyfy7rvvMn/+fJ588kkSEhL44osv6N+/P7NnzyYgIAC1Ws17773HvHnzSElJMZqX3RST/l979x5tVVnof/grgsDmIpaIheRyR4oH0IJETVAT7wdNrdBMO0GReWNUoyztZGoX1I5omaV5ytPRvIGB5kiC7AIUeQmERKFMFEERJGFzR8DfH4y9fmzZF1TSPO/zjLGHsNfaa8757rkYzs+a850f+lCSVM+4qJ+LoP6/W27jK8e4sUjT2M80ty0dO3bMlVdemTFjxqRbt24ZPHhwdaK1pi7JqFepVHLHHXektrY2l19+ea677rr06dMnvXv3bnZ8vvrVr+aQQw7JSSedlL59+6Zz58658MILt3r9iy++OO3atctXvvKVrR6r35d32GGHtGvXLrfccksWL16cgQMH5thjj02PHj1y8803N7v+W6of16uuuqrZ8aipqck999xTndzu+eefT6VSSdu2bdO6deuMHj06M2fOzN57753+/funV69eOeeccxpdZv1dCvbee+9m1+0jH/lIBg8enH79+qV79+75wx/+kCFDhmT69OnV5zS1L5xyyim56KKL8sUvfjH7779/NcI0to+8Gk0tL9l8Bsf73ve+fPjDH07//v0zZ86c3Hvvvdlll12a/bnGNPa+BwCAt6odXm7hQusvf/nLjR4cbW9r1qzJ6tWrG1xL3JRly5aldevWjZ6ivnz58nTo0KF6yvXixYvTpUuX7LTTTtXnrF69OjfccEPOOOOM6rX3I0aMSF1dXXXSr9dj0aJF2XXXXbf5tO+WvPTSS1m2bNlW8wSsXbs2K1eubPJe7/8srxzjV6Opbdm0aVOef/75dOvW7VUfHDY13i2Nz6pVq7Jhw4bqPALbw9KlS9O+ffvXdK/4Lce1qfGYM2dOpk6dmuHDh6dVq1ZZv359+vXrl7PPPjvnnntu9XnPPfdcOnfuvM1nIGyL5t53LXnppZdSV1e3Te/v7WXVqlVZt27dNt05oCkPP/xwjjrqqMydOze77bZbi88fNWpUrrjiite8PAAA+GfabpMAvl7t27dP+/btt+m5TZ3SnGSrg7nG/qe9pqYmU6ZMye9+97sMHTo0c+bMydixY3Prrbe+upVuwu67775dXqdemzZtGp0ksF27dmnXrt12Xda2eD0HzE1tS6tWraqTQ75aTY13S+OzPQ+O672eA9wtx7Wp8dhjjz1y2WWX5dFHH82AAQNy3333pa6ubqtLNl7rWDanufddS9q0afOGHvwnm3+/r/V3vHLlynzve9/LuHHjcuaZZ27TwT8AAPyre9PnAHizXH311Tn88MMzbty4rFy5MmPGjMlxxx33Zq8WNKtjx46566670qVLl4wdOzbvfve7M3HixFQqlTd71f5Padu2baZPn55DDz003/rWt97s1QEAgO2ixUsArr/++ur93QFo2u23357Pfvazb/ZqAABAo1o8A6BDhw7V24wB0Lj777//n3JZCQAAbC8tngGQpHoLtfpZwwH4/2pra1NTU+NuAQAA/Ev7l5kEEOBfmYN8AADe6lo8A+Dmm29OTU1NBg8e/EatE8C/pPvvvz+rV68WAQAAeEtqcQ6AVatWOfgHSDJ48OCsWrXqzV4NAAB4TVoMAPPmzXsj1gPgLcG/iQAAvFW1GAAAAACAt77tEgDOOuusDBs2bKuvm2++OUkycuTITJs2bXssqlnPPfdcnnnmmX/6cuo988wzGTZsWJYuXfqGLXNbTJo0KV/96le3+vNr8cpt3HKMJ02alAsuuOD1r3AzmtqW3/zmN/nyl7+83Zf3avbVn/3sZznuuONyyimnvO7lvtH7bpKsXr063/3udzN8+PD84Ac/yMKFC//py1y/fn2GDRuWxx57bKvH7rjjjlx66aVbfY0fP367rsPrfU8AAMBb1XYJAHfeeWf+8Y9/ZI899mjw1aVLlyTJggUL3pDrZg888MA8+uij//Tl1Nu4cWPmz5+fDRs2vGHL3BZPPPFEJk6cuNWfX4tXbuOWYzx//vxMmjTp9a9wM5ralieffPJ1bVdTxo8fv00HwsuWLct5552XPffcM8OGDXvdy30z9t0TTjght9xyS/r27Zu77rorQ4YM+afvyxs3bsz48ePzj3/8Y6vHlixZkieeeKL69cADD+Saa67J448/vl3X4fW+JwAA4K1qu90G8OSTT84nP/nJRh/7n//5n9TU1GTjxo1ZuXJlOnTokKeffjq1tbXZYYcdkiSLFy/O8uXLs9dee6V168ZXa926ddm4cWNqamqq31u+fHk6dOiQtWvXZsWKFVm5cmVeeumltGnTpvr4ggUL0rlz5/To0aPB67388st58skn07Vr17Rv3z7r1q1Lx44dGzxn9erVSdJgmWvXrs2mTZvSo0eP/PznP8/OO+9cfWz9+vWZN29edt1117z97W9PsnkixVatWqV9+/ZJkjVr1mTTpk3p0KFD9Wc2bNjQYBlbWrt2bZ555pn07NmzOl5JsmHDhmpc2WuvvZr8+aZec8OGDdXtfemll7J69erqtmzcuDGrVq1qsI0rV65sMMb1Nm3alKeeeiqdOnVK165dW1xuY9uSJIsWLcoLL7yQ7t27Z5dddtmm7diwYUOefPLJdOvWrcHvof6x5sZn2bJlWbFixVb7xZaWL1+etm3bpl27dtXvbdy4MU8//XSSZMSIEenTp0/1scWLF2fdunXZY489qttX//vduHFjli9fnj322KPBMl45rvX7bnPjsX79+jz11FOpVCrZuHFjklT3r5UrV2b+/PnZbbfdsuuuuza6Xb/61a8yffr0zJgxI5VKJcOHD8+xxx6bhx56KAcffHCjP7NmzZrMnz8/rVq1avA+raurS8eOHbNmzZo888wzqVQqDcarfqyXL1/e7P5x3nnn5bzzzqv+/Zxzzslzzz2X888/v8mfSTZfk9+5c+fq+y3Z/L5t06ZNdthhh/z973/P7rvvvtX+8fLLL6euri4dOnRo8G9OXV1dampqmvx3CAAA3qrekDkA+vTpk7vvvjuzZ89OpVLJhz/84bz//e/PZZddlhdffDGnnnpq9tlnnwwYMCC1tbWZPHlyo6/zk5/8pMEdCdasWZNKpZJp06bl2GOPTZJ85jOfyfe///3U1dVl6NChqVQqGThwYPbbb798/OMfrx4sPfzww9lnn33y/ve/P3vuuWdOPPHEHHXUUVst88Ybb8x73/veBp+MDhs2LJ///Oczd+7cVCqVLFiwIMnmT4979uyZgw46KD179sxZZ52VNWvW5Etf+lKDOHLaaaflwAMPrP79P//zPzNixIhGt/nb3/523vGOd2TAgAHZZ599cvfddydJ7r777tTW1uZ973tfBg4cmF69ejU5bo35+c9/nh49elQP5K+99tpUKpXqge29996bPn365LHHHqtu4yvHOEmWLl2aI444Iv3798/ee++dc845pzrG27otjz32WA444IDsu+++GTRoUGpra/O9732vxW1YunRpDj744Bx44IGpVCr5xje+UX2sufFZvXp1Tj311Oy1117Zb7/9MnDgwMydO3er1//GN76RSqWSP//5zw2+P3fu3Bx++OFJkiOPPDLXX399Hn744QwdOjT77LNP9ttvvwwaNChPPvlkkuSnP/1pDjvssPTv3z99+/bNr371qwav98pxbWk8brrppnTr1i0HHnhgevbsmSOOOKK67WPHjk2PHj1yyCGH5D3veU+GDh1ajVhbuv/++3P00Udnl112yeTJk7NgwYJMmzatyYP/Sy+9NO985ztz0EEHZcCAATn44IPz7LPPJtn8/v7Upz6VPfbYIwcffHD23nvvPPDAA0k2x6Hzzz8/e+21V9773vfmpJNOauK32dCECRNy22235cYbb9wqytW78847M3DgwPTr1y89e/bM8OHDs3LlyiTJueeem4997GOpra3NQQcdlEqlkv/+7/9u8PMbNmxI3759c+2111a/9+STT2bPPfds9BIFAAB4q9tuAeCOO+7IBRdcUP267LLLGjz+8ssvV//8tre9LRMmTMiwYcPyzW9+MzNmzMjvf//7PPHEE/noRz+aM844I8uXL290OU2dojx16tQkya233prPf/7zuf322zNp0qQ8+OCDWbJkSa677rr88pe/zCOPPJI1a9bk9NNPz2GHHZa//vWvGT9+fGbPnt3o637kIx/JkiVLqq+/ePHiTJgwIaeeemqDbZs3b16GDRuWT3/605k/f37Gjx+f++67L9dff32OPfbYTJw4MWvWrMmqVasyefLkLFy4MPPmzcvLL7+c8ePH59///d+3Wvb48ePzne98Jz/+8Y/z3HPPZcSIETn//POzePHinH/++TnzzDOzaNGiPP7446mtrc11113XzG+ooSOOOCJJqge39afy11//PnHixJxwwgnZcccdq9v4yjFOkhUrVuTkk0/OwoUL81//9V+57bbb8re//W2bt2X58uX51re+lc6dO2fevHl55plnMnz48Hz961/Ppk2bmt2GFStWZMiQIXnqqacyevTojB49OpMnT87atWubHZ+LL744s2fPzsSJE/PMM8+ke/fu+drXvtbgtS+//PKMHj069913Xw455JAGj/3bv/1bHnzwwSTJjBkzMmLEiJx++unZcccdM3PmzEydOjWtW7fOiBEjqvv9E088kbPPPjv33HNPBg0a1OD1XjmuzY3HrFmz8oUvfCGXXnppnn766Xzta1/LnDlzqq910UUX5YILLsgLL7yQqVOnZtKkSZkyZcpWY7dgwYIsXLgwffv2zYc+9KEMHDgwI0aMaHTMZ82alWuuuSY33XRT9XWfeOKJ/PznP68+59FHH82UKVMyb9681NbW5pprrkmyOX7ccsstGTduXObOnbvV2Q+N2bRpUy688MKcccYZef/739/oc2bOnJmzzjorxxxzTJ566qmMGTMmv/71r3PVVVdVn3P//ffnxhtvzMKFCzNixIh86UtfahCn2rRpk+HDh+fWW2+tfu+uu+5Kr169st9++7W4ngAA8Faz3QLA+vXrU1dXV/1at25dk88999xzc+CBB+Zd73pXxowZk4EDB2bFihWZM2dOBg0alBUrVuShhx56Xetz6qmnZtasWenatWsefvjhvPjii0k2HzQ+/vjjWbJkSc4555x07do1hx12WI455phGX6d79+456qijMmbMmCTJPffck65du+bQQw9t8Lzf/OY3STZfyz1r1qy0bt06AwYMyL333pvDDjssyeazDh544IF07949PXv2zLRp0/LYY49lyZIljZ598Pvf/z69e/fOKaecknbt2mXkyJEZN25cOnbsmClTpuSCCy7IggUL8tBDD6Wmpqa6jdti9913zwEHHJDJkydn+fLl+dOf/pTBgwdn8uTJ2bBhQ37xi1/k+OOP36bXOu+881JTU5PTTjstSRqdzK6pbWnbtm1Gjx6d22+/PatXr86DDz5YPUhbu3Zti8v+3Oc+l5133jn/8R//kU6dOuU3v/lNdtppp2bHZ8KECTnppJNywAEHpGPHjvne976Xr3/969XXvOKKK3LFFVfktttuy0EHHdTiOjzyyCNZsmRJzj333LzrXe9K7969M2LEiEyfPj3PPfdc9XkjR47MoEGDWrxUo7nxmDJlSjp16pSzzz47nTt3zqc+9akGp9VXKpXceeed+dGPfpTWrVtn6dKlje7bL7zwQmbPnp1rr702S5YsyY033pixY8fmnnvu2eq5++yzTx588MEcffTRefzxx/OXv/wlXbt2TV1dXfU59ZdCdOnSJcccc0wWL16cZPP74oMf/GAOP/zw7Lbbbjn77LNbHM8//vGPeeqpp5qdW6E+WH3hC1/IzjvvnCOPPDLHH398gwkDjz/++BxzzDGpqamp7suvnIvkox/9aJ544onMmDEjmzZtyk9/+tN84hOfaHEdAQDgrWi7XeR65plnNjkHwCu94x3vSLL5WtsVK1Zk6tSpDSb66tWrV6OnLb9Sc58Q/+Mf/8inP/3pTJ8+PV27dq1+irtp06bqQVnPnj2rz+/Tp0+Tk7B9/OMfzyc/+clceeWVueWWWzJs2LCtrg+uvwzgkksuafD9XXbZJTvvvHOOOuqo/Pa3v83GjRtzzDHHZMcdd8zkyZOzePHiHHzwwY1eGz137tz069ev+ve2bdumf//+SZJx48bl0ksvTZLsv//+WbduXTp16tTkeDRmyJAhufvuu7P//vunUqnkzDPPzJe+9KX8+c9/zooVK3LYYYdl/vz5zb5GpVKpniVQP6dBY2dpNLctU6ZMyec///ksXLgwlUql+inxlmeNNKZnz57V67pbtWqVAQMGZNGiRWnVqlWT47N+/fosXLiwwSe83bp1S7du3ap/f/7559O1a9fccccd1dPzm7NkyZIkSd++favfq/9z/WR3W45TS2bNmtXkeDz77LOpra2tzhPQqlWrBtty00035bLLLsuoUaNy0UUXpVevXvnf//3fvOc972mwjN133z29evXKhz70oSTJhz/84VxyySWZMWPGVqfpb9y4MVdeeWXGjh2bJDn00EOzdu3aBr+fLa+/b9++fTVazJs3Lx/84Ae3Gpfm3HzzzenXr1+D/eWVFi9enN69e1f3uSTp379/7rjjjgbbuOU6JVvvU717987++++fu+66K+vWrcvChQu3y10dAADgX9EbMgfAVgtttXmxnTt3TqdOnXL66adn2rRpmTZtWn7729/m61//eqPXIrdu3Tpr1qyp/n3RokVNLuPiiy/OunXr8sgjj+Svf/1r9cB806ZN1U91t7y2+49//GOTr3XMMcekU6dOue666zJz5swMHTp0q+d07949yeZr5+u35YYbbqh+snzcccdl4sSJmThxYgYNGpTDDjssv/zlL/OLX/wiJ554YqPL7d69e4MzIZYvX57Pfe5zuffee3PppZfm6quvzrPPPpvf/e53OeCAA5q89r4pRx11VKZPn56xY8fmqKOOygc+8IEsWbIk11xzTY4//vgmr71+LZralscffzyf+tSncsQRR2TevHmZMWNGzjzzzCTNB55k82n19bFhw4YNefDBB7Pnnntm1qxZTY7PTjvtlE6dOmXmzJnV15kxY0YuuOCC6lkr3/72t/OTn/wk48eP36Zb0L3zne+svk69hx9+OEmy1157Jck2Tyi3YcOGZsdj0KBBmTlzZlasWJFk85k3999/f5LNk2Q++uij+eY3v5m///3vGTduXJYuXZof/OAHWy2nUqk0+PvGjRtTV1fX6KSBP/vZzzJ27NhMnDgxL7zwQu6+++507tx5m/a3fffdtzofQJIWZ/TfuHFj7rzzznz84x9v9nndu3fP7NmzG5yFMG3atG06Y+OVPvGJT+TOO+/M+PHjc+yxxzaIQQAA8H/JmxIAtvTRj340P/nJT/KrX/0qL774Yi655JJ85jOf2WqG+GTzmQMLFy7MhAkT8uyzz2bUqFENHu/UqVNmzZqVF154Ia1bt05NTU26dOmSpUuXVgPA+vXr8/a3vz2HHnpovvGNb2TSpEm59tprG9wW7O9//3uuvfba6kFWu3btcsYZZ2TUqFE56KCD8u53v3urdTvyyCOTbJ4sbcGCBXnkkUcyZMiQ6sRzRx55ZGbPnp05cxX7IzoAABDkSURBVObkAx/4QA4++OCsWLEi06dPz9FHH93o2AwZMiRz5szJz372s7zwwgsZPXp0fv3rX1c/Ee7SpUvatGmTX//617n55pu36ayJLe27776pVCoZO3ZsDj300HTt2jW9e/fOhAkTGp2T4JVj/Go0tS31M/B36tQpNTU1+dvf/pbvfOc7STb/rlrywx/+MC+++GKuuuqqrFixosG8BU2Nz2mnnZYxY8bk97//fRYsWJBLLrkkK1euTNu2bZNs/n0PHDgww4cPz8iRI6unszelb9++qVQqufrqqzN79uw88MADufHGGzNw4MAGn1A3p35c65fV1HjUX3ryxS9+MVOnTs0FF1xQfY0dd9wxl1xySb72ta9l2bJlede73pWddtqpejvOLZ1xxhmZM2dOfvjDH2bZsmXV/X3LT+vr1Qe7XXfdNevWrct3v/vdLFy4sNnLfOodd9xxeeihh3LnnXdm/vz5LU7uWH8Lxt69ezf7vPozM771rW9l4cKFGT9+fMaNG9dgktBtdfLJJ2fJkiW54YYbWgwPAADwVvaGBoD6A7P6A4pk8yf1Rx99dE477bTU1tbmT3/6U3784x83+klk/XW+H/vYx9K7d+906tQpnTp1qsaCk046KZdffnlGjRqVkSNHZvXq1alUKunZs2fe+c53plKpZNasWUmS73//+3n729+eoUOH5q677soHP/jB6gHgX/7yl1x88cXVAJCkOulf/aexr9yOSqWS2267LRMmTEjfvn1z4okn5oQTTsjIkSOTJD169Mj++++f3r17Z7fddsvb3va29OvXL7169UptbW2j43XiiSfmK1/5Ss4777y85z3vybRp0/LDH/4w733ve3PWWWdl2LBh6dq1ay688MKce+65mTNnToNPRLdF/Sng9Wdc1M9FUP/fLbfxlWPcWKRp7Gea25aOHTvmyiuvzJgxY9KtW7cMHjw4p59+epI0eUlGvUqlkjvuuCO1tbW5/PLLc91116VPnz7p3bt3s+Pz1a9+NYccckhOOumk9O3bN507d86FF1641etffPHFadeuXb7yla9s9Vj9vrzDDjukXbt2ueWWW7J48eIMHDgwxx57bHr06JGbb7652fXfUv24XnXVVc2OR01NTe65557MnTs3J5xwQp5//vlUKpW0bds2rVu3zujRozNz5szsvffe6d+/f3r16pVzzjlnq+Xtu++++dGPfpRRo0Zlr732ytVXX50bbrihwS0N633kIx/J4MGD069fv3Tv3j1/+MMfMmTIkEyfPr36nKb2hVNOOSUXXXRRvvjFL2b//fevRpjG9pEk1Tsn7L333s2O1z777JObbropt912W/r06ZORI0fmnHPOyRe+8IVm16cxu+yyS04++eR06tSpGvIAAOD/oh1ebuFC6y9/+cuNHhxtb2vWrMnq1asbXEvclGXLlqV169aNnqK+fPnyBvf1Xrx4cbp06ZKddtqp+pzVq1fnhhtuyBlnnFG99n7EiBGpq6trcA3xa7Vo0aLsuuuu2+0+4i+99FKWLVu21TwBa9euzcqVK5u81/s/yyvH+NVoals2bdqU559/Pt26dWvy4LApTY13S+OzatWqbNiwYav7w78eS5cuTfv27Vuc6K8xW45rU+MxZ86cTJ06NcOHD0+rVq2yfv369OvXL2effXbOPffc6vOee+65dO7cucUzEDZt2pRFixZl9913b3Hcm3vfteSll15KXV3dNr2/X42XX345ixYtSteuXV/X+63+Fo5b3kqyKaNGjcoVV1zxmpcFAABvlu02CeDr1b59++pEXS1p7JTmeq88mNttt922ek5NTU2mTJmS3/3udxk6dGjmzJmTsWPHNrgd2Oux5eRj20ObNm0anSSwXbt2adeu3XZd1rZ4PQfMTW1Lq1atqpNDvlpNjXdL47Otp+e/Gq/nAHfLcW1qPPbYY49cdtllefTRRzNgwIDcd999qaur2+qSjW0dy1atWlXnMGhJc++7lrRp02a7H/wnmz/pf637TbL5jhCTJk3KpEmTcvnll2/HNQMAgH89b/ocAG+Wq6++OocffnjGjRuXlStXZsyYMTnuuOPe7NWCZnXs2DF33XVXunTpkrFjx+bd7353Jk6cuNWkfmybVatW5emnn86tt97a5KU4AADwf0WLlwBcf/311fu7A5Tu9ttvz2c/+9k3ezUAAOBVa/EMgA4dOlRvMwZQsvvvv/+fcukIAAC8EVo8AyBJ9RZq9TN0A5SmtrY2NTU1De4EAgAAbyXbFAAAAACAt7ZiJwEEAACAkggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACiAAAAAAQAEEAAAAACiAAAAAAAAFEAAAAACgAAIAAAAAFEAAAAAAgAIIAAAAAFAAAQAAAAAKIAAAAABAAQQAAAAAKIAAAAAAAAUQAAAAAKAAAgAAAAAUQAAAAACAAggAAAAAUAABAAAAAAogAAAAAEABBAAAAAAogAAAAAAABRAAAAAAoAACAAAAABRAAAAAAIACCAAAAABQAAEAAAAACvD/AE8EoS5ajEGfAAAAAElFTkSuQmCC"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124330.438.png"}],"errorIndex":0,"end":"2020-11-04T11:43:30.911Z"},{"type":"test","start":"2020-11-04T11:43:30.918Z","_duration":107,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:31.025Z"},{"type":"test","start":"2020-11-04T11:43:31.025Z","_duration":3225,"uid":"test-00-2","cid":"0-0","title":"should NOT have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should NOT have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3ApaJB-pG1xS2OK-1hYKsWFf7Z2l8Pq6ON.imkwLLqjnDvBlyae1eQuQBYqCb80GZy9dqG2iumKAc8","path":"/","httpOnly":true,"secure":false}]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"getCookieByName","sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ isn't even allowed to load"}],"errorIndex":0,"end":"2020-11-04T11:43:34.251Z"},{"type":"test","start":"2020-11-04T11:43:34.251Z","_duration":184,"uid":"test-00-3","cid":"0-0","title":"should NOT have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should NOT have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a visible Usercentrics banner","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#usercentrics-root\"}\n  (Session info: chrome=86.0.4240.75)","stacktrace":"0   chromedriver                        0x000000010f8f7c29 chromedriver + 2464809\n1   chromedriver                        0x000000010ff326f3 chromedriver + 8996595\n2   chromedriver                        0x000000010f73cd56 chromedriver + 650582\n3   chromedriver                        0x000000010f6c3908 chromedriver + 153864\n4   chromedriver                        0x000000010f6ed654 chromedriver + 325204\n5   chromedriver                        0x000000010f6df62d chromedriver + 267821\n6   chromedriver                        0x000000010f6eb8b1 chromedriver + 317617\n7   chromedriver                        0x000000010f6df8f3 chromedriver + 268531\n8   chromedriver                        0x000000010f6b9230 chromedriver + 111152\n9   chromedriver                        0x000000010f6ba1a7 chromedriver + 115111\n10  chromedriver                        0x000000010f8ca830 chromedriver + 2279472\n11  chromedriver                        0x000000010f8d583a chromedriver + 2324538\n12  chromedriver                        0x000000010f8d54a7 chromedriver + 2323623\n13  chromedriver                        0x000000010f8b1945 chromedriver + 2177349\n14  chromedriver                        0x000000010f8d5d41 chromedriver + 2325825\n15  chromedriver                        0x000000010f8bfbda chromedriver + 2235354\n16  chromedriver                        0x000000010f8eac4a chromedriver + 2411594\n17  chromedriver                        0x000000010f8fc987 chromedriver + 2484615\n18  libsystem_pthread.dylib             0x00007fff6c94c109 _pthread_start + 148\n19  libsystem_pthread.dylib             0x00007fff6c947b8b thread_start + 15\n"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:34.436Z"},{"type":"test","start":"2020-11-04T11:43:34.436Z","_duration":100,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:34.536Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:22.645Z","_duration":8266,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html"},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.001},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.001,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-usercentrics.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-124330.438.png"}],"errorIndex":0,"end":"2020-11-04T11:43:30.911Z"},{"type":"test","start":"2020-11-04T11:43:30.918Z","_duration":107,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:31.025Z"},{"type":"test","start":"2020-11-04T11:43:31.025Z","_duration":3225,"uid":"test-00-2","cid":"0-0","title":"should NOT have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should NOT have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3ApaJB-pG1xS2OK-1hYKsWFf7Z2l8Pq6ON.imkwLLqjnDvBlyae1eQuQBYqCb80GZy9dqG2iumKAc8","path":"/","httpOnly":true,"secure":false}]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"getCookieByName","sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ isn't even allowed to load"}],"errorIndex":0,"end":"2020-11-04T11:43:34.251Z"},{"type":"test","start":"2020-11-04T11:43:34.251Z","_duration":184,"uid":"test-00-3","cid":"0-0","title":"should NOT have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should NOT have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a visible Usercentrics banner","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should NOT have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#usercentrics-root\"}\n  (Session info: chrome=86.0.4240.75)","stacktrace":"0   chromedriver                        0x000000010f8f7c29 chromedriver + 2464809\n1   chromedriver                        0x000000010ff326f3 chromedriver + 8996595\n2   chromedriver                        0x000000010f73cd56 chromedriver + 650582\n3   chromedriver                        0x000000010f6c3908 chromedriver + 153864\n4   chromedriver                        0x000000010f6ed654 chromedriver + 325204\n5   chromedriver                        0x000000010f6df62d chromedriver + 267821\n6   chromedriver                        0x000000010f6eb8b1 chromedriver + 317617\n7   chromedriver                        0x000000010f6df8f3 chromedriver + 268531\n8   chromedriver                        0x000000010f6b9230 chromedriver + 111152\n9   chromedriver                        0x000000010f6ba1a7 chromedriver + 115111\n10  chromedriver                        0x000000010f8ca830 chromedriver + 2279472\n11  chromedriver                        0x000000010f8d583a chromedriver + 2324538\n12  chromedriver                        0x000000010f8d54a7 chromedriver + 2323623\n13  chromedriver                        0x000000010f8b1945 chromedriver + 2177349\n14  chromedriver                        0x000000010f8d5d41 chromedriver + 2325825\n15  chromedriver                        0x000000010f8bfbda chromedriver + 2235354\n16  chromedriver                        0x000000010f8eac4a chromedriver + 2411594\n17  chromedriver                        0x000000010f8fc987 chromedriver + 2484615\n18  libsystem_pthread.dylib             0x00007fff6c94c109 _pthread_start + 148\n19  libsystem_pthread.dylib             0x00007fff6c947b8b thread_start + 15\n"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/elements","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:34.436Z"},{"type":"test","start":"2020-11-04T11:43:34.436Z","_duration":100,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:34.536Z"}],"end":"2020-11-04T11:43:34.536Z","duration":11892},{"type":"suite","start":"2020-11-04T11:43:34.538Z","_duration":0,"uid":"suite-0-1","cid":"0-0","title":"STEP 2 - (no Usercentrics, so no consent decision)","fullTitle":"STEP 2 - (no Usercentrics, so no consent decision)","tests":[{"type":"test","start":"2020-11-04T11:43:34.538Z","_duration":1616,"uid":"test-01-0","cid":"0-0","title":"(no tracking to deny)","fullTitle":"STEP 2 - (no Usercentrics, so no consent decision) (no tracking to deny)","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - (no Usercentrics, so no consent decision) - (no tracking to deny)","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - (no Usercentrics, so no consent decision) - (no tracking to deny)","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:36.154Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:34.538Z","_duration":1616,"uid":"test-01-0","cid":"0-0","title":"(no tracking to deny)","fullTitle":"STEP 2 - (no Usercentrics, so no consent decision) (no tracking to deny)","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - (no Usercentrics, so no consent decision) - (no tracking to deny)","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - (no Usercentrics, so no consent decision) - (no tracking to deny)","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:36.154Z"}],"end":"2020-11-04T11:43:36.154Z","duration":1616},{"type":"suite","start":"2020-11-04T11:43:36.155Z","_duration":0,"uid":"suite-0-2","cid":"0-0","title":"STEP 3 - fire virtual page view by clicking button","fullTitle":"STEP 3 - fire virtual page view by clicking button","tests":[{"type":"test","start":"2020-11-04T11:43:36.155Z","_duration":4797,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"88ba2191-a748-4632-a702-cd9cc006fe0e"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/88ba2191-a748-4632-a702-cd9cc006fe0e/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/88ba2191-a748-4632-a702-cd9cc006fe0e/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.004},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.004,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:40.953Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:36.155Z","_duration":4797,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"88ba2191-a748-4632-a702-cd9cc006fe0e"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/88ba2191-a748-4632-a702-cd9cc006fe0e/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/88ba2191-a748-4632-a702-cd9cc006fe0e/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.004},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.004,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:40.953Z"}],"end":"2020-11-04T11:43:40.953Z","duration":4798},{"type":"suite","start":"2020-11-04T11:43:40.954Z","_duration":0,"uid":"suite-0-3","cid":"0-0","title":"STEP 4 - fire virtual page view to tag 10 only by clicking button","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button","tests":[{"type":"test","start":"2020-11-04T11:43:40.955Z","_duration":4791,"uid":"test-03-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should accept tracking","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should accept tracking","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"0d32e08d-6444-4954-974a-42d5108bdf1f"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/0d32e08d-6444-4954-974a-42d5108bdf1f/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/0d32e08d-6444-4954-974a-42d5108bdf1f/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:45.747Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:40.955Z","_duration":4791,"uid":"test-03-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should accept tracking","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should accept tracking","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"0d32e08d-6444-4954-974a-42d5108bdf1f"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/0d32e08d-6444-4954-974a-42d5108bdf1f/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/0d32e08d-6444-4954-974a-42d5108bdf1f/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:45.747Z"}],"end":"2020-11-04T11:43:45.747Z","duration":4793},{"type":"suite","start":"2020-11-04T11:43:45.747Z","_duration":0,"uid":"suite-0-4","cid":"0-0","title":"STEP 5 - fire virtual page view to tag 11 only","fullTitle":"STEP 5 - fire virtual page view to tag 11 only","tests":[{"type":"test","start":"2020-11-04T11:43:45.747Z","_duration":4798,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"1eb1b4e0-b261-4a55-9e5c-834e8f94f6d8"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/1eb1b4e0-b261-4a55-9e5c-834e8f94f6d8/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/1eb1b4e0-b261-4a55-9e5c-834e8f94f6d8/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:50.546Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:45.747Z","_duration":4798,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"1eb1b4e0-b261-4a55-9e5c-834e8f94f6d8"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/1eb1b4e0-b261-4a55-9e5c-834e8f94f6d8/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/1eb1b4e0-b261-4a55-9e5c-834e8f94f6d8/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:50.546Z"}],"end":"2020-11-04T11:43:50.546Z","duration":4799},{"type":"suite","start":"2020-11-04T11:43:50.546Z","_duration":0,"uid":"suite-0-5","cid":"0-0","title":"STEP 6 - fire virtual page view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only","tests":[{"type":"test","start":"2020-11-04T11:43:50.546Z","_duration":4734,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"fece010e-5049-4c65-bfc8-f15219d6ce07"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/fece010e-5049-4c65-bfc8-f15219d6ce07/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/fece010e-5049-4c65-bfc8-f15219d6ce07/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:55.280Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:50.546Z","_duration":4734,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"fece010e-5049-4c65-bfc8-f15219d6ce07"}},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/fece010e-5049-4c65-bfc8-f15219d6ce07/click","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/fece010e-5049-4c65-bfc8-f15219d6ce07/click","body":{},"result":{"value":null},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:43:55.280Z"}],"end":"2020-11-04T11:43:55.280Z","duration":4734},{"type":"suite","start":"2020-11-04T11:43:55.281Z","_duration":0,"uid":"suite-0-6","cid":"0-0","title":"FINALIZE - get Proxy logs to confirm tag firings","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings","tests":[{"type":"test","start":"2020-11-04T11:43:55.281Z","_duration":6157,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:44:01.438Z"},{"type":"test","start":"2020-11-04T11:44:01.438Z","_duration":53,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:44:01.491Z"},{"type":"test","start":"2020-11-04T11:44:01.491Z","_duration":50,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T11:44:01.541Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:43:55.281Z","_duration":6157,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:44:01.438Z"},{"type":"test","start":"2020-11-04T11:44:01.438Z","_duration":53,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:44:01.491Z"},{"type":"test","start":"2020-11-04T11:44:01.491Z","_duration":50,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T11:44:01.541Z"}],"end":"2020-11-04T11:44:01.541Z","duration":6260},{"type":"suite","start":"2020-11-04T11:44:01.541Z","_duration":0,"uid":"suite-0-7","cid":"0-0","title":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","tests":[{"type":"test","start":"2020-11-04T11:44:01.542Z","_duration":40,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:44:01.582Z"},{"type":"test","start":"2020-11-04T11:44:01.582Z","_duration":38,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.621Z"},{"type":"test","start":"2020-11-04T11:44:01.621Z","_duration":44,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.665Z"},{"type":"test","start":"2020-11-04T11:44:01.665Z","_duration":48,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.713Z"},{"type":"test","start":"2020-11-04T11:44:01.714Z","_duration":34,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.748Z"},{"type":"test","start":"2020-11-04T11:44:01.749Z","_duration":39,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.788Z"},{"type":"test","start":"2020-11-04T11:44:01.788Z","_duration":36,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.824Z"},{"type":"test","start":"2020-11-04T11:44:01.824Z","_duration":37,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:44:01.861Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:44:01.542Z","_duration":40,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:44:01.582Z"},{"type":"test","start":"2020-11-04T11:44:01.582Z","_duration":38,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.621Z"},{"type":"test","start":"2020-11-04T11:44:01.621Z","_duration":44,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.665Z"},{"type":"test","start":"2020-11-04T11:44:01.665Z","_duration":48,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.713Z"},{"type":"test","start":"2020-11-04T11:44:01.714Z","_duration":34,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.748Z"},{"type":"test","start":"2020-11-04T11:44:01.749Z","_duration":39,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.788Z"},{"type":"test","start":"2020-11-04T11:44:01.788Z","_duration":36,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:44:01.824Z"},{"type":"test","start":"2020-11-04T11:44:01.824Z","_duration":37,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"4b34837a8a5a4e20b22f1eb6f514029c","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:44:01.861Z"}],"end":"2020-11-04T11:44:01.861Z","duration":320}],"title":"Test Report Title","options":{"stdout":true,"outputDir":"./reports/html-reports/","filename":"report.html","templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"reportTitle":"Test Report Title","options":{"logLevel":"warn","outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}},"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}},"showInBrowser":false,"useOnAfterCommandForScreenshot":false,"LOG":{"category":"default","context":{}},"logLevel":"warn","debug":true,"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}}}