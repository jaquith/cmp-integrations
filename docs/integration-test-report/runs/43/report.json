{"info":{"type":"runner","start":"2020-11-04T10:42:35.659Z","_duration":59267,"cid":"0-0","capabilities":{"browserVersion":"86.0.622.43","strictFileInteractability":false,"acceptInsecureCerts":true,"webauthn:virtualAuthenticators":true,"networkConnectionEnabled":false,"timeouts":{"pageLoad":300000,"implicit":0,"script":30000},"browserName":"msedge","setWindowRect":true,"proxy":{"httpProxy":"13.57.103.60:56319","sslProxy":"13.57.103.60:56319","proxyType":"manual"},"pageLoadStrategy":"normal","ms:edgeOptions":{"debuggerAddress":"localhost:49767"},"platformName":"windows","msedge":{"msedgedriverVersion":"86.0.622.43 (aecc56815110f44c6552813fdd27a416872192c8)","userDataDir":"C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\scoped_dir3004_597033705"},"unhandledPromptBehavior":"dismiss and notify","sessionId":"8d9031951cee496bb2eca42638efe66a"},"sanitizedCapabilities":"msedge.86_0_622_43.windows","config":{"protocol":"https","hostname":"ondemand.eu-central-1.saucelabs.com","port":443,"path":"/wd/hub","specs":["tests/specs/examples/usercentrics-v2/noview_no-utag-edit_opt-in.js"],"suites":{},"exclude":[],"logLevel":"warn","logLevels":{},"excludeDriverLogs":[],"bail":0,"waitforInterval":500,"waitforTimeout":20000,"framework":"mocha","reporters":["spec",[null,{"outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}}}]],"services":[["sauce"]],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"connectionRetryTimeout":40000,"connectionRetryCount":2,"execArgv":[],"runnerEnv":{},"runner":"local","mochaOpts":{"timeout":67000,"ui":"bdd","color":true,"retries":0,"specFileRetries":0},"jasmineNodeOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"before":[null,null],"beforeSession":[null,null],"beforeSuite":[null,null],"beforeHook":[],"beforeTest":[null,null],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[null],"afterSession":[],"after":[null],"onComplete":[null],"onReload":[null],"beforeFeature":[null],"beforeScenario":[null],"beforeStep":[],"afterStep":[],"afterScenario":[null],"afterFeature":[],"specFileRetries":0,"baseUrl":"","user":"caleb.jaquith","key":"6fab5239-14b0-49cf-8488-21839bd22c08","coloredLogs":true,"screenshotPath":"./errorShots/","host":"https://ondemand.eu-central-1.saucelabs.com","region":"eu","capabilities":[{"browserName":"MicrosoftEdge","browserVersion":"latest","platformName":"Windows 10","teal:enableProxy":true,"teal:enableTrace":false,"teal:runCrossBrowser":true,"teal:runRemotely":true,"teal:showDurations":true,"teal:enableSauceConnect":false,"teal:hasReporterContext":true,"teal:hasRunnerContext":true,"teal:reporterContext":"<p>This report has been generated by Tealium's automated testing platform.</p>\n<p>These tests will have been created specifically for your project by a Tealium Implementation Engineer to verify a configuration or use case.</p>\n<p>The intent is to document the tests run on the completed configuration (acceptance tests). It can also serve as a limited regression test as work continues, to ensure that future projects don't break previous ones.\nFor more information, see the <a href=\"https://jaquith.github.io/webdriverio-standalone/\">developer documentation</a>.</p>","teal:summaryContext":"<p>A suite of tests, intended to ensure the integration between Tealium iQ Tag Management and the Usercentrics Browser SDK (CMP v2) works as expected in multiple potential configuration cases.</p>\n<p>Includes some common error and misconfiguration cases.</p>\n<p>Does not include any TCF support, that setting is not checked.</p>","teal:capabilityNumber":3,"sauce:options":{},"teal:specPath":"tests/specs/examples/usercentrics-v2/noview_no-utag-edit_opt-in.js","teal:testContext":"<p>A Tealium iQ setup with the <a href=\"https://docs.tealium.com/platforms/javascript/settings/#noview\">noview</a> setting active, where the TiQ operator has failed to edit utag.loader template (misconfiguration case).</p>\n<p>No tags should fire regardless of user choice, this test confirms the opt-in case.</p>","teal:testTitle":"Standard TiQ Setup, 'utag loader' Template Edit Missing, User Opts In","teal:helpers":["helpers/specific/usercentrics-v2-general-integration-test-helper.js"],"proxy":{"proxyType":"manual","sslProxy":"13.57.103.60:56319","httpProxy":"13.57.103.60:56319"},"acceptInsecureCerts":true,"teal:opJourneyId":3962,"teal:opRunId":23227,"teal:opInitialActionId":50893}],"sauceConnect":false,"ignoredWorkerServices":[],"specFileRetryAttempts":0},"specs":["/Users/calebjaquith/.git/webdriverio-standalone/tests/specs/examples/usercentrics-v2/noview_no-utag-edit_opt-in.js"],"sessionId":"8d9031951cee496bb2eca42638efe66a","isMultiremote":false,"retry":0,"failures":0,"retries":0,"end":"2020-11-04T10:43:34.926Z"},"metrics":{"passed":22,"skipped":0,"failed":0,"start":"2020-11-04T10:42:35.659Z","end":"2020-11-04T10:43:34.926Z","duration":59267},"suites":[{"type":"suite","start":"2020-11-04T10:42:35.663Z","_duration":0,"uid":"suite-0-0","cid":"0-0","title":"STEP 1 - initial visit to test page","fullTitle":"STEP 1 - initial visit to test page","tests":[{"type":"test","start":"2020-11-04T10:42:35.664Z","_duration":8690,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.009},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.009,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114243.906.png"}],"errorIndex":0,"end":"2020-11-04T10:42:44.355Z"},{"type":"test","start":"2020-11-04T10:42:44.363Z","_duration":108,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:44.471Z"},{"type":"test","start":"2020-11-04T10:42:44.471Z","_duration":5817,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5.611},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5.611,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:017592da0cfd0019f80ad74b2dd803082005707a00718$_sn:1$_se:1$_ss:1$_st:1604488365117$ses_id:1604486565117%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022565,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3AjEGt-8kYlC24O3mgTScu38_NxH5xtNnS.q%2FTkXGePTO4Y6Z5f05113%2BMSZD%2Bzf0pTMCWHovI9jWU","path":"/","httpOnly":true,"secure":false}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:017592da0cfd0019f80ad74b2dd803082005707a00718$_sn:1$_se:1$_ss:1$_st:1604488365117$ses_id:1604486565117%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022565,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ will run because we can't detect the edit before load, but no tags should be fired."}],"errorIndex":0,"end":"2020-11-04T10:42:50.289Z"},{"type":"test","start":"2020-11-04T10:42:50.289Z","_duration":330,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"16f077a1-8169-41e7-8fa7-8b3f74186017"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/16f077a1-8169-41e7-8fa7-8b3f74186017/displayed","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/16f077a1-8169-41e7-8fa7-8b3f74186017/displayed","body":{},"result":{"value":true},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"16f077a1-8169-41e7-8fa7-8b3f74186017","ELEMENT":"16f077a1-8169-41e7-8fa7-8b3f74186017"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"16f077a1-8169-41e7-8fa7-8b3f74186017","ELEMENT":"16f077a1-8169-41e7-8fa7-8b3f74186017"}]},"result":{"value":true},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:50.620Z"},{"type":"test","start":"2020-11-04T10:42:50.620Z","_duration":81,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:50.701Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:42:35.664Z","_duration":8690,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.009},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.009,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114243.906.png"}],"errorIndex":0,"end":"2020-11-04T10:42:44.355Z"},{"type":"test","start":"2020-11-04T10:42:44.363Z","_duration":108,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:44.471Z"},{"type":"test","start":"2020-11-04T10:42:44.471Z","_duration":5817,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5.611},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5.611,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:017592da0cfd0019f80ad74b2dd803082005707a00718$_sn:1$_se:1$_ss:1$_st:1604488365117$ses_id:1604486565117%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022565,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3AjEGt-8kYlC24O3mgTScu38_NxH5xtNnS.q%2FTkXGePTO4Y6Z5f05113%2BMSZD%2Bzf0pTMCWHovI9jWU","path":"/","httpOnly":true,"secure":false}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:017592da0cfd0019f80ad74b2dd803082005707a00718$_sn:1$_se:1$_ss:1$_st:1604488365117$ses_id:1604486565117%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022565,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ will run because we can't detect the edit before load, but no tags should be fired."}],"errorIndex":0,"end":"2020-11-04T10:42:50.289Z"},{"type":"test","start":"2020-11-04T10:42:50.289Z","_duration":330,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"16f077a1-8169-41e7-8fa7-8b3f74186017"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/16f077a1-8169-41e7-8fa7-8b3f74186017/displayed","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/16f077a1-8169-41e7-8fa7-8b3f74186017/displayed","body":{},"result":{"value":true},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"16f077a1-8169-41e7-8fa7-8b3f74186017","ELEMENT":"16f077a1-8169-41e7-8fa7-8b3f74186017"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"16f077a1-8169-41e7-8fa7-8b3f74186017","ELEMENT":"16f077a1-8169-41e7-8fa7-8b3f74186017"}]},"result":{"value":true},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:50.620Z"},{"type":"test","start":"2020-11-04T10:42:50.620Z","_duration":81,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:50.701Z"}],"end":"2020-11-04T10:42:50.701Z","duration":15038},{"type":"suite","start":"2020-11-04T10:42:50.702Z","_duration":0,"uid":"suite-0-1","cid":"0-0","title":"STEP 2 - accept all tracking","fullTitle":"STEP 2 - accept all tracking","tests":[{"type":"test","start":"2020-11-04T10:42:50.702Z","_duration":5150,"uid":"test-01-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 2 - accept all tracking should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"4b1adf99-4f12-44a6-b579-706f9b85e01e"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/4b1adf99-4f12-44a6-b579-706f9b85e01e/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/4b1adf99-4f12-44a6-b579-706f9b85e01e/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:55.852Z"},{"type":"test","start":"2020-11-04T10:42:55.852Z","_duration":731,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - accept all tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114255.892.png"}],"errorIndex":0,"end":"2020-11-04T10:42:56.583Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:42:50.702Z","_duration":5150,"uid":"test-01-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 2 - accept all tracking should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"4b1adf99-4f12-44a6-b579-706f9b85e01e"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/4b1adf99-4f12-44a6-b579-706f9b85e01e/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/4b1adf99-4f12-44a6-b579-706f9b85e01e/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:42:55.852Z"},{"type":"test","start":"2020-11-04T10:42:55.852Z","_duration":731,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - accept all tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":"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dGmRebrTTLYlyJ1EPsCzFMRBKgt9drpC+nwPYecU/pOex2Y8jKme6k1igm1pUV6L+4MHS8EDpAzWtb65SuN8Lwzn1H+Qnt9EPDyFnkomenBusgnEtWvMH+whztobNcwEm/cA6csgBuMebGnzFXVWdg/edWDpII/0lhvWO3az4ioAREQGbrLnODiI4mAvgVQqhT//v/L85NIP47CODsI15YRtynbnCna6a66Qih8gvneA6HkK6T//knuYAACeYGR8EIOjTky5pjA1aOr65EBdc5VC/CCOvYMozlNp/PlXOZXwZATjg4MYdU7BNTWFQVPPphI9ENmoE9+qpv/XcERwuecCR7kQUbuxAYCIiIiIiIioB3AIABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD2ADABEREREREVEPYAMAERERERERUQ9gAwARERERERFRD6jRAJBF1PkIjx5V/jij2c6EtJpEsGoYHz16hGCi2s8f4VG1DTqpalyCuCOhJCIiIiIionumRgOACa49AXESABDAiRAQys9lBEinOxHOqrLpBByRy0K4LhFxQPG3wEmg+u9HvQLCO9qZwNYy6jWMg/x/a/jxkRN3oc2FiIiIiIiI7pfWhgCYXNjrWMU5gWDFt/QueF2mir8cdUdguZUwdZIJrvUIHPiAaLyRFgB9umWjQTYiEBERERER9ZjmGwCyUUQ72B89EfwRaxW+M7lcqNoMYXLBdUde8LfEZMEogA8N9LrQpVs2iqXnHEhARERERETUa5pvAEinkS79kUDQYLx9Ilj4v9IbaOPtSnMNBBOqMfDy9/JvflwDsPZjzfH81WSjTjx6FEQ06lSESz62ei4DdThLnwrx0H+vnjuhvO9iPKOl7xuJi1yZdyDiHlUfo7CTbDFeziiyBun2//y/Tjz69jk+4AOef1vc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QAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAA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"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"78c9749d-d353-45b2-acad-a733d1ce2a0f","ELEMENT":"78c9749d-d353-45b2-acad-a733d1ce2a0f"}]},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114255.892.png"}],"errorIndex":0,"end":"2020-11-04T10:42:56.583Z"}],"end":"2020-11-04T10:42:56.583Z","duration":5881},{"type":"suite","start":"2020-11-04T10:42:56.586Z","_duration":0,"uid":"suite-0-2","cid":"0-0","title":"STEP 3 - fire virtual page view by clicking button","fullTitle":"STEP 3 - fire virtual page view by clicking button","tests":[{"type":"test","start":"2020-11-04T10:42:56.586Z","_duration":5183,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"f587aba0-1931-42b2-a512-f74063b7fbfa"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/f587aba0-1931-42b2-a512-f74063b7fbfa/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/f587aba0-1931-42b2-a512-f74063b7fbfa/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.014},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.014,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:01.769Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:42:56.586Z","_duration":5183,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"f587aba0-1931-42b2-a512-f74063b7fbfa"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/f587aba0-1931-42b2-a512-f74063b7fbfa/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/f587aba0-1931-42b2-a512-f74063b7fbfa/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.014},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.014,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:01.769Z"}],"end":"2020-11-04T10:43:01.769Z","duration":5183},{"type":"suite","start":"2020-11-04T10:43:01.770Z","_duration":0,"uid":"suite-0-3","cid":"0-0","title":"STEP 4 - fire virtual page view to tag 10 only by clicking button","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button","tests":[{"type":"test","start":"2020-11-04T10:43:01.770Z","_duration":5966,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"b9439b13-8c83-4ed6-8c47-7a32b6138d81"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/b9439b13-8c83-4ed6-8c47-7a32b6138d81/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/b9439b13-8c83-4ed6-8c47-7a32b6138d81/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.011},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.011,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:07.736Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:43:01.770Z","_duration":5966,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"b9439b13-8c83-4ed6-8c47-7a32b6138d81"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/b9439b13-8c83-4ed6-8c47-7a32b6138d81/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/b9439b13-8c83-4ed6-8c47-7a32b6138d81/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.011},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.011,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:07.736Z"}],"end":"2020-11-04T10:43:07.736Z","duration":5966},{"type":"suite","start":"2020-11-04T10:43:07.737Z","_duration":0,"uid":"suite-0-4","cid":"0-0","title":"STEP 5 - fire virtual page view to tag 11 only","fullTitle":"STEP 5 - fire virtual page view to tag 11 only","tests":[{"type":"test","start":"2020-11-04T10:43:07.737Z","_duration":6965,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"3b91aa4a-70cb-499c-be52-341aa3f4ae9d"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/3b91aa4a-70cb-499c-be52-341aa3f4ae9d/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/3b91aa4a-70cb-499c-be52-341aa3f4ae9d/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.004},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.004,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:14.702Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:43:07.737Z","_duration":6965,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"3b91aa4a-70cb-499c-be52-341aa3f4ae9d"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/3b91aa4a-70cb-499c-be52-341aa3f4ae9d/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/3b91aa4a-70cb-499c-be52-341aa3f4ae9d/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.004},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.004,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:14.702Z"}],"end":"2020-11-04T10:43:14.702Z","duration":6965},{"type":"suite","start":"2020-11-04T10:43:14.702Z","_duration":0,"uid":"suite-0-5","cid":"0-0","title":"STEP 6 - fire virtual page view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only","tests":[{"type":"test","start":"2020-11-04T10:43:14.703Z","_duration":4798,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"4e595ccc-2546-46ff-ade1-e7ae47be2faa"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/4e595ccc-2546-46ff-ade1-e7ae47be2faa/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/4e595ccc-2546-46ff-ade1-e7ae47be2faa/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.013},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.013,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:19.501Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:43:14.703Z","_duration":4798,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"4e595ccc-2546-46ff-ade1-e7ae47be2faa"}},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/4e595ccc-2546-46ff-ade1-e7ae47be2faa/click","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/4e595ccc-2546-46ff-ade1-e7ae47be2faa/click","body":{},"result":{"value":null},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.013},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.013,"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:19.501Z"}],"end":"2020-11-04T10:43:19.501Z","duration":4799},{"type":"suite","start":"2020-11-04T10:43:19.501Z","_duration":0,"uid":"suite-0-6","cid":"0-0","title":"FINALIZE - get Proxy logs to confirm tag firings","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings","tests":[{"type":"test","start":"2020-11-04T10:43:19.502Z","_duration":14583,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:34.085Z"},{"type":"test","start":"2020-11-04T10:43:34.086Z","_duration":54,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:34.140Z"},{"type":"test","start":"2020-11-04T10:43:34.140Z","_duration":50,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T10:43:34.191Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:43:19.502Z","_duration":14583,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:34.085Z"},{"type":"test","start":"2020-11-04T10:43:34.086Z","_duration":54,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:34.140Z"},{"type":"test","start":"2020-11-04T10:43:34.140Z","_duration":50,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T10:43:34.191Z"}],"end":"2020-11-04T10:43:34.191Z","duration":14690},{"type":"suite","start":"2020-11-04T10:43:34.191Z","_duration":0,"uid":"suite-0-7","cid":"0-0","title":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","tests":[{"type":"test","start":"2020-11-04T10:43:34.191Z","_duration":41,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:34.232Z"},{"type":"test","start":"2020-11-04T10:43:34.232Z","_duration":56,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.288Z"},{"type":"test","start":"2020-11-04T10:43:34.288Z","_duration":51,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.339Z"},{"type":"test","start":"2020-11-04T10:43:34.339Z","_duration":42,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.381Z"},{"type":"test","start":"2020-11-04T10:43:34.381Z","_duration":46,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.427Z"},{"type":"test","start":"2020-11-04T10:43:34.427Z","_duration":149,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.576Z"},{"type":"test","start":"2020-11-04T10:43:34.576Z","_duration":59,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.635Z"},{"type":"test","start":"2020-11-04T10:43:34.635Z","_duration":43,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T10:43:34.678Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:43:34.191Z","_duration":41,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:43:34.232Z"},{"type":"test","start":"2020-11-04T10:43:34.232Z","_duration":56,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.288Z"},{"type":"test","start":"2020-11-04T10:43:34.288Z","_duration":51,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.339Z"},{"type":"test","start":"2020-11-04T10:43:34.339Z","_duration":42,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.381Z"},{"type":"test","start":"2020-11-04T10:43:34.381Z","_duration":46,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.427Z"},{"type":"test","start":"2020-11-04T10:43:34.427Z","_duration":149,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.576Z"},{"type":"test","start":"2020-11-04T10:43:34.576Z","_duration":59,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:43:34.635Z"},{"type":"test","start":"2020-11-04T10:43:34.635Z","_duration":43,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"8d9031951cee496bb2eca42638efe66a","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T10:43:34.678Z"}],"end":"2020-11-04T10:43:34.678Z","duration":487}],"title":"Test Report Title","options":{"stdout":true,"outputDir":"./reports/html-reports/","filename":"report.html","templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"reportTitle":"Test Report Title","options":{"logLevel":"warn","outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}},"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}},"showInBrowser":false,"useOnAfterCommandForScreenshot":false,"LOG":{"category":"default","context":{}},"logLevel":"warn","debug":true,"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}}}