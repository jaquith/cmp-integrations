{"info":{"type":"runner","start":"2020-11-04T10:45:33.623Z","_duration":59702,"cid":"0-0","capabilities":{"browserVersion":"86.0.622.43","strictFileInteractability":false,"acceptInsecureCerts":true,"webauthn:virtualAuthenticators":true,"networkConnectionEnabled":false,"timeouts":{"pageLoad":300000,"implicit":0,"script":30000},"browserName":"msedge","setWindowRect":true,"proxy":{"httpProxy":"13.57.103.60:60693","sslProxy":"13.57.103.60:60693","proxyType":"manual"},"pageLoadStrategy":"normal","ms:edgeOptions":{"debuggerAddress":"localhost:49762"},"platformName":"windows","msedge":{"msedgedriverVersion":"86.0.622.43 (aecc56815110f44c6552813fdd27a416872192c8)","userDataDir":"C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\scoped_dir2724_1476079862"},"unhandledPromptBehavior":"dismiss and notify","sessionId":"1cf97b9989534ac582ab3606eaa49476"},"sanitizedCapabilities":"msedge.86_0_622_43.windows","config":{"protocol":"https","hostname":"ondemand.eu-central-1.saucelabs.com","port":443,"path":"/wd/hub","specs":["tests/specs/examples/usercentrics-v2/standard_no-utag-edit_opt-in.js"],"suites":{},"exclude":[],"logLevel":"warn","logLevels":{},"excludeDriverLogs":[],"bail":0,"waitforInterval":500,"waitforTimeout":20000,"framework":"mocha","reporters":["spec",[null,{"outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}}}]],"services":[["sauce"]],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"connectionRetryTimeout":40000,"connectionRetryCount":2,"execArgv":[],"runnerEnv":{},"runner":"local","mochaOpts":{"timeout":67000,"ui":"bdd","color":true,"retries":0,"specFileRetries":0},"jasmineNodeOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"before":[null,null],"beforeSession":[null,null],"beforeSuite":[null,null],"beforeHook":[],"beforeTest":[null,null],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[null],"afterSession":[],"after":[null],"onComplete":[null],"onReload":[null],"beforeFeature":[null],"beforeScenario":[null],"beforeStep":[],"afterStep":[],"afterScenario":[null],"afterFeature":[],"specFileRetries":0,"baseUrl":"","user":"caleb.jaquith","key":"6fab5239-14b0-49cf-8488-21839bd22c08","coloredLogs":true,"screenshotPath":"./errorShots/","host":"https://ondemand.eu-central-1.saucelabs.com","region":"eu","capabilities":[{"browserName":"MicrosoftEdge","browserVersion":"latest","platformName":"Windows 10","teal:enableProxy":true,"teal:enableTrace":false,"teal:runCrossBrowser":true,"teal:runRemotely":true,"teal:showDurations":true,"teal:enableSauceConnect":false,"teal:hasReporterContext":true,"teal:hasRunnerContext":true,"teal:reporterContext":"<p>This report has been generated by Tealium's automated testing platform.</p>\n<p>These tests will have been created specifically for your project by a Tealium Implementation Engineer to verify a configuration or use case.</p>\n<p>The intent is to document the tests run on the completed configuration (acceptance tests). It can also serve as a limited regression test as work continues, to ensure that future projects don't break previous ones.\nFor more information, see the <a href=\"https://jaquith.github.io/webdriverio-standalone/\">developer documentation</a>.</p>","teal:summaryContext":"<p>A suite of tests, intended to ensure the integration between Tealium iQ Tag Management and the Usercentrics Browser SDK (CMP v2) works as expected in multiple potential configuration cases.</p>\n<p>Includes some common error and misconfiguration cases.</p>\n<p>Does not include any TCF support, that setting is not checked.</p>","teal:capabilityNumber":3,"sauce:options":{},"teal:specPath":"tests/specs/examples/usercentrics-v2/standard_no-utag-edit_opt-in.js","teal:testContext":"<p>A standard Tealium iQ setup where the TiQ operator has failed to edit utag.loader template (misconfiguration case).</p>\n<p>No tags should fire regardless of user choice, this test confirms the opt-in case.</p>","teal:testTitle":"Standard TiQ Setup, 'utag loader' Template Edit Missing, User Opts In","teal:helpers":["helpers/specific/usercentrics-v2-general-integration-test-helper.js"],"proxy":{"proxyType":"manual","sslProxy":"13.57.103.60:60693","httpProxy":"13.57.103.60:60693"},"acceptInsecureCerts":true,"teal:opJourneyId":3962,"teal:opRunId":23229,"teal:opInitialActionId":50905}],"sauceConnect":false,"ignoredWorkerServices":[],"specFileRetryAttempts":0},"specs":["/Users/calebjaquith/.git/webdriverio-standalone/tests/specs/examples/usercentrics-v2/standard_no-utag-edit_opt-in.js"],"sessionId":"1cf97b9989534ac582ab3606eaa49476","isMultiremote":false,"retry":0,"failures":0,"retries":0,"end":"2020-11-04T10:46:33.325Z"},"metrics":{"passed":22,"skipped":0,"failed":0,"start":"2020-11-04T10:45:33.623Z","end":"2020-11-04T10:46:33.325Z","duration":59702},"suites":[{"type":"suite","start":"2020-11-04T10:45:33.628Z","_duration":0,"uid":"suite-0-0","cid":"0-0","title":"STEP 1 - initial visit to test page","fullTitle":"STEP 1 - initial visit to test page","tests":[{"type":"test","start":"2020-11-04T10:45:33.629Z","_duration":8512,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html"},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.006},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.006,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114541.711.png"}],"errorIndex":0,"end":"2020-11-04T10:45:42.141Z"},{"type":"test","start":"2020-11-04T10:45:42.147Z","_duration":115,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:42.264Z"},{"type":"test","start":"2020-11-04T10:45:42.264Z","_duration":6054,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5.803},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5.803,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:017592dcc6bb001d59b21922e2ef03082005907a00718$_sn:1$_se:1$_ss:1$_st:1604488543741$ses_id:1604486743741%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022743,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3AitC30wQhfFIGPH_iD_XT3iqhobm48tAz.9clw76FnZuau6PjBCes%2Fxeq1%2BU%2FwV6sI70CifCc0OTA","path":"/","httpOnly":true,"secure":false}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:017592dcc6bb001d59b21922e2ef03082005907a00718$_sn:1$_se:1$_ss:1$_st:1604488543741$ses_id:1604486743741%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022743,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ will run because we can't detect the edit before load, but no tags should be fired."}],"errorIndex":0,"end":"2020-11-04T10:45:48.318Z"},{"type":"test","start":"2020-11-04T10:45:48.318Z","_duration":365,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57/displayed","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57/displayed","body":{},"result":{"value":true},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57","ELEMENT":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57","ELEMENT":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57"}]},"result":{"value":true},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:48.683Z"},{"type":"test","start":"2020-11-04T10:45:48.684Z","_duration":146,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:48.831Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:45:33.629Z","_duration":8512,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html"},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.006},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.006,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-standard-no-utag-edit.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114541.711.png"}],"errorIndex":0,"end":"2020-11-04T10:45:42.141Z"},{"type":"test","start":"2020-11-04T10:45:42.147Z","_duration":115,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:42.264Z"},{"type":"test","start":"2020-11-04T10:45:42.264Z","_duration":6054,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5.803},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5.803,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:017592dcc6bb001d59b21922e2ef03082005907a00718$_sn:1$_se:1$_ss:1$_st:1604488543741$ses_id:1604486743741%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022743,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3AitC30wQhfFIGPH_iD_XT3iqhobm48tAz.9clw76FnZuau6PjBCes%2Fxeq1%2BU%2FwV6sI70CifCc0OTA","path":"/","httpOnly":true,"secure":false}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:017592dcc6bb001d59b21922e2ef03082005907a00718$_sn:1$_se:1$_ss:1$_st:1604488543741$ses_id:1604486743741%3Bexp-session$_pn:1%3Bexp-session","expiry":1636022743,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ will run because we can't detect the edit before load, but no tags should be fired."}],"errorIndex":0,"end":"2020-11-04T10:45:48.318Z"},{"type":"test","start":"2020-11-04T10:45:48.318Z","_duration":365,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/element/ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57/displayed","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/element/ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57/displayed","body":{},"result":{"value":true},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57","ELEMENT":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57","ELEMENT":"ec6409a5-6990-4ebe-9e9c-5b07c7cd3d57"}]},"result":{"value":true},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:48.683Z"},{"type":"test","start":"2020-11-04T10:45:48.684Z","_duration":146,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:48.831Z"}],"end":"2020-11-04T10:45:48.831Z","duration":15203},{"type":"suite","start":"2020-11-04T10:45:48.832Z","_duration":0,"uid":"suite-0-1","cid":"0-0","title":"STEP 2 - accept all tracking","fullTitle":"STEP 2 - accept all tracking","tests":[{"type":"test","start":"2020-11-04T10:45:48.832Z","_duration":5626,"uid":"test-01-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 2 - accept all tracking should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"ddb7a169-0a61-48a2-951b-c29315dac1ef"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/ddb7a169-0a61-48a2-951b-c29315dac1ef/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/ddb7a169-0a61-48a2-951b-c29315dac1ef/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:54.458Z"},{"type":"test","start":"2020-11-04T10:45:54.459Z","_duration":641,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - accept all tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114554.508.png"}],"errorIndex":0,"end":"2020-11-04T10:45:55.101Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:45:48.832Z","_duration":5626,"uid":"test-01-0","cid":"0-0","title":"should accept tracking","fullTitle":"STEP 2 - accept all tracking should accept tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should accept tracking","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-accept-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-accept-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"ddb7a169-0a61-48a2-951b-c29315dac1ef"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/ddb7a169-0a61-48a2-951b-c29315dac1ef/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/ddb7a169-0a61-48a2-951b-c29315dac1ef/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:45:54.458Z"},{"type":"test","start":"2020-11-04T10:45:54.459Z","_duration":641,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - accept all tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - accept all tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":"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UfoAnE0DdrlvfjYaxBrW8EPxK3PhS3Q0Dnj25EHvEDgpDcZnt+v3fxtWz14hzAHFeAHW8rFL0kh/BALOQp8BqxOeCWWz+yrLE1t48bHwhf3RIzx6JDfBX4unFfFchcmQBSXqQQAFTgKF9GvmjAWJLbz4qEmT9QgmsIZ4wlrbufn4AlsJFAYw3KspbkRERERERNReDXcBsDo9+oH1rE54UCgMAkjE08Xyvyxwop5FQAjs3bnS4hDmIhNYCxabx2sK/FWXA5iI4FI7Y0ITBkscWi3MaLDWvGb22bRBZUJhrIFEuoaDWD1YDQBrP2i7QRAREREREdFd0vgYAMWB9RJBRX9wK5yeQuE4G0Xa7oGqeJ9I4z50D7d6VhH4+ALfFL7gJyKXUJbfqy3HR+X4CHeb1T4EYA1xg3L7kL22ypmhVUWrkLUfWAlARERERER0B91uGsBsFO4fAKdB4XhxEbAbFZrVo8fVOJOAtbyvGrepZ6R89fpZRN1B2C8rtVKosnxoDpGJNfxQGmAPABKINuGTfTbqlgf1m/DAaQVK6VKqWElg68VH4OMLfOOOImuUbnY7ig34E9EoskNzkMvt5YH/stEg1iYimKul0UI2CnfhnJa7WRAREREREdGdYz5EQKXB6PQDwymdBCoM2FcYMK+07UREXBoMNKccsK848F3p/0oD3BnQDVZYHjTPaJ+6+CkHudPFtTy4XbXlxYH/1MczPlb1OFRJb1WaBkRENQigUbqVw1belSZs2kEEzc7NZUQEJozSloiIiIiIiO6SR0II0eQ6hXsui2gwDueqpvsCsohG0/B47FWW376vPxEREREREVGz3a4LwAOUjS7ihUEXg2x0C3AOVV1OREREREREdBexAkDD6llHBMUB/sq/RczBY62+nIiIiIiIiOguYhcAIiIiIiIioi7AFgBEREREREREXYAVAERERERERERdgBUARERERERERF2AFQBEREREREREXYAVAERERERERERdgBUARERERERERF2AFQBEREREREREXYAVAERERERERERdgBUARERERERERF2AFQBEREREREREXYAVAERERERERERdgBUARERERERERF2AFQBEREREREREXYAVAERERERERERdgBUARERERERERF2AFQBEREREREREXeAftaz07t07fP36FX///Xerw0Nt9t133+Hx48f48ccfOx0UIiIiIiIiaqFHQghhtsK7d+/w+PFjPH/+vF1hojb79OkTvn79ykoAIiIiIiKiB6xqF4AvX76w8P/APX/+HF++fOl0MIiIiIiIiKiFqlYAXFxctCMc1GE8z0RERERERA8bBwEkIiIiIiIi6gJNrQDI7czAYpnBTq7qmtiZsWCmwoq5nRlYZnZQdTcAkAzBYgkhWT10pse88yrG857Hi4iIiIiIiNqiiRUAORzvAj4fsHvMwigRERERERHRXdK8CoDke8xjEi+H+xGbf1/DF3lqDglT23lsT0mdDggRERERERHdYU2rAEge++GaHIY0MAwf/DjW1gDkdjBjscBiscAy8x4Z9ULszBSWWWbwPgNTyVBxXQtCxybHMeyOcIxQKRyKbgbaJva5Hcwot1eFP4RQlWb3yjBaQorEqBK+itupIymn18wOcgZdAGrbBxEREREREXWTJlUAJHHsd2FyWAIwgJcbLvhVNQA57LyaBzZSyOfzyHsBf0yxdOcV5rGBVD6PvHah7lAhjPp9OMznkc+nYDv1q8IRcsyj/zAvH+ewH/MOdb/52PwubCl52w3Mw1FTAdk8/Lq1d2YwelqMTwobp6OFAro6fKkNqMKn3u4QPv+oQSVDDjszDuxOppDfnoL2u3/lYxMREREREVE3a04FQPIYfp8XxVbo0vAkXP5jxdf0Y+zGihUEAAZeYsNVWojj3ZjcekBeiJflhQaH8gO+YQzIR8KU16cOh2sDLwegOI6mNUIpnIVtleGsxDT8upU18VE00U8eww8fhgvhk6a8itYSxukQ2z1WDIZ4inCh8G/c5F/eh887VT6216fZBxEREREREXWjJlQA5LAT9gP+0XKzc8c8YvAjXPzynMkghn7YSmVWCbb+4r8zyMSA/vJCSOWFumNlTgGXzVb+L5sNxbJ4LnMKxObhKDWxd2A+BpxmysXfStua0oXfdGVdfEqhlwMPm8FWZtuVxQC4TMZYkPfhH1V0ARj1A7EMqvSqICIiIiIiogfu9hUAuWPsxopN8su/lPLrtc0GF05RLofLBXmZDTaXupCeKy/UkCsOYhlFcTaTQbE1vmTrB1zF5u/lX8UB8hTbmtKF33RlXXxKoZcDX6EwXnm7Mh+829s49Pkxath1Qd6H71Ad/3x+GQMGaxMREREREVH3uHUFQO54F7FSk/wyaXgSrtgujnMApGFMumKYf58sboTdUslbwvCk8qu23Iy9koFhH+APlwbPSx77lQvhi83jfblTPWYsFijLysrj7IQV3QlsNrgUgxfmjnfLlQOF8JemN0y+x3zFIBbio2h2nwwVBuPTDJCY2wkrugRot0vi/byyS4Aimsvy+AD6OgB5H/7wjvrYysEOiYiIiIiIqCvdsgJALqT6hg2+L6sK/RKmtuVCq9xFIIN+Rdd9aarwVbvQbD+jXKg1sFwYPE9u4h6GT9GMfwDLqQ2cjpa7ImAjhWVF8FwbNhwXuwdgA6nlUod8eH3l5vOvMIlyKCRM/bQBzDvk/R7bTMYAKMSnv9wVYfS0eBx1+OTglb/Oq7cbhd93WKH1QmGgxdGQriuA7th+Hw4NBgskIiIiIiKi7vJICCHMVlhZWcHa2lq7wnNPyCPxZ7x5VeXCfRYIBPDmzZtOB4OIiIiIiIhapEnTAD50SYQsM6VuB3IXABdsxqP5EREREREREd05/+h0AO6HAbzcABwOC+YL/+M7zKPS2IJEREREREREd03VCoBvv/22HeG486SpbeSnOh2K1uF5JiIiIiIietiqdgF48uQJPn361I6wUId8+vQJT5486XQwiIiIiIiIqIWqDgIIAO/evcPXr1/x999/tyNM1EbfffcdHj9+jB9//LHTQSEiIiIiIqIWYgUAPVis3CAiIiIiIiqrWgHw7t07PH78GM+fP29XmIia5tOnT/j69SsrAYiIiIiIqOtVHQPgy5cvLPzTvfX8+XN8+fKl08EgIiIiIiLquKoVABcXF+0IB1HLMA8TERERERHVUAFARERERERERPdfEyoAkghZLLAY/EJJAMhhZ8aCmZ3c7Q/VEXL85Ljc1v1Ki2TIAktzIt5EyjS8X+lJRERERETUSU1rAeA7zCOfV/+WB5q19+ruZmG1iXI7mLHMgGVdIiIiIiIiasQ/Wn8ICVPbeUy1/kDUZAPLeeQ7HQgiIiIiIiJqijaMAaBopp3bwYwlhFBI2UUAyO3MlLsOzOyg8kdueV+ldQs7yO3MYNQPwD9abgWQ28GMRb8uUGwtEFJ0XdB8WU+GFNsdm4fBEkJSud1MCKEZxT6V4Zh5j0wt6aQKZxJAEiHHPGKIYd5RDKtJOHRxCFXsxqBrOaFoaaBdZnye5HCUV9N2mUgiZNJyIRkyPkdm54+IiIiIiIjq17QKAP+ouv9/5X7ZfpzaUuUuAskQHPP9OCx0Gzjsn4ejQmEvt/MK8/2HhS4GKWycjiKUBKSpbRz6APgOkV8eAJDDzqt59Be7JaQ24PKH1YVQ/ylsqcIxfTHMvyoWaJMIjfpLXRpStlP4zcLg8iOs3HHMD3jzyOe3MSXJ4cCGHN+8F/DHGkndASynNuCCCxupbUxJ1cJhHgfVnod9gP+4VHmQO95FzDWJYUmzYsXzJGF40gX/cWEPyWOcutR/+432h0LFzekGUorzWerbX+38ERERERERUV1aNgbA9pRBiQ8A4MKkojSYPPbDtfESxeECBl5uwKUokOqUCoJy1wLjcQY0yzIZ6MrdPi+KQbTZXOX/Tx7DDx+GC9tKU174lHue2i5UMgBABhn9jkvbIneM3ZgivgMvseHSrt8Y03BUiYPKwDB88KNYXs9kYvB5p6Ar/5ucJ8nWD5xmkAOQy5yi3+uFr/B38tgP1+Swbn9ADse7McUy+ZzJ+aaG80dERERERER16fA0gDlkToHYvKPcesAxjxhOkTH42itNbSO1Acw7KjTdV1A1LQ+fotZydy5zCrhssJX+xwZl/YCqab0ljFOzHWcyiKEftlLpV4Ktv8aAVGMSDn0czAzg5Ubxi30Sx35FBUZ5j+bnaWAYvtgujnM5HO8CNpsNNsh/Z07VFT5lcqVFv824oqjR80dERERERETGOlwBIBeIXcUm8qXfNio1IJCmtkvrqZvuK+R2EPa7sFFo4p//abL2ENn6gVhG0Vdf+XU9h52wXxHen2C6Z5sNLlVlhlyQvj3zcOjjYE4anpS/5ieP4fcNQ9+ootp5GsCwL4ZMJoMMJjEsSRieBDLHx9iFcfP/YsXKqVFNzy3OHxERERERERnrcAWA3Ac9Nv++3Ad9Z0Y/oF2BdlA6m80F9NsMmpcDQAyZQgk4+X6+9ibkhSbxpf70yWNd//lYeceYN9uxNIxJVwzz74sDEx5jt+L6ciE7tntcGovguFLH/Wrh0DTrz+2EK44BUA6nH6Ojp9h4aTx3Y7XzZLO54A+HcVo4H5KtH6e7u4Bh8385vsOTLkV8tee3wfNHREREREREhjpeAYCBZaQ2TjFaaO7tmAc2UssGX6GBgWV5oDhLad1+HBY6isuD2Y3Ko9NLU/D6ygMTHg8fwqcoUFYJEJblfgaF5ueAr9T+XMKUt3AciwWW42Ec+hQFcR0JU9uH8BXXd2TQX7EzfqFffWweDosFFssxbMoBA4qVCQ4LQslq4RjA8qGvFP9XmFSNAZDbmdGMqi8XxlFhsD55l+bnSRqehCsWA2yFjgc2GxBDheb/hW2mtuXBBAv7HD3dQGp5ALjV+SMiIiIiIiIjj4QQwmyFlZUVrK2ttSs81BJJhCxh2FKVu1Y8ZIFAAG/evOl0MIiIiIiIiDqq8y0AqPlyO5hRNM+XuwAoByMkIiIiIiKibvOPTgeAWkCagtdnwail2PPfVbFbBREREREREXWHqhUA3377bTvCQU02sJxHfrnTobgbmIeJiIiIiIhq6ALw5MkTfPr0qR1hIWq6T58+4cmTJ50OBhERERERUcdVHQQQAN69e4evX7/i77//bkeYiJriu+++w+PHj/Hjjz92OihEREREREQdxwoAIrqTWIFDRERERNRcVSsA3r17h8ePH+P58+ftChMREQC5C8fXr19ZCUBERERE1ARVxwD48uULC/9E1BHPnz/Hly9fOh0MIiIiIqIHoWoFwMXFRTvCQURkiPcgIiIiIqLmqFoBQERERERERET3XxMqAJIIWSywGPxCSQDIYWfGgpmd3O0PddfkdjBjmcGdi1oyBIslhKT2340wi+Nt912LSnFpybHry6u5nZlCXm9xGjSFHLeQJqDlOLTuGk2GLLBoD0xERERERG3XtBYAvsM88nn1b3mgWXuvhVwRwXJGKzGNy5J4Px8r5Ptl3C6rtzpdc9iZcWA+pv3vHbyaBzZSeeRTG8D8q7tXmUVERERERE3Thi4AEqa289ieklp/qHaTprCd38ZDjFpJN8SxYS7YbJ0OQxW5HcxYHJjv98GnXXS8i5hrEsMSAGkKXl8Mu8esASAiIiIieqjaUAGgaFad28GMJYRQSNlFQN0M2TKzg4pFEG2z71Lz9Bx2ZkbhB+AfVXxJTYZUXRLUTZzlcMnLZhAKzRgfW9fUXBsfZfN4dXcIVfwUn3e1TaKTIZPm17kdzFjK4Syvpgx/A83QkyFVfHM7M/q/Q8nqaQwgU2sz8opxKaRJhWVmlMdWf0E3T5+a8lwh/+i/zCcRsozCjxjmHeU4q+Kg3CgZgmUmhNCMUdyM09U0PZTpWNhv5XS3wZvKI788rE+7TAzot0FZtxPLZCrsB5XPXyGPhEIzxvFXba+/ltiihIiIiIioPZpWAeAfVff/r1wg8ePUlip3EUiG4Jjvx2Gh28Bh/zwcdZcIJExtH8IHuSuC3PUgidDoqdy8OZ9H/tCH2Pz7UuEjt/MK89hAKp9HPu8F/Nr20QUDw/DBj+PShsfYjbkwOaz9JC4X5E435LjlUxs4HZULSdLwJFz+48Kxkzg+dan/9hvtrxAHxzz6i90rDvsx75ALULmdV5jvPyx0t0hhw+VHuJ722wPD8MV2IX/wzeF4F3BB+XcMvmFlw3ajNAYAP3bxkyKNKzUjrxwXJEMYPS2eizwOfTHMv68lD/gxn/GWju0fLRdKTdOnljyXDMEyChwadmUZwHK+nBbbUxJyOzOKOBzC5x9VXwMxP+DNI69rTWGQrqbpkcOO3G5fjptJ1pV3P4ABk9YbLkUTBpvNZbIj9flLbaB8/uQIwg9vKe+7/KP6gr00jEmX9lryYbitXYWIiIiIiLpXy8YAqNzkX13YTR774dp4WepDPfByQ1E4vo0BLCsKW7nMqWKZXMB1TQ4Xvn4O4OVGpcLPAIZ9gL9YaslkEPN59U3iC4UZb3GBskm1ZEM/TpHJAchlcNrvhddX+Dt5DH+xGbZW8hh+KApIA8ul/ubS1DbypZJpBhmzQqAhG2yuGOQPvhlkMAnvJOS/6yqYKeJss6FiEdIkLhhYRn57qnAuclCdKlMubLws7HDgJTZc5SbsZumTPPYDvuFynlvOK9YFsPuqUPivtW+/cX6K7R4rWhbUUdA1Sw9tBdTAS1TMus2kOX/SlFddMaY8F5IN/YY7kTA86SpdS7njXcQU54GIiIiIiFqrw9MAyoWb2Lyj3HrAMY9YsbB8y30rm4C/2lUukwuE/bbaOrYrKyWSx37Nl/HiLjOIwY9RRSuIUX+xSfUAhguVAbnjXcBmg80G+e/MqaLgqIlB5hRw2WDYzVzVvSGM07oLgYrCWPIY/n4bBmz98t+ZTNMLZqZxUTUtf4Vdo3UM9aN8CiXYlKXOiukj5zmXSef9WAxw1dWior78VJVZemQyiKnifTvKJv8Zk1ok0/NXB2VrmExG28qEiIiIiIhaqcMVAHKhzVVszlz6NWHQueR7zMd8pWbe215l6dAGmws4rbWWodR0OYljf4UvuTYbXCgfr/QrfFkeGPYhlskgkwEmhyVIw5NA5hjHu6jQ/B+QbP1ALAN9r+wcdsJ+Rbr9hMnaYqKJ1iRcpxkkM6dyQWxgGL7TDHYqVXLcQuW4AMn384j5Dkvn3mv8+bgK5Zdys/SR85xZX3fXxk/Y/qmeUfHrzE9VmKaHzQZXUyrIjJv8V6oYMTt/danlWiIiIiIiopbocAVAoWCs6ps/U3lAO5sNLkWz49zxLsxbvhcLSnKBsEz++l1uoi1P6VZZ4Wv56ChOFd0V1KvIBZvyV2N5QMBSP3CbDS5/GOHTwtdbyYb+013sokLzf8Bg/AH1oIOlQmzyvX6Kt1pINvTHdhGWGyUAsMGGXeyetqBgViUuOM3I5yK3A9WpMqXs1/8e85qxGSqlz4Dcp0Od57QDAUpTkOsATAalLK9smJ8qteyoSTgnsiEAACAASURBVKX0kIYxqejq0PC5R/FrfFg+B7kdhCuORQHd+cvthNVdOmo/aula8jehRQEREREREdWu4xUAGFhGauO01HTeMQ9spCr0vZam4PWVBxx8hUnF1GaFvvqjhUJ3oU/4vENuRg3vhurLqTT1EzYwD4fFAovlGDZlR2rNCPlAobAEkwJSYTC3/lJ3hlH4fYflsRAKBbcYioUeG2yIAaaFxAEspzZwOlruHtF/uI0pScKUnBDy/x8P49BXZQT3Cvsf9sUQixWblEuw9ccQ66/U/F+TxnUeyzguhS4WscK5eAV4N1zlArApHybxSt7fqB++w2LLkSrpo8tz/Tgs9bkvk6a88MXm8aqGuEpT2/Jggkbnvoa0UaareXpImPppAyjms2Nb42MAFCs5HPL5wMZPJi1v1OfP9DqtdtjhSbiA21WQEBERERFR3R4JIYTZCisrK1hbW2tXeDomtzMDR8arHgyO6M7LYWfGgYzXaLaCuyqJkCUMW6q2rj6BQABv3rxpfbCIiIiIiB64zrcA6JBkSPkVu9Bk22RgOKK7IYmQsutEoevDvcq6ZjNfEBERERFRy/yj0wHolIGXG4DDAct84T98h8jfeuRBolYbgJx1LShn3fztB81sk2TIglG/CxupZTb/JyIiIiJqs6oVAN9++207wtF+0hS281OdDgVR3aSpbdzXrDuwnEd+ub5tHuw9iIiIiIiozap2AXjy5Ak+ffrUjrAQEal8+vQJT5486XQwiIiIiIgehKqDAALAu3fv8PXrV/z999/tCBMREb777js8fvwYP/74Y6eDQkRERET0IHTtIIBEdHex8E9ERERE1HxVWwC8e/cOjx8/xvPnz9sVJiIifPr0CV+/fmUlABERERFRk1RtAfDlyxcW/omo7Z4/f44vX750OhhERERERA9G1QqAi4uLdoSDiEiH9x8iIiIioubhGABEREREREREXaAJFQBJhCwWWAx+oSQA5LAzY8HMTu72h7prcjuYsczgzkUtGYLFEkJS++9GmMXxtvuuRaW4tOTY9eXV3M5MIa+3OA2aQo5byCCgyVDrrs9kyAKL0UGJiIiIiKjtmtYCwHeYRz6v/i0PNGvvtZArIljWaCWmcVkS7+djhXy/jNtl9Vanaw47Mw7MxwyOHLJg1N+q4xIRERER0V3Shi4AEqa289ieklp/qHaTprCd38ZDjFpJN8SxYS7YbJ0OQxW5HcxYHJjv98GnWiBXOoye+uBzdShsRERERETUVm2oAFA0q87tYMYSQiik7CKgbEptgWVmBxUbI2ubfZeap+ewMzMKPwD/qOJLajKk6pKgbuYsh0teNoNQaMb42Lqm5tr4KJvHq7tDqOKn+LyrbRZt2gQ7t4MZSzmc5dWU4W+gGXoypIpvbmdG/3coWT2NAWQU58+0KXnFuBTSpMIyM8pjq7+gm6dPTXmukH/0X+aTCFlG4UcM845ynFVxUG6UDMEyE0Joxihuxulqmh7KdCzst3K62+BN5ZFfHtYtGT7MI7/9EjXVYVQ6d4X8EQrNGMddtb3+OmJrEiIiIiKi9mlaBYB/VN3/v3KBxI9TW6rcRSAZgmO+H4eFbgOH/fNw1F0qkDC1fQgf5K4IcteDJEKjp9hIFbokHPoQm39fKoDkdl5hHhtI5fPI572A36B9NAAMDMMHP45LGx5jN+bC5LD2k7hckDvdkOOWT23gdFQuKEnDk3D5jwvHTuL41KX+22+0v0IcHPPoL3avOOzHvEMuROV2XmG+/7DQ3SKFDZcf4Xr6cQ8MwxfbxXFODvvxLuCC8u8YfMPKhu1GaQwAfuziJ0Uav6pQeK8cFyRDGD0tnos8Dn0xzL+vJQ/4MZ/xlo7tHy0XTE3Tp5Y8lwzBMgocGnZlGcByvpwW21MScjszijgcwucfVV8DMT/gzSOva01hkK6m6ZHDzqt5oJjPTLKuvPsBDBi23hjAQM39FtTnLrWB8rmTIwc/vKV87/KP6gv20jAmXdrryIfhtnYTIiIiIiLqbi0bA6Byk391YTd57Idr42WpD/XAyw1F4fg2BrCsKGzlMqeKZXIB1zU5DKmw7suNSu2gBzDsA/zFkksmg5jPq28SXyjQeIsLpCl4fTHsHucAyYZ+nCKTA5DL4LTfC6+v8HfyGH7XJIzL/8fwQ1FIGlgu9TeXpraRL5VMM8iYFQIN2WBzxZDJFLbHJLyTkP+uq3CmiLPNhoqtyU3igoFl5LenCuciB9WpMuXCxsvCDgdeYsNVSG+Yp0/y2A/4hst5bjmvWBfA7qtC4b/Wvv3G+Sm2e6xoWVBHYdcsPbQVUAMvUTHrNovm3ElTXnWlmPI8SDb0G+5EwvCkq3Qd5Y53EVOcAyIiIiIiar0OTwMoF25i845y6wHHPGLFwvIt961sAv5qV7lMLhD222rr2K6slEge+zVfxou7zCAGP0YVrSBG/UAsk4FciSAXTnPHu4DNBpsN8t+ZU0XBURODzCngshk30VZ1bwjjtO5CoKJAljyGv9+GAVu//Hcm0/TCmWlcVM3LX2HXaB1D/SifQgk2ZcmzYvrIec5l0nk/FgNcdbWoqC8/VWWWHpkMYqp4t57puauDsiVMJqNtYUJERERERK3W4QoAudDmKjZnLv2aMOhc8j3mY75SM+9tr7J0aIPNBZzWWstQar6cxLG/wpdcmw0ulI9X+hW+LA8M+xDLZJDJAJPDEqThSSBzjONdVGj+D0i2fiCWQUa3JIedsF+Rbj9hsraYaKI1CddpBsnMqVwYGxiG7zSDnUqVHLdQOS5A8v08Yr7D0rn3Gn9CrkL5pdwsfeQ8J1fMGHNt/ITtnzaAit0ZtOrMT1WYpofNBldTKshqZ3bu6ttRDdcRERERERG1TIcrAAoFY1Xf/JnKA9rZbHApmh7njndh3vK9WFCSC4Rl8tfvchNteUq3ygpfy0dHcarorqBeRS7clL8aywMClvqB22xw+cMInxa+3ko29J/uYhcVmv8DBuMPqAcdLBVik+8Np3irSrKhP7aLsNwoAYANNuxi97QFhbMqccFpRj4XuR2Ea56WTtmv/z3mNWMzVEqfAblPhzrPaQcClKYg1wGYDEpZXtkwP1Vq2VGTSukhDWNS0dWh4XNfD825y+2E1d05ala+jvxNaFFARERERET16XgFAAaWkdo4LTWdd8wDG6kKfa+lKXh95QEHX2FSMbVZoa/+aKHQXegTPu+Qm1HDu6H6cipN/YQNzMNhscBiOYZN2ZFaM0I+UPhajkqD9QHFwdz6S90ZRuH3HZbHQigU3GIoFnxssCEGmBYSB7Cc2sDpaLl7RP/hNqYkCVNyQsj/fzyMQ5/5V+1K+x/2xRCLFZuUS7D1xxDrr9T8X5PGdR7LOC6FLhaxwrl4BXg3XOUCsCkfJvFK3t+oH77DYsuRKumjy3P9OCz1uS+Tprzwxebxqoa4SlPb8mCCRue+hrRRpqt5ekiY+mkDKOazY1vrxwDQnDvTa7QK+TrC7SpHiIiIiIioIY+EEMJshZWVFaytrbUrPB2T25mBI+NVDwZHdOflsDPjQMZrNFvBXZREyBKGLVVbN59AIIA3b960PlhERERERF2g8y0AOiQZUn7FLjTZNhkYjuhuSCKk7DpR6Ppwb7Ku2awXRERERETUUv/odAA6ZeDlBuBwwDJf+A/fIfK3HnmQqNUGIGddC8pZN3/7QTPbIBmyYNTvwkZqmc3/iYiIiIg6oGoFwLffftuOcLSfNIXt/FSnQ0FUN2lqG/cx6w4s55Ffrm+bB3v/ISIiIiLqgKpdAJ48eYJPnz61IyxERCWfPn3CkydPOh0MIiIiIqIHo+oggADw7t07fP36FX///Xc7wkREXe67777D48eP8eOPP3Y6KEREREREDwYrAIiIbokVFkRERER0H1StAHj37h0eP36M58+ftytMRET3zqdPn/D161dWAhARERHRnVV1DIAvX76w8E9EVMXz58/x5cuXTgeDiIiIiKiiqhUAFxcX7QgHEdG9x/slEREREd1lVSsAiIiIiIiIiOj+a0IFQBIhiwUWg18oCQA57MxYMLOTu/2h7prczv/f3p2H13UV9sL+2Y6H2BmsTCLTyUATHEIYJYZEAUJAAUEpsaAlMcPHvertbctHbZc2CdwKELc3QCFy+3WuWnpJnVLApuVeBAhMIIgySEBCQjCETCKTQhLFSew4iYfvj3MkHcmaLDmW5f2+z6Mn0Tl777PW2vvo8frttdbOqppVOeCq1tOempr29Iz+/+mYqI4zPfZUjFeXp+Wz9+5a7d+wqnKtP81t8DQYLvvIn6f/e1r+e9E+WYP1tKdm1YbsWZryOZp0/2k5iP9WAQBA9uEIgNaugQwMjPxZU7+vjj4VU+xYMAPaeFhPrmnprFz3azKzS33/t2tt8/qR39eu1iStWd1cu/8KMZ6e9tQ0to3xRn82rFqRls79XiIAADgo7IcpALVpXj+Q9QdCx2Jfq23O+oH1ORirNqQIdZy2ppRKs12GfaEn7Y1tae2aaZCxD0rSXpOaxt60tjaNfKN/Q1bVrEhLXWtaZ6doAAAw5+2HAKBqWG3/hqyqaU97e/UUgVHDkccc9lsxetj30PD0/mxY1Zi2JG2NVXdSe9onGN5cLlf5vVVpb1819mfvMdR8dH2qh8ePnA4xon5Vt3d72mv2+H3cYcf9G7KqZricw5tVl38aw9BHDbHu37Bqz9/beyZv4yR9VedvwuHT49al0ibjvDeR6s8eeQd94vaZ0jVXuX72vDPfk/aaxrSlMy0rhus8og7VO/W0p2ZVe9pXjVW3sdt1wvaobsfKcYfafUQbT21UQf+GdWlr6silE/X+Rx13uH6V70N7e9X7o67F6u9he/fEhWnoysDA+ly6R7BSyurNAxlY0zB5hTLB+a18n9ur2nfMa3aPKQg9aT8Qp/sAAMBe2GcBQFvjVOcSt6W3tHl4ikBPe1a01KWrMhS5q64lK/Z6LHRtmtd3pTXlqQjlqQc9aW/sTcfm4SHOnS3XDHVM+jesTUs6snlgIAMDq5O2ccYV1zekNW3pHtqxOxs7m7KyYfQt8XJHrrejXLeBzR3pbSx3GGobVqaprbvy2T3p7m0a+XvbWMer1GFFS+oGp1d01aVlRblz1b9hbVrquipDuDeno6kt6/amd1LfkNbOjenuL5e9e2PSlOrfO9PaUN0jHKuNk6QtG3NVVRuvHaeTNH5d0tOext7BczGQrtbOtFwzlWugLS19q4c+u61xuIM2YftM5ZrraU9NY9I15lSW+qwZGG6L9c216d+wqqoOXWltaxz5HehsS1YPZGCP0RRjtOuE7dGfDWtbksHrbMSlW35vqI03d6S3cbJgqDKVYXVzxh/ksedxm9rWZc/qDbd143AKVxldUN53c6k3Yw3uH2rZ+nFSiNr61E91FMqI87s5HRl9fof/Bo17zY74fiTp6U5b08qM+TUFAIA54mlbA2D8If8jO7s93W1p6rh0aOhx/aUdVZ3jmajPmqrOVn9fb9V75Q5u08qGSqenPpd2NO15iMp7Da1J22AC0NeXztbVew6J7+/Oxs6qOdS1zVnd2pmN3f1JbSl16U1ff5L+vvTWrc7q1srvE3UserrTltYM9cPr1wzNN69tXp+BoZ5pX/r2el50KaWmzvT1VfbPyqxemfLvlbo0TGk8eFWdS6WM14oT1SX1azKwfrAD2p8Rp2pCTekYvG1df2k6mirtnYnbp6e7LWltGL7m1gxUbZtk49pK53+qQ+LHvp46N3ZX3UGeantm4vYYHUDVX5rRl27busqd69rmrJ+sDqPPy5jK03iGm7Mvoy+34e9wbUp14x+/tnn10z6Ef+T5rU3z6tZkxN+UqVyz9WloHb6eerrbqs4vAADMTbP8GMBy56azZcXw6IEVLekc7CzP8NjVQ8DXbqx+r9whrCtN7Z/z1aFET3fbqDvjg4fsS2fa0lg1CqKxLens60t1Z6K/e2NSKqVUSvn3vt5xOxb9fb1JUyljTjMfMb1hXXrH7XmPpzYNK5vKwUZPd9rqSqkv1ZV/7+tLZ1UHeV+YsC4jhpevzcaxthlTXYZP4eiO53jtU77mmiaYvN/ZmTTt1YiKvbueJjVRe/T1pXNEvavVpnl95Y73VKbUpHJepnCuR0xJWNc7ftAz1vFHnPdSSnt9re6Nyc/vVNU3tFZCnP709Y43SgcAAOaOWQ4Ayp22psHhzEM/+2DRuZ5r0tLZOjTMe/3q6t5huRPSO9WUobYhK5va0t3Tk+62ce6WlkppyvDnDf1UbpvWN7Sms68vfX3Jyoba1DasTPq6070x43Ysakt1SWdf+vZ4pz8b1rVVtdtVWTm1moyq1so09falp6+3HGrUN6S1ty8bxgs5ZmD8uiQ917Sks7Vr6NyPOFVTVn2nfKL2KV9z5WBmbE0dV2X9VR3JuNMZRtvL62kSE7ZHqZSmCQOy8t36gcGpCJ0tWTtuJSojFybrLPdvyLq2puHpNFdN/Wrb87xPZ7TK3pj8/E7Z4DSAnu5sjOH/AADMfbMcAFQ6xiPm5q8af0G7UilNVfPx+7s37jEUeaTBjlK5QzisfPd7eIh2eR70+Cp3yxsb01s1XWHkJuWQYPiucXlBwKF54KVSmtrWZV1v5e5tbSl1vRsn7ljssf7AyEUHhzo5PddM79FotaXUdW7MuvKghCSllLIxG3v3Yrj6VE1Sl/T2lc9F/4asm2iS+AjV8/qvScuotRnGa5/6hpFDwkcvgJgkqW1OOQOY+A56ZeMxr6cZDRkfrz1qG7KyaqrDyLqNfpxgOZgYf2RCX/rGXM9iLIPTRSoBxVTrUTnvw+epe8I1APaFkee38t2f1oiW8sidlsaWdNaVDP8HAGDOm/UAIPVrsrmjd2jo/IqWpGPzOPOWa5uzunV4wcG1WVk1n7gyV7+x0umuzAlvWVEeRp3VHSPunNY2X1U1VLo7peqJ1HusAF65W56JOkvlxdzqhqYzNKattWt4LYRKx60zg8OhSymlM5mwk1ifNZs70ts4PD2irmt9mmsH5zU3ll/vbkhX63TuepY7OJ2dg0PKa1Oq60xn3XidpVFtvJefNXZdKlMsOivnYm2yuqNpuAM8odaszNry8Rrb0to1OHJkkvbZ45qrS9f6PRfBq21ePckd9Opt15cXExzr3E+hbarbdeL2qE3zVR3J4HXWXapaA2BUG9esSEtd1xiLGFb092VKyy2M+t51N3SltSoQmKxuazZXlXddMvoJf/vciPO7orzY57iNMMmhGsp/Yfb1iBgAAJgN83bv3r17og0uu+yyXHHFFfurPLOmf8OqrOhbPXIxODjg9WfDqhXpWz3W0wqYsf4NWbWiL6unuCDklVdemY9+9KNPe7EAAGA6Zn8EwCzpaa++i10Zsr0PFg6Dp9eo59FXpj64dJ8e/d0b9/mCmAAAMFsOme0CzJb6SzuSFStS01J5obUrAzNeeRCebvUpX7o1Gb50B2a+aCajlEdWlBcS1f0HAODgMGkAcNppp+2Pcux/tc1ZP9A826WAvVbbvD4u3adb+WkKe9vMB+3fSwAADgqTTgFYtmxZNm3atD/KAjBnbdq0KcuWLZvtYgAAwLgmXQQwSa6++ups27Ytt9122/4oE8Cccvrpp2fp0qV5+9vfPttFAQCAcRV2DQCAvaGTDwDAXDfpCICrr746S5cuzYUXXri/ygRwQNq0aVO2bdsmBAAAYE6adA2ArVu36vwDJLnwwguzdevW2S4GAABMy6QBwO23374/ygEwJ/ibCADAXDVpAAAAAADMffsgAOhJe01Nasb4ae9Jkv5sWFWTVRv6Z/5RB5r+DVlVsyoHXNV62lNT056e0f8/HRPVcabHnorx6vK0fPbeXav9G1ZVrvWnuQ2eNiO/u+37pRLlzxzrs4bbc+TPPv/bsT+uWwAAOADtsxEArV0DGRgY+bOmfl8dfSrG71iwr2jjYT25pqWzct2vycwu9dlo1/5sWNWYttau8vd1c0d6G2c3zKptXj/yb0hXa5LWrG6unb1CAQDAQWQ/PAawNs3rB9L89H/Q/lfbnPUDB2XNhhWhjtPWlFJptsswTf3d2djZmq71lejigDvPPWlvbEtr18AMwxUAAGDQflgDoGpYdf+GrKppT3v7yCHHI4b+rtqQcW9Cjh66OzQ8vXI3M0lbY9Wd1J72CYYSl8tVfm9V2ttXjf3ZewwXHl2f6rumYw+p7t+wKjVVt3d72mv2+H3cYc79G7KqZricw5tVl38aw9B72kfUt3/Dqj1/b++ZvI2T9FWdvwmHa49bl0qbjPPeRKo/e+Qd9InbZ0rXXOX62fPOfE/aaxrTls60rBiu84g6VO/U056aVe1pXzVW3cZu1wnbo7odK8cdavcRbTz+qIL+7o3pbCplyvnFqOMO16/yfWhvr3p/1LVY/T1s757ix61LW1NHLp2w9z/+FIbyd6y96v2xrqly2av3G/1dBQCAg8k+CwDaGqc6b7ctvaXNw1MEetqzoqUuXZVhv111LVmx1/8Ar03z+q60pjwVoTz1oCftjb3p2Dw8nLiz5Zqhjkn/hrVpSUc2DwxkYGB10tY59qHrG9KatnQP7didjZ1NWdkwelhyuSPX27F5jyHVtQ0r09TWXfnsnnT3No38vW2s41XqsKIldYPTK7rq0rKi3Lnq37A2LXWV4dsDm9PR1JZ1ezN+u74hrZ0b091fLnv3xqQp1b93prWhuvc1VhsnSVs25qqqNl47Tud9/Lqkpz2NvYPnYiBdrZ1puWYq10BbWvpWD312W9UQ9gnbZyrXXE97ahqTrjGnstRnzcBwW6xvrk3/hlVVdehKa1vjyO9AZ1uyeiADA+szckT7GO06YXv0Z8PalmTwOhtx6ZbfG2rjzR3pbZwgGKorpa998rBgrOM2ta3LntUbbuvG4RRu6E7+wMBANpd60zbexwypTK9Y3ZzxB/+P+r6NOv9JkrbelDZXteHa0UFPbRpWNqVt+Ms9xnUPAAAHj6dtDYD1487bHdnZ7eluS1PHpUPDfOsv7ajqHM9EfdZUdbb6+3qr3iv/Q79pZUOlg1GfSzuaxj1OQ2uGOwl9felsXZ09qlcZUj00X7m2OatbO7Oxuz+pLaUuvenrT9Lfl9661VndWvm9pzttTSszdv+/O21pzVB/pH7N0Hzz2ub1GRjqmfalb5z8YnyllJo609dX2T8rs3plyr9X6jK1flBVnUuljNeKE9Ul9WsysH6ws9efEadqQk3pGLxFXH9pOpoq7Z2J26enuy1pbRi+5tYMVG2bZOPaSud/qnP7x76eOjd2V3U4p9qembg9RgdQ9Zdm9KXbtq7S0a1tzvqJ6tDWmO6GgfE70EPK03iGm7Mvoy+34e9wbUp1VW+MOu+1zavTOn7Nx9xnTGO2w/D5T5JUfU9LpbGvzBHh3F5d9wAAMPfM8mMAy52bzpYVw6MHVrSkc7CzPMNjVw8BX7ux+r1yh7CuNLXFxapDiZ7utrHvEPb1pTNtaawaBdHYlnT29aUcIpQ7J/3dG5NSKaVSyr/39VZ1HEfVoK83GW+Y9ojpDevSO27PezxVdz97utNWV0p9qa78e19fOqs6yPvChHUZMbx8bTaOtc2Y6jJ8Ckd3PMdrn/I11zTB5P3OzqRpr0ZU7N31NKmJ2qOvL50j6l2tNs3rN6cjLVkxlSk11UPsx+pAVxkxJWFd7/hBz+iq7HHeSxmnLz5yn8muvwnbYS/UNmRlU2WEz9Nw3QMAwIFklgOAcqetaXAY79DP6GHS09BzTVo6W4eGea9fXd07LHdCeqeaMgx1EnrS3TbOHcJSKU0Z/ryhn8pt0/qG1nT29aWvL1nZUJvahpVJX3e6N2ac4f9Jbaku6exL3x7v9GfDuraqdrsqK6dWk1HVWpmm3r709PWWQ436hrT29mXDeCHHDIxfl6TnmpZ0Dq5GP7A+I07VlFXfKZ+ofcrXXDmYGVtTx1VZf1VHMu50htH28nqaxITtUSqlacKArHy3fmBwKkJnS9aOUYna0tiNPGaI0b8h69qahqfTXDX1q23P8z7ZaJXKaIrJVlectB2mXMKhIGzccA8AAA4SsxwAVDrGI+bmrxp/QbtSKU1V8/H7uzfuMRR5pMEOQrlDOKz8j/7hIdrlOcfjq3QSGhvTWzVdYeQm5ZBg+K5xeYGyoXngpVKa2tZlXW/lrmVtKXW9G7Mx4wz/T8ZYf2DkooNDndieazJh8cetVil1nRuzrjwoIUkppWzMxt6nYRj0JHVJb1/5XPRvyLrJJ4lXVM/rvyYto9ZmGK996stzOkZec6PvlNc2p5wBTHAHfXjjMa+n8UZ2TMl47VHbkJXVd+pH1G304wTLwcSYnfr6hrR2tmRoaYFKYDb+eR+cLlIJKKZaj8p5Hz5P3ZOsAdCXvjHX2BhlzHaYwn5jHmplmtoa09g2h5/qAAAAUzDrAUDq12RzR+/Q0PkVLUnH5nHmLdc2Z3Xr8IKDa7Oyaj5xZa5+Y6XTXRnS3LKiPIw6qztG3DGsbb6qaqh0d0rVE6lHrZCfVDoJmaiDUV7MrW5oOkP5GetDayFUOiydGRwOXUopncmEncT6rNnckd7G4ekRdV3r01xbm+ZyQ5Rf725IV+vEd7XHO35Da2c6OweHUtemVNeZzrrxhkGPauO9/Kyx61KZYtFZORdrk9UdTcMd4Am1ZmXWlo/X2JbWrsGRI5O0zx7XXF261u+54Fxt8+px76CPVtu8vryY4FjnfgptU92uE7dHbZqv6kgGr7PuUtUaAKPauGZFWuq6xljEsLLtQFcyuG1j75S/d90NXWmtCgQmq9uazVXlXZe0TjQFoL8vU1sCYtT3bcT530u1DVnZlGS8tTgAAOAgMW/37t27J9rgsssuyxVXXLG/yjNr+jesyoq+1SMXg4MDXn82rFqRvtVjPa2Aqeppr8m60uYphTZXXnllPvrRj+6HUgEAwL41Z1jD0gAAIABJREFU+yMAZklPe/Vd7MqQbeN/OeD1pL166kRl6LtLdyYmehQnAAAcPA6Z7QLMlvpLO5IVK1LTUnmhtSsDM155EJ5u9SlfujUZvnQHZr5oZlH1tKemsbxg5BptCADAQW7SAOC0007bH+XY/2qbs36gebZLAXuttnl9XLr7SP2aDAys2atdDtq/iQAAHPQmnQKwbNmybNq0aX+UBeCAtmnTpixbtmy2iwEAANMy6SKASXL11Vdn27Ztue222/ZHmQAOOKeffnqWLl2at7/97bNdFAAAmJYpBQAAAADA3FbYpwAAAABAkQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAAACgAAQAAAAAUgAAAAAAACkAAAAAAAAUgAAAAAIACEAAAAABAAQgAAAAAoAAEAAAAAFAAAgAAAAAoAAEAAAAAFIAAAAAAAApAAAAAAAAFIAAAAACAAhAAAAAAQAEIAAAAAKAABAAAAABQAAIAAAAAKAABAAAAABSAAAAAAAAKQAAAAAAABSAAAAAAgAIQAAAAAEABCAAAAACgAAQAAAAAUAACAAAA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"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a7706257-9701-4074-a932-dfe154d47535","ELEMENT":"a7706257-9701-4074-a932-dfe154d47535"}]},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-114554.508.png"}],"errorIndex":0,"end":"2020-11-04T10:45:55.101Z"}],"end":"2020-11-04T10:45:55.101Z","duration":6269},{"type":"suite","start":"2020-11-04T10:45:55.104Z","_duration":0,"uid":"suite-0-2","cid":"0-0","title":"STEP 3 - fire virtual page view by clicking button","fullTitle":"STEP 3 - fire virtual page view by clicking button","tests":[{"type":"test","start":"2020-11-04T10:45:55.104Z","_duration":8528,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"72cb2759-7353-4d88-a4fd-619b286beaa1"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/72cb2759-7353-4d88-a4fd-619b286beaa1/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/72cb2759-7353-4d88-a4fd-619b286beaa1/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:03.632Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:45:55.104Z","_duration":8528,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"72cb2759-7353-4d88-a4fd-619b286beaa1"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/72cb2759-7353-4d88-a4fd-619b286beaa1/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/72cb2759-7353-4d88-a4fd-619b286beaa1/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:03.632Z"}],"end":"2020-11-04T10:46:03.632Z","duration":8528},{"type":"suite","start":"2020-11-04T10:46:03.632Z","_duration":0,"uid":"suite-0-3","cid":"0-0","title":"STEP 4 - fire virtual page view to tag 10 only by clicking button","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button","tests":[{"type":"test","start":"2020-11-04T10:46:03.632Z","_duration":4744,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"58ae9bd7-a876-4fee-9068-b481f409ae35"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/58ae9bd7-a876-4fee-9068-b481f409ae35/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/58ae9bd7-a876-4fee-9068-b481f409ae35/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.014},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.014,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:08.376Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:46:03.632Z","_duration":4744,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"58ae9bd7-a876-4fee-9068-b481f409ae35"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/58ae9bd7-a876-4fee-9068-b481f409ae35/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/58ae9bd7-a876-4fee-9068-b481f409ae35/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.014},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.014,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:08.376Z"}],"end":"2020-11-04T10:46:08.376Z","duration":4744},{"type":"suite","start":"2020-11-04T10:46:08.376Z","_duration":0,"uid":"suite-0-4","cid":"0-0","title":"STEP 5 - fire virtual page view to tag 11 only","fullTitle":"STEP 5 - fire virtual page view to tag 11 only","tests":[{"type":"test","start":"2020-11-04T10:46:08.377Z","_duration":4763,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"115cc3fa-50fc-4a09-b503-29b19badd5df"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/115cc3fa-50fc-4a09-b503-29b19badd5df/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/115cc3fa-50fc-4a09-b503-29b19badd5df/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:13.140Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:46:08.377Z","_duration":4763,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"115cc3fa-50fc-4a09-b503-29b19badd5df"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/115cc3fa-50fc-4a09-b503-29b19badd5df/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/115cc3fa-50fc-4a09-b503-29b19badd5df/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:13.140Z"}],"end":"2020-11-04T10:46:13.140Z","duration":4764},{"type":"suite","start":"2020-11-04T10:46:13.141Z","_duration":0,"uid":"suite-0-5","cid":"0-0","title":"STEP 6 - fire virtual page view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only","tests":[{"type":"test","start":"2020-11-04T10:46:13.141Z","_duration":4700,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"bda9628d-2fec-4432-aa21-d07b7e385f19"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/bda9628d-2fec-4432-aa21-d07b7e385f19/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/bda9628d-2fec-4432-aa21-d07b7e385f19/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.015},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.015,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:17.841Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:46:13.141Z","_duration":4700,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"bda9628d-2fec-4432-aa21-d07b7e385f19"}},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/bda9628d-2fec-4432-aa21-d07b7e385f19/click","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/bda9628d-2fec-4432-aa21-d07b7e385f19/click","body":{},"result":{"value":null},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.015},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.015,"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:17.841Z"}],"end":"2020-11-04T10:46:17.841Z","duration":4700},{"type":"suite","start":"2020-11-04T10:46:17.841Z","_duration":0,"uid":"suite-0-6","cid":"0-0","title":"FINALIZE - get Proxy logs to confirm tag firings","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings","tests":[{"type":"test","start":"2020-11-04T10:46:17.842Z","_duration":14707,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:32.549Z"},{"type":"test","start":"2020-11-04T10:46:32.550Z","_duration":43,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:32.593Z"},{"type":"test","start":"2020-11-04T10:46:32.594Z","_duration":79,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T10:46:32.673Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:46:17.842Z","_duration":14707,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:32.549Z"},{"type":"test","start":"2020-11-04T10:46:32.550Z","_duration":43,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:32.593Z"},{"type":"test","start":"2020-11-04T10:46:32.594Z","_duration":79,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T10:46:32.673Z"}],"end":"2020-11-04T10:46:32.673Z","duration":14832},{"type":"suite","start":"2020-11-04T10:46:32.674Z","_duration":0,"uid":"suite-0-7","cid":"0-0","title":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","tests":[{"type":"test","start":"2020-11-04T10:46:32.674Z","_duration":49,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:32.723Z"},{"type":"test","start":"2020-11-04T10:46:32.723Z","_duration":61,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.784Z"},{"type":"test","start":"2020-11-04T10:46:32.785Z","_duration":60,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.845Z"},{"type":"test","start":"2020-11-04T10:46:32.845Z","_duration":34,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.879Z"},{"type":"test","start":"2020-11-04T10:46:32.880Z","_duration":44,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.924Z"},{"type":"test","start":"2020-11-04T10:46:32.924Z","_duration":42,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.967Z"},{"type":"test","start":"2020-11-04T10:46:32.967Z","_duration":45,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:33.013Z"},{"type":"test","start":"2020-11-04T10:46:33.013Z","_duration":55,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T10:46:33.068Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T10:46:32.674Z","_duration":49,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T10:46:32.723Z"},{"type":"test","start":"2020-11-04T10:46:32.723Z","_duration":61,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.784Z"},{"type":"test","start":"2020-11-04T10:46:32.785Z","_duration":60,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.845Z"},{"type":"test","start":"2020-11-04T10:46:32.845Z","_duration":34,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.879Z"},{"type":"test","start":"2020-11-04T10:46:32.880Z","_duration":44,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.924Z"},{"type":"test","start":"2020-11-04T10:46:32.924Z","_duration":42,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:32.967Z"},{"type":"test","start":"2020-11-04T10:46:32.967Z","_duration":45,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T10:46:33.013Z"},{"type":"test","start":"2020-11-04T10:46:33.013Z","_duration":55,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"1cf97b9989534ac582ab3606eaa49476","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T10:46:33.068Z"}],"end":"2020-11-04T10:46:33.068Z","duration":394}],"title":"Test Report Title","options":{"stdout":true,"outputDir":"./reports/html-reports/","filename":"report.html","templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"reportTitle":"Test Report Title","options":{"logLevel":"warn","outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}},"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}},"showInBrowser":false,"useOnAfterCommandForScreenshot":false,"LOG":{"category":"default","context":{}},"logLevel":"warn","debug":true,"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}}}