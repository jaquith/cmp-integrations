{"info":{"type":"runner","start":"2020-11-04T11:35:27.978Z","_duration":49609,"cid":"0-0","capabilities":{"goog:chromeOptions":{"debuggerAddress":"localhost:49200"},"browserVersion":"86.0.4240.75","timeouts":{"pageLoad":300000,"implicit":0,"script":30000},"strictFileInteractability":false,"acceptInsecureCerts":true,"webauthn:virtualAuthenticators":true,"networkConnectionEnabled":false,"chrome":{"chromedriverVersion":"86.0.4240.22 (398b0743353ff36fb1b82468f63a3a93b4e2e89e-refs/branch-heads/4240@{#378})","userDataDir":"/var/folders/qv/8dr6ylkn3c98dm4r414wh_0h0000kr/T/.com.google.Chrome.oGTViD"},"browserName":"chrome","setWindowRect":true,"proxy":{"httpProxy":"13.57.103.60:64988","sslProxy":"13.57.103.60:64988","proxyType":"manual"},"pageLoadStrategy":"normal","platformName":"mac os x","unhandledPromptBehavior":"dismiss and notify","sessionId":"be34d26958f547c885cac9b32e0ca4be"},"sanitizedCapabilities":"chrome.86_0_4240_75.macosx","config":{"protocol":"https","hostname":"ondemand.eu-central-1.saucelabs.com","port":443,"path":"/wd/hub","specs":["tests/specs/examples/usercentrics-v2/noview_no-utag-edit_opt-out.js"],"suites":{},"exclude":[],"logLevel":"warn","logLevels":{},"excludeDriverLogs":[],"bail":0,"waitforInterval":500,"waitforTimeout":20000,"framework":"mocha","reporters":["spec",[null,{"outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}}}]],"services":[["sauce"]],"maxInstances":1,"maxInstancesPerCapability":100,"filesToWatch":[],"connectionRetryTimeout":40000,"connectionRetryCount":2,"execArgv":[],"runnerEnv":{},"runner":"local","mochaOpts":{"timeout":67000,"ui":"bdd","color":true,"retries":0,"specFileRetries":0},"jasmineNodeOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[null],"onWorkerStart":[],"before":[null,null],"beforeSession":[null,null],"beforeSuite":[null,null],"beforeHook":[],"beforeTest":[null,null],"beforeCommand":[],"afterCommand":[],"afterTest":[null],"afterHook":[],"afterSuite":[null],"afterSession":[],"after":[null],"onComplete":[null],"onReload":[null],"beforeFeature":[null],"beforeScenario":[null],"beforeStep":[],"afterStep":[],"afterScenario":[null],"afterFeature":[],"specFileRetries":0,"baseUrl":"","user":"caleb.jaquith","key":"6fab5239-14b0-49cf-8488-21839bd22c08","coloredLogs":true,"screenshotPath":"./errorShots/","host":"https://ondemand.eu-central-1.saucelabs.com","region":"eu","capabilities":[{"browserName":"chrome","browserVersion":"latest","platformName":"macOS 10.15","teal:enableProxy":true,"teal:enableTrace":false,"teal:runCrossBrowser":true,"teal:runRemotely":true,"teal:showDurations":true,"teal:enableSauceConnect":false,"teal:hasReporterContext":true,"teal:hasRunnerContext":true,"teal:reporterContext":"<p>This report has been generated by Tealium's automated testing platform.</p>\n<p>These tests will have been created specifically for your project by a Tealium Implementation Engineer to verify a configuration or use case.</p>\n<p>The intent is to document the tests run on the completed configuration (acceptance tests). It can also serve as a limited regression test as work continues, to ensure that future projects don't break previous ones.\nFor more information, see the <a href=\"https://jaquith.github.io/webdriverio-standalone/\">developer documentation</a>.</p>","teal:summaryContext":"<p>A suite of tests, intended to ensure the integration between Tealium iQ Tag Management and the Usercentrics Browser SDK (CMP v2) works as expected in multiple potential configuration cases.</p>\n<p>Includes some common error and misconfiguration cases.</p>\n<p>Does not include any TCF support, that setting is not checked.</p>","teal:capabilityNumber":1,"sauce:options":{},"teal:specPath":"tests/specs/examples/usercentrics-v2/noview_no-utag-edit_opt-out.js","teal:testContext":"<p>A Tealium iQ setup with the <a href=\"https://docs.tealium.com/platforms/javascript/settings/#noview\">noview</a> setting active, where the TiQ operator has failed to edit utag.loader template (misconfiguration case).</p>\n<p>No tags should fire regardless of user choice, this test confirms the opt-out case.</p>","teal:testTitle":"Standard TiQ Setup, 'utag loader' Template Edit Missing, User Opts Out","teal:helpers":["helpers/specific/usercentrics-v2-general-integration-test-helper.js"],"proxy":{"proxyType":"manual","sslProxy":"13.57.103.60:64988","httpProxy":"13.57.103.60:64988"},"acceptInsecureCerts":true,"teal:opJourneyId":3962,"teal:opRunId":23262,"teal:opInitialActionId":51071}],"sauceConnect":false,"ignoredWorkerServices":[],"specFileRetryAttempts":0},"specs":["/Users/calebjaquith/.git/webdriverio-standalone/tests/specs/examples/usercentrics-v2/noview_no-utag-edit_opt-out.js"],"sessionId":"be34d26958f547c885cac9b32e0ca4be","isMultiremote":false,"retry":0,"failures":0,"retries":0,"end":"2020-11-04T11:36:17.587Z"},"metrics":{"passed":22,"skipped":0,"failed":0,"start":"2020-11-04T11:35:27.978Z","end":"2020-11-04T11:36:17.587Z","duration":49609},"suites":[{"type":"suite","start":"2020-11-04T11:35:27.984Z","_duration":0,"uid":"suite-0-0","cid":"0-0","title":"STEP 1 - initial visit to test page","fullTitle":"STEP 1 - initial visit to test page","tests":[{"type":"test","start":"2020-11-04T11:35:27.985Z","_duration":9280,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-123536.781.png"}],"errorIndex":0,"end":"2020-11-04T11:35:37.265Z"},{"type":"test","start":"2020-11-04T11:35:37.272Z","_duration":92,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:37.364Z"},{"type":"test","start":"2020-11-04T11:35:37.365Z","_duration":5186,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:0175930a7da5000f2421174c92aa03078005707000718$_sn:1$_se:1$_ss:1$_st:1604491539688$ses_id:1604489739688%3Bexp-session$_pn:1%3Bexp-session","expiry":1636025739,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3A_xluVxUyhvFeywpYwVeZOWO_TVKQZLs_.IQ5iJLYKEpWzBXzzrSYVMCspZ25q9URNZwvcDnaeJx4","path":"/","httpOnly":true,"secure":false}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:0175930a7da5000f2421174c92aa03078005707000718$_sn:1$_se:1$_ss:1$_st:1604491539688$ses_id:1604489739688%3Bexp-session$_pn:1%3Bexp-session","expiry":1636025739,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ will run because we can't detect the edit before load, but no tags should be fired."}],"errorIndex":0,"end":"2020-11-04T11:35:42.552Z"},{"type":"test","start":"2020-11-04T11:35:42.553Z","_duration":260,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"result":{"value":true},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"result":{"value":true},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:42.813Z"},{"type":"test","start":"2020-11-04T11:35:42.813Z","_duration":95,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:42.908Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:35:27.985Z","_duration":9280,"uid":"test-00-0","cid":"0-0","title":"should navigate to the page","fullTitle":"STEP 1 - initial visit to test page should navigate to the page","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should navigate to the page","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/url","body":{"url":"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html"},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"url","result":null,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":"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evfuzRNPPMGsWbOUGDe2LqdPn6Zv3754e3sTGBiITqdj1apVDdahoKDg/7d3//Fez4f//+8S5egkP468JY6zkCVZJpqSXwnvGDYx8n6vrHkTXcbF2tjHj/xY2FtsZpjP+Gx+V1bMZVJ+TPVeEys1URORIv0YddIvle8fXc7r26lzTm0y835er5dLF53zep3nj8d5vbp43l7P5+OZzp0759BDD01lZWWuvfba0mMNjc+yZctyxhlnZO+9986BBx6YLl26ZMaMGRst/9prr01lZWX+/Oc/1/r+jBkzcuSRRyZJjj322Nx555156aWX0qtXr+y333458MAD07Vr17z55ptJkl//+tfp1q1bDj744LRv3z5PPfVUreVtOK6bGo977703LVu2zKGHHpo2bdrk6KOPLu378OHD07p16xx++OHZZ5990qtXr1LEqs+oUaPy0EMP5e67794ogNUYNGhQdt999xx22GHp1KlTOnfunHfffTfJuvf3ueeemz322COdO3fOvvvumxdeeCHJujh00UUXZe+9985BBx2UU045pcFtef311zN06NBacSJZd8bHiSeemOeff77Bn0+S999/P/3790+rVq1K/6bUnKly3333pVu3bjnqqKPyla98JV/+8pfTt2/fbHg31AceeCCtW7euNXaXXHJJve9TAAD4IthiAeCRRx7JwIEDS3+uueaaWo+v/z/YO+20U0aNGpU+ffrkuuuuy+TJk/P8889n5syZOf3009O7d+8sXry4zvXUd7r9+PHjkyQPPvhgLr744jz88MMZM2ZMJk6cmAULFuT222/P73//+7z88stZvnx5zjrrrHTr1i1//etfM3LkyEybNq3O5X7zm9/MggULSsufP39+Ro0alTPOOKPWvs2aNSt9+vTJd77zncyePTsjR47Mk08+mTvvvDPHH398Ro8eneXLl+ejjz7K2LFjM3fu3MyaNSuffPJJRo4cmX//93/faN0jR47MT37yk/zqV7/Ke++9l379+uWiiy7K/Pnzc9FFF+Wcc87JvHnz8tprr6Wqqiq33357A7+h2o4++ugkKR3c1hwg1Vz/Pnr06Jx00knZeuutS/u44RgnSXV1dU499dTMnTs3//3f/52HHnoor7/++mbvy+LFi3P99denefPmmTVrVt5555307ds3V111VdauXdvgPlRXV6dnz5556623MmTIkAwZMiRjx47NihUrGhyfK6+8MtOmTcvo0aPzzjvvpFWrVhtdb37DDTdkyJAhefLJJ3P44YfXeuzLX/5yJk6cmCSZPHly+vXrl7POOitbb711pkyZkvHjx6dx48bp169f6XU/c+bMnH/++Xn88cfTtWvXWsvbcFwbGo+pU6fmkksuyaBBg/L222/niiuuyPTp00vLuvzyyzNw4MAsXLgw48ePz5gxYzJu3Lh6x3Dt2rW57LLL0rt373z1q1+t8zlTp07Nrbfemnvvvbe03JkzZ+a3v/1t6TmvvPJKxo0bl1mzZqWqqiq33nprknXx4/7778+IESMyY8aMjc5+2NC9995bZ4jr0aNHrr/++uy0004N/nySXHrppfnjH/+Y0aNHZ8aMGTnppJPSq1ev0qn9M2fOzNe//vW89dZb+eUvf5kRI0ZkypQptZZREypqLjOprq7Ogw8+mLPOOmuT6wcAgH9VWywArFq1KkuWLCn9WblyZb3P7d+/fw499NDsueeeGTZsWLp06ZLq6upMnz49Xbt2TXV19aeeiOuMM87I1KlTU1FRkZdeeikffPBBknX/I//aa69lwYIFueCCC1JRUZFu3bqlR48edS6nVatW6d69e4YNG5Ykefzxx1NRUZEjjjii1vOeffbZJOuu5Z46dWoaN26cTp065Yknnki3bt2SrDvr4IUXXkirVq3Spk2bTJgwIa+++moWLFhQ50HP888/n3bt2uW0005L06ZNM2DAgIwYMSLNmjXLuHHjMnDgwMyZMycvvvhiysrKSvu4OXbbbbcccsghGTt2bBYvXpw//elPOeaYYzJ27NisXr06v/vd73LiiSdu1rIuvPDClJWV5cwzz0ySOiezq29fmjRpkiFDhuThhx/OsmXLMnHixNIZBCtWrNjkur/3ve9lhx12yH/+53+mvLw8zz77bLbddtsGx2fUqFE55ZRTcsghh6RZs2b52c9+lquuuqq0zBtvvDE33nhjHnrooRx22GGb3IaXX345CxYsSP/+/bPnnnumXbt26devXyZNmpT33nuv9LwBAwaka9eumzyFvKHxGDduXMrLy3P++eenefPmOffcc2udVl9ZWZmhQ4fml7/8ZRo3bpxFixbV+9pOkj/+8Y956623GpzHYL/99svEiRNz3HHH5bXXXstf/vKXVFRUZMmSJaXn1FwK0aJFi/To0SPz589Psu59cdRRR+XII4/MrrvumvPPP7/hwfyUli9fnieeeCLf+ta3csghh2TXXXfNJZdcUtrXGjWvm5rwtmDBglrL2WWXXXLKKafkkUceSZI8+eSTKS8vz7HHHvuZbj8AAHyWttgcAOecc069cwBsqOaa2yVLlqS6ujrjx4+vNflY27ZtN3nacpIGPyH+29/+lu985zuZNGlSKioqSp/irl27tnRQ1qZNm9LzDzjggHonYTv77LPz7W9/OzfddFPuv//+9OnTZ6N5CmouA7j66qtrfX/HHXfMDjvskO7du+e5557LmjVr0qNHj2y99dYZO3Zs5s+fn86dO9d5bfSMGTPSsWPH0tdNmjTJwQcfnCQZMWJEBg0alCTp0KFDVq5cudF105vSs2fPPPbYY+nQoUMqKytzzjnn5Pvf/37+/Oc/p7q6Ot26dcvs2bMbXEZlZWXpLIGaOQ3qOkujoX0ZN25cLr744sydOzeVlZWlT4k3PC17Q23atCld99+oUaN06tQp8+bNS6NGjeodn1WrVmXu3Lk58MADS8tp2bJlWrZsWfr6/fffT0VFRR555JHS6fkNqTl4bN++fel7NX+vmaxu/XHalKlTp9Y7Hu+++26qqqpK8wQ0atSo1r7ce++9ueaaazJ48OBcfvnladu2bX7zm99kn332qXNd9913Xzp27Fjrd7OhNWvW5Kabbsrw4cOTJEcccURWrFhR6/dTM99Fsm4ugppoMWvWrBx11FEbjctnpebMoQ4dOpS+V1VVlWTd72KrrbZKZWVlaX6GmhhT178lZ511Vnr16pUFCxbk4YcfTu/evdOkSZPPdPsBAOCz9E+ZA2CjlTZat9rmzZunvLw8Z511ViZMmJAJEybkueeey1VXXZXOnTtv9HONGzfO8uXLS183NFv3lVdemZUrV+bll1/OX//619KB+dq1a0uf6q5/bff6nw5uqEePHikvL8/tt9+eKVOmpFevXhs9p1WrVknWXTtfsy933XVX6ZPlE044IaNHj87o0aPTtWvXdOvWLb///e/zu9/9LieffHKd623VqlWtMyEWL16c733ve3niiScyaNCg3HLLLXn33Xfzhz/8IYcccki9197Xp3v37pk0aVKGDx+e7t2752tf+1oWLFiQW2+9NSeeeGK914P/I+rbl9deey3nnntujj766MyaNSuTJ0/OOeeck6ThwJOsO5W7JjasXr06EydOzF577ZWpU6fWOz7bbrttysvLa53yPXny5AwcOLB01sqPf/zj3HPPPRk5cuRm3RZv9913Ly2nRs0M9nvvvXeS1Dux5YZWr17d4Hh07do1U6ZMSXV1dZJ1Z94888wzSdZNUvfKK6/kuuuuyxtvvJERI0Zk0aJF+cUvflHnutasWZOhQ4fm7LPPbnCbHnjggQwfPjyjR4/OwoUL89hjj6V58+ab9Xrbf//9S/MBJPnM7zJQM+nh+u/tmnWuH/w2x1FHHZWKior85je/yXPPPVfn+x4AAL5IPpcAsL7TTz8999xzT5566ql88MEHufrqq/Pd7353oxnik3VnDsydOzejRo3Ku+++m8GDB9d6vLy8PFOnTs3ChQvTuHHjlJWVpUWLFlm0aFEpAKxatSo777xzjjjiiFx77bUZM2ZMbrvttlq3lHvjjTdy2223lQ6ymjZtmt69e2fw4ME57LDD8qUvfWmjbas5NXjQoEGZM2dOXn755fTs2bM08dyxxx6badOmZfr06fna176Wzp07p7q6OpMmTcpxxx1X59j07Nkz06dPzwMPPJCFCxdmyJAhefrpp0ufCLdo0SLbbLNNnn766dx3332bddbE+vbff/9UVlZm+PDhOeKII1JRUZF27dpl1KhRdc5JsOEY/z3q25eaGfjLy8tTVlaW119/PT/5yU+SrPtdbcodd9yRDz74IDfffHOqq6trzVtQ3/iceeaZGTZsWJ5//vnMmTMnV199dZYuXVr6dLdp06bp0qVL+vbtmwEDBpROZ69P+/btU1lZmVtuuSXTpk3LCy+8kLvvvjtdunQpnRWxKTXjWrOu+saj5tKTSy+9NOPHj8/AgQNLy9h6661z9dVX54orrsiHH36YPffcM9tuu23pdpwbqrndYbt27Rrctppgt8suu2TlypX56U9/mrlz5zZ4mU+NE044IS+++GKGDh2a2bNnb9bkjp9G48aNc8YZZ+TBBx/Ms88+mzfffLN0V4H1zwrY3GWdffbZue6669K2bdscdNBBn9FWAwDAP8c/NQDUHJjVHFAk6z6pP+6443LmmWemqqoqf/rTn/KrX/2qztuXHXvssTnxxBPzrW99K+3atUt5eXnKy8tLseCUU07JDTfckMGDB2fAgAFZtmxZKisr06ZNm+y+++6prKzM1KlTkyQ///nPs/POO6dXr1559NFHc9RRR5UOAP/yl7/kyiuvLAWAJKVJ/2o+jd1wPyorK/PQQw9l1KhRad++fU4++eScdNJJGTBgQJKkdevW6dChQ9q1a5ddd901O+20Uzp27Ji2bduWTlHe0Mknn5wf/vCHufDCC7PPPvtkwoQJueOOO3LQQQflvPPOS58+fVJRUZHLLrss/fv3z/Tp02tdl705vv71rydJ6YyLmrkIav67/j5uOMZ1RZq6fqahfWnWrFluuummDBs2LC1btswxxxxTmmitvksyalRWVuaRRx5JVVVVbrjhhtx+++054IAD0q5duwbH50c/+lEOP/zwnHLKKWnfvn2aN2+eyy67bKPlX3nllWnatGl++MMfbvRYzWt5q622StOmTXP//fdn/vz56dKlS44//vi0bt069913X4Pbv76acb355psbHI+ysrI8/vjjpcnt3n///VRWVqZJkyZp3LhxhgwZkilTpmTffffNwQcfnLZt2+aCCy6oc501dynYd999G9y2b37zmznmmGPSsWPHtGrVKv/zP/+Tnj17ZtKkSaXn1PdaOO2003L55Zfn0ksvTYcOHUoRpq7XyN+jvvUl687g+MpXvpJvfOMbOfjggzN9+vQ88cQT2XHHHRv8ubrU9b4HAIAvqq0+2cSF1j/4wQ/qPDja0pYvX55ly5bVupa4Ph9++GEaN25c5ynqixcvzvbbb1865Xr+/Plp0aJFtt1229Jzli1blrvuuiu9e/cuXXvfr1+/LFmypDTp16cxb9687LLLLpt92vemfPzxx/nwww83midgxYoVWbp0ab33ev+sbDjGf4/69mXt2rV5//3307Jly7/74LC+8d7U+Hz00UdZvXp1aR6BLWHRokXZbrvt/qF7xa8/rvWNx/Tp0zN+/Pj07ds3jRo1yqpVq9KxY8ecf/756d+/f+l57733Xpo3b77ZZyBsjobed5vy8ccfZ8mSJZv1/t5SPvroo6xcuXKz7hxQn5deeindu3fPjBkzsuuuu27y+YMHD86NN974D68PAAA+S1tsEsBPa7vttst22223Wc+t75TmJBsdzNX1P+1lZWUZN25c/vCHP6RXr16ZPn16hg8fngcffPDv2+h67LbbbltkOTW22WabOicJbNIuyFEAACAASURBVNq0aZo2bbpF17U5Ps0Bc3370qhRo9LkkH+v+sZ7U+OzJQ+Oa3yaA9z1x7W+8dhjjz1yzTXX5JVXXkmnTp3y5JNPZsmSJRtdsvGPjmVDGnrfbco222zzTz34T9b9fv/R3/HSpUvzs5/9LCNGjMg555yzWQf/AADwr+5znwPg83LLLbfkyCOPzIgRI7J06dIMGzYsJ5xwwue9WdCgZs2a5dFHH02LFi0yfPjwfOlLX8ro0aNTWVn5eW/a/ypNmjTJpEmTcsQRR+T666//vDcHAAC2iE1eAnDnnXeW7u8OQP0efvjh/Nd//dfnvRkAAFCnTZ4BsP3225duMwZA3Z555pnP5LISAADYUjZ5BkCS0i3UamYNB+D/V1VVlbKyMncLAADgX9q/zCSAAP/KHOQDAPBFt8kzAO67776UlZXlmGOO+WdtE8C/pGeeeSbLli0TAQAA+ELa5BwAH330kYN/gCTHHHNMPvroo897MwAA4B+yyQAwa9asf8Z2AHwh+DcRAIAvqk0GAAAAAOCLb4sEgPPOOy99+vTZ6M99992XJBkwYEAmTJiwJVbVoPfeey/vvPPOZ76eGu+880769OmTRYsW/dPWuTnGjBmTH/3oRxv9/R+x4T6uP8ZjxozJwIEDP/0GN6C+fXn22Wfzgx/8YIuv7+95rT7wwAM54YQTctppp33q9f6zX7tJsmzZsvz0pz9N375984tf/CJz5879zNe5atWq9OnTJ6+++upGjz3yyCMZNGjQRn9Gjhy5Rbfh074nAADgi2qLBIChQ4fmb3/7W/bYY49af1q0aJEkmTNnzj/lutlDDz00r7zyyme+nhpr1qzJ7Nmzs3r16n/aOjfHzJkzM3r06I3+/o/YcB/XH+PZs2dnzJgxn36DG1Dfvrz55pufar/qM3LkyM06EP7www9z4YUXZq+99kqfPn0+9Xo/j9fuSSedlPvvvz/t27fPo48+mp49e37mr+U1a9Zk5MiR+dvf/rbRYwsWLMjMmTNLf1544YXceuutee2117boNnza9wQAAHxRbbHbAJ566qn59re/Xedj/+///b+UlZVlzZo1Wbp0abbffvu8/fbbqaqqylZbbZUkmT9/fhYvXpy99947jRvXvVkrV67MmjVrUlZWVvre4sWLs/3222fFihWprq7O0qVL8/HHH2ebbbYpPT5nzpw0b948rVu3rrW8Tz75JG+++WYqKiqy3XbbZeXKlWnWrFmt5yxbtixJaq1zxYoVWbt2bVq3bp3f/va32WGHHUqPrVq1KrNmzcouu+ySnXfeOcm6iRQbNWqU7bbbLkmyfPnyrF27Nttvv33pZ1avXl1rHetbsWJF3nnnnbRp06Y0XkmyevXqUlzZe++96/35+pa5evXq0v5+/PHHWbZsWWlf1qxZk48++qjWPi5durTWGNdYu3Zt3nrrrZSXl6eiomKT661rX5Jk3rx5WbhwYVq1apUdd9xxs/Zj9erVefPNN9OyZctav4eaxxoanw8//DDV1dUbvS7Wt3jx4jRp0iRNmzYtfW/NmjV5++23kyT9+vXLAQccUHps/vz5WblyZfbYY4/S/tX8ftesWZPFixdnjz32qLWODce15rXb0HisWrUqb731ViorK7NmzZokKb2+li5dmtmzZ2fXXXfNLrvsUud+PfXUU5k0aVImT56cysrK9O3bN8cff3xefPHFdO7cuc6fWb58eWbPnp1GjRrVep8uWbIkzZo1y/Lly/POO++ksrKy1njVjPXixYsbfH1ceOGFufDCC0tfX3DBBXnvvfdy0UUX1fszybpr8ps3b156vyXr3rfbbLNNttpqq7zxxhvZbbfdNnp9fPLJJ1myZEm23377Wv/mLFmyJGVlZfX+OwQAAF9U/5Q5AA444IA89thjmTZtWiorK/ONb3wjX/3qV3PNNdfkgw8+yBlnnJH99tsvnTp1SlVVVcaOHVvncu65555adyRYvnx5KisrM2HChBx//PFJku9+97v5+c9/niVLlqRXr16prKxMly5dcuCBB+bss88uHSy99NJL2W+//fLVr341e+21V04++eR07959o3XefffdOeigg2p9MtqnT59cfPHFmTFjRiorKzNnzpwk6z49btOmTQ477LC0adMm5513XpYvX57vf//7teLImWeemUMPPbT09f/5P/8n/fr1q3Off/zjH+ff/u3f0qlTp+y333557LHHkiSPPfZYqqqq8pWvfCVdunRJ27Zt6x23uvz2t79N69atSwfyt912WyorK0sHtk888UQOOOCAvPrqq6V93HCMk2TRokU5+uijc/DBB2fffffNBRdcUBrjzd2XV199NYccckj233//dO3aNVVVVfnZz362yX1YtGhROnfunEMPPTSVlZW59tprS481ND7Lli3LGWeckb333jsHHnhgunTpkhkzZmy0/GuvvTaVlZX585//XOv7M2bMyJFHHpkkOfbYY3PnnXfmpZdeSq9evbLffvvlwAMPTNeuXfPmm28mSX7961+nW7duOfjgg9O+ffs89dRTtZa34bhuajzuvffetGzZMoceemjatGmTo48+urTvw4cPT+vWrXP44Ydnn332Sa9evUoRa33PPPNMjjvuuOy4444ZO3Zs5syZkwkTJtR78D9o0KDsvvvuOeyww9KpU6d07tw57777bpJ17+9zzz03e+yxRzp37px99903L7zwQpJ1ceiiiy7K3nvvnYMOOiinnHJKPb/N2kaNGpWHHnood99990ZRrsbQoUPTpUuXdOzYMW3atEnfvn2zdOnSJEn//v3zrW99K1VVVTnssMNSWVmZ//t//2+tn1+9enXat2+f2267rfS9N998M3vttVedlygAAMAX3RYLAI888kgGDhxY+nPNNdfUevyTTz4p/X2nnXbKqFGj0qdPn1x33XWZPHlynn/++cycOTOnn356evfuncWLF9e5nvpOUR4/fnyS5MEHH8zFF1+chx9+OGPGjMnEiROzYMGC3H777fn973+fl19+OcuXL89ZZ52Vbt265a9//WtGjhyZadOm1bncb37zm1mwYEFp+fPnz8+oUaNyxhln1Nq3WbNmpU+fPvnOd76T2bNnZ+TIkXnyySdz55135vjjj8/o0aOzfPnyfPTRRxk7dmzmzp2bWbNm5ZNPPsnIkSPz7//+7xute+TIkfnJT36SX/3qV3nvvffSr1+/XHTRRZk/f34uuuiinHPOOZk3b15ee+21VFVV5fbbb2/gN1Tb0UcfnSSlg9uaU/lrrn8fPXp0TjrppGy99dalfdxwjJOkuro6p556aubOnZv//u//zkMPPZTXX399s/dl8eLFuf7669O8efPMmjUr77zzTvr27Zurrroqa9eubXAfqqur07Nnz7z11lsZMmRIhgwZkrFjx2bFihUNjs+VV16ZadOmZfTo0XnnnXfSqlWrXHHFFbWWfcMNN2TIkCF58sknc/jhh9d67Mtf/nImTpyYJJk8eXL69euXs846K1tvvXWmTJmS8ePHp3HjxunXr1/pdT9z5sycf/75efzxx9O1a9day9twXBsaj6lTp+aSSy7JoEGD8vbbb+eKK67I9OnTS8u6/PLLM3DgwCxcuDDjx4/PmDFjMm7cuI3Gbs6cOZk7d27at2+fr3/96+nSpUv69etX55hPnTo1t956a+69997ScmfOnJnf/va3pee88sorGTduXGbNmpWqqqrceuutSdbFj/vvvz8jRozIjBkzNjr7oS5r167NZZddlt69e+erX/1qnc+ZMmVKzjvvvPTo0SNvvfVWhg0blqeffjo333xz6TnPPPNM7r777sydOzf9+vXL97///Vpxaptttknfvn3z4IMPlr736KOPpm3btjnwwAM3uZ0AAPBFs8UCwKpVq7JkyZLSn5UrV9b73P79++fQQw/NnnvumWHDhqVLly6prq7O9OnT07Vr11RXV+fFF1/8VNtzxhlnZOrUqamoqMhLL72UDz74IMm6g8bXXnstCxYsyAUXXJCKiop069YtPXr0qHM5rVq1Svfu3TNs2LAkyeOPP56KioocccQRtZ737LPPJll3LffUqVPTuHHjdOrUKU888US6deuWZN1ZBy+88EJatWqVNm3aZMKECXn11VezYMGCOs8+eP7559OuXbucdtppadq0aQYMGJARI0akWbNmGTduXAYOHJg5c+bkxRdfTFlZWWkfN8duu+2WQw45JGPHjs3ixYvzpz/9Kcccc0zGjh2b1atX53e/+11OPPHEzVrWhRdemLKyspx55plJUudkdvXtS5MmTTJkyJA8/PDDWbZsWSZOnFg6SFuxYsUm1/29730vO+ywQ/7zP/8z5eXlefbZZ7Pttts2OD6jRo3KKaeckkMOOSTNmjXLz372s1x11VWlZd5444258cYb89BDD+Wwww7b5Da8/PLLWbBgQfr3758999wz7dq1S79+/TJp0qS89957pecNGDAgXbt23eSlGg2Nx7hx41JeXp7zzz8/zZs3z7nnnlvrtPrKysoMHTo0v/zlL9O4ceMsWrSoztf2woULM23atNx2221ZsGBB7r777gwfPjyPP/74Rs/db7/9MnHixBx33HF57bXX8pe//CUVFRVZsmRJ6Tk1l0K0aNEiPXr0yPz585Ose18cddRROfLII7Prrrvm/PPP3+R4/vGPf8xbb73V4NwKNcHqkksuyQ477JBjjz02J554Yq0JA0888cT06NEjZWVlpdfyhnORnH766Zk5c2YmT56ctWvX5te//nX+4z/+Y5PbCAAAX0Rb7CLXc845p945ADb0b//2b0nWXWtbXV2d8ePH15roq23btnWetryhhj4h/tvf/pbvfOc7mTRpUioqKkqf4q5du7Z0UNamTZvS8w844IB6J2E7++yz8+1vfzs33XRT7r///vTp02ej64NrLgO4+uqra31/xx13zA477JDu3bvnueeey5o1a9KjR49svfXWGTt2bObPn5/OnTvXeW30jBkz0rFjx9LXTZo0ycEHH5wkGTFiRAYNGpQk6dChQ1auXJny8vJ6x6MuPXv2zGOPPZYOHTqksrIy55xzTr7//e/nz3/+c6qrq9OtW7fMnj27wWVUVlaWzhKomdOgrrM0GtqXcePG5eKLL87cuXNTWVlZ+pR4/bNG6tKmTZvSdd2NGjVKp06dMm/evDRq1Kje8Vm1alXmzp1b6xPeli1bpmXLlqWv33///VRUVOSRRx4pnZ7fkAULFiRJ2rdvX/pezd9rJrtbf5w2ZerUqfWOx7vvvpuqqqrSPAGNGjWqtS/33ntvrrnmmgwePDiXX3552rZtm9/85jfZZ599aq1jt912S9u2bfP1r389SfKNb3wjV199dSZPnrzRafpr1qzJTTfdlOHDhydJjjjiiKxYsaLW72f96++32267UrSYNWtWjjrqqI3GpSH33XdfOnbsWOv1sqH58+enXbt2pddckhx88MF55JFHau3j+tuUbPyaateuXTp06JBHH300K1euzNy5c7fIXR0AAOBf0T9lDoCNVtpo3WqbN2+e8vLynHXWWZkwYUImTJiQ5557LldddVWd1yI3btw4y5cvL309b968etdx5ZVXZuXKlXn55Zfz17/+tXRgvnbt2tKnuutf2/3HP/6x3mX16NEj5eXluf322zNlypT06tVro+e0atUqybpr52v25a677ip9snzCCSdk9OjRGT16dLp27Zpu3brl97//fX73u9/l5JNPrnO9rVq1qnUmxOLFi/O9730vTzzxRAYNGpRbbrkl7777bv7whz/kkEMOqffa+/p07949kyZNyvDhw9O9e/d87Wtfy4IFC3LrrbfmxBNPrPfa639Effvy2muv5dxzz83RRx+dWbNmZfLkyTnnnHOSNBx4knWn1dfEhtWrV2fixInZa6+9MnXq1HrHZ9ttt015eXmmTJlSWs7kyZMzcODA0lkrP/7xj3PPPfdk5MiRm3ULut133720nBovvfRSkmTvvfdOks2eUG716tUNjkfXrl0zZcqUVFdXJ1l35s0zzzyTZN0kma+88kquu+66vPHGGxkxYkQWLVqUX/ziFxutp7KystbXa9asyZIlS+qcNPCBBx7I8OHDM3r06CxcuDCPPfZYmjdvvlmvt/333780H0CSTc7ov2bNmgwdOjRnn312g89r1apVpk2bVusshAkTJmzWGRsb+o//+I8MHTo0I0eOzPHHH18rBgEAwP8mn0sAWN/pp5+ee+65J0899VQ++OCDXH311fnud7+70QzxybozB+bOnZtRo0bl3XffzeDBg2s9Xl5enqlTp2bhwoVp3LhxysrK0qJFiyxatKgUAFatWpWdd945RxxxRK699tqMGTMmt912W63bgr3xxhu57bbbSgdZTZs2Te/evTN48OAcdthh+dKXvrTRth177LFJ1k2WNmfOnLz88svp2bNnaeK5Y489NtOmTcv06dPzta99LZ07d051dXUmTZqU4447rs6x6dmzZ6ZPn54HHnggCxcuzJAhQ/L000+XPhFu0aJFttlmmzz99NO57777NuusifXtv//+qayszPDhw3PEEUekoqIi7dq1y6hRo+qck2DDMf571LcvNTPwl5eXp6ysLK+//np+8pOfJFn3u9qUO+64Ix988EFuvvnmVFdX15q3oL7xOfPMMzNs2LA8//zzmTNnTq6++uosXbo0TZo0SbLu992lS5f07ds3AwYMKJ3OXp/27dunsrIyt9xyS6ZNm5YXXnghd999d7p06VLrE+qG1IxrzbrqG4+aS08uvfTSjB8/PgMHDiwtY+utt87VV1+dK664Ih9++GH23HPPbLvttqXbca6vd+/emT59eu644458+OGHpdf7+p/W16gJdrvssktWrlyZn/70p5k7d26Dl/nUOOGEE/Liiy9m6NChmT179iYnd6y5BWO7du0afF7NmRnXX3995s6dm5EjR2bEiBG1JgndXKeeemoWLFiQu+66a5PhAQAAvsj+qQGg5sCs5oAiWfdJ/XHHHZczzzwzVVVV+dOf/pRf/epXdX4SWXOd77e+9a20a9cu5eXlKS8vL8WCU045JTfccEMGDx6cAQMGZNmyZamsrEybNm2y++67p7KyMlOnTk2S/PznP8/OO++cXr165dFHH81RRx1VOgD8y1/+kiuvvLIUAJKUJv2r+TR2w/2orKzMQw89lFGjRqV9+/Y5+eSTc9JJJ2XAgAFJktatW6dDhw5p165ddt111+y0007p2LFj2rZt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AAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAnMgzfgAAA/lJREFUAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAIQAAAAAKAABAAAAAAoAAEAAAAACkAAAAAAgAL4/wAnlv+xCd8kkwAAAABJRU5ErkJggg=="},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"<p>Navigated to <a href=\"https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html\">https://solutions.tealium.net/hosted/usercentrics-v2/test-page-noview-no-utag-edit.html</a></p>"},{"type":"log","value":"On landing"},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-123536.781.png"}],"errorIndex":0,"end":"2020-11-04T11:35:37.265Z"},{"type":"test","start":"2020-11-04T11:35:37.272Z","_duration":92,"uid":"test-00-1","cid":"0-0","title":"should have the correct title","fullTitle":"STEP 1 - initial visit to test page should have the correct title","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the correct title","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/title","body":{},"result":{"value":"Usercentrics v2 Test"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:37.364Z"},{"type":"test","start":"2020-11-04T11:35:37.365Z","_duration":5186,"uid":"test-00-2","cid":"0-0","title":"should have a utag_main cookie","fullTitle":"STEP 1 - initial visit to test page should have a utag_main cookie","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a utag_main cookie","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":5},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":5,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/cookie","body":{},"result":{"value":[{"domain":".tealium.net","secure":false,"value":"v_id:0175930a7da5000f2421174c92aa03078005707000718$_sn:1$_se:1$_ss:1$_st:1604491539688$ses_id:1604489739688%3Bexp-session$_pn:1%3Bexp-session","expiry":1636025739,"path":"/","httpOnly":false,"name":"utag_main"},{"domain":"solutions.tealium.net","name":"connect.sid","value":"s%3A_xluVxUyhvFeywpYwVeZOWO_TVKQZLs_.IQ5iJLYKEpWzBXzzrSYVMCspZ25q9URNZwvcDnaeJx4","path":"/","httpOnly":true,"secure":false}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"getCookieByName","result":{"domain":".tealium.net","secure":false,"value":"v_id:0175930a7da5000f2421174c92aa03078005707000718$_sn:1$_se:1$_ss:1$_st:1604491539688$ses_id:1604489739688%3Bexp-session$_pn:1%3Bexp-session","expiry":1636025739,"path":"/","httpOnly":false,"name":"utag_main"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"TiQ will run because we can't detect the edit before load, but no tags should be fired."}],"errorIndex":0,"end":"2020-11-04T11:35:42.552Z"},{"type":"test","start":"2020-11-04T11:35:42.553Z","_duration":260,"uid":"test-00-3","cid":"0-0","title":"should have a visible Usercentrics banner","fullTitle":"STEP 1 - initial visit to test page should have a visible Usercentrics banner","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have a visible Usercentrics banner","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementDisplayed(element) {\n    function nodeIsElement(node) {\n        if (!node) {\n            return false;\n        }\n        switch (node.nodeType) {\n            case Node.ELEMENT_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n                return true;\n            default:\n                return false;\n        }\n    }\n    function parentElementForElement(element) {\n        if (!element) {\n            return null;\n        }\n        return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n    }\n    function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n        for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode)\n            if (predicate(node)) {\n                return node;\n            }\n        return null;\n    }\n    function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n        for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element))\n            if (predicate(element)) {\n                return element;\n            }\n        return null;\n    }\n    function cascadedStylePropertyForElement(element, property) {\n        if (!element || !property) {\n            return null;\n        }\n        if (element instanceof DocumentFragment) {\n            element = element.host;\n        }\n        let computedStyle = window.getComputedStyle(element);\n        let computedStyleProperty = computedStyle.getPropertyValue(property);\n        if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n            return computedStyleProperty;\n        }\n        let parentElement = parentElementForElement(element);\n        return cascadedStylePropertyForElement(parentElement, property);\n    }\n    function elementSubtreeHasNonZeroDimensions(element) {\n        let boundingBox = element.getBoundingClientRect();\n        if (boundingBox.width > 0 && boundingBox.height > 0) {\n            return true;\n        }\n        if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n            let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n            return !!strokeWidth && (parseInt(strokeWidth, 10) > 0);\n        }\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow === 'hidden') {\n            return false;\n        }\n        return Array.from(element.childNodes).some((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return true;\n            }\n            if (nodeIsElement(childNode)) {\n                return elementSubtreeHasNonZeroDimensions(childNode);\n            }\n            return false;\n        });\n    }\n    function elementOverflowsContainer(element) {\n        let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n        if (cascadedOverflow !== 'hidden') {\n            return false;\n        }\n        return true;\n    }\n    function isElementSubtreeHiddenByOverflow(element) {\n        if (!element) {\n            return false;\n        }\n        if (!elementOverflowsContainer(element)) {\n            return false;\n        }\n        if (!element.childNodes.length) {\n            return false;\n        }\n        return Array.from(element.childNodes).every((childNode) => {\n            if (childNode.nodeType === Node.TEXT_NODE) {\n                return false;\n            }\n            if (!nodeIsElement(childNode)) {\n                return true;\n            }\n            if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n                return true;\n            }\n            return isElementSubtreeHiddenByOverflow(childNode);\n        });\n    }\n    function isElementInsideShadowRoot(element) {\n        if (!element) {\n            return false;\n        }\n        if (element.parentNode && element.parentNode.host) {\n            return true;\n        }\n        return isElementInsideShadowRoot(element.parentNode);\n    }\n    if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n        return false;\n    }\n    switch (element.tagName.toUpperCase()) {\n        case 'BODY':\n            return true;\n        case 'SCRIPT':\n        case 'NOSCRIPT':\n            return false;\n        case 'OPTGROUP':\n        case 'OPTION': {\n            let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, (e) => e.tagName.toUpperCase() === 'SELECT');\n            return isElementDisplayed(enclosingSelectElement);\n        }\n        case 'INPUT':\n            if (element.type === 'hidden') {\n                return false;\n            }\n            break;\n        default:\n            break;\n    }\n    if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n        return false;\n    }\n    let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n    });\n    let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, (e) => {\n        return cascadedStylePropertyForElement(e, 'display') === 'none';\n    });\n    if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n        return false;\n    }\n    if (!elementSubtreeHasNonZeroDimensions(element)) {\n        return false;\n    }\n    if (isElementSubtreeHiddenByOverflow(element)) {\n        return false;\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"result":{"value":true},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function isElementClickable(elem) {\n    if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n        return false;\n    }\n    const isOldEdge = !!window.StyleMedia;\n    const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n    function getOverlappingElement(elem, context) {\n        context = context || document;\n        const elemDimension = elem.getBoundingClientRect();\n        const x = elemDimension.left + (elem.clientWidth / 2);\n        const y = elemDimension.top + (elem.clientHeight / 2);\n        return context.elementFromPoint(x, y);\n    }\n    function getOverlappingRects(elem, context) {\n        context = context || document;\n        const elems = [];\n        const rects = elem.getClientRects();\n        const rect = rects[0];\n        const x = rect.left + (rect.width / 2);\n        const y = rect.top + (rect.height / 2);\n        elems.push(context.elementFromPoint(x, y));\n        return elems;\n    }\n    function getOverlappingElements(elem, context) {\n        return [getOverlappingElement(elem, context)].concat(getOverlappingRects(elem, context));\n    }\n    function nodeContains(elem, otherNode) {\n        if (isOldEdge) {\n            let tmpElement = otherNode;\n            while (tmpElement) {\n                if (tmpElement === elem) {\n                    return true;\n                }\n                tmpElement = tmpElement.parentNode;\n                if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n                    tmpElement = tmpElement.host;\n                }\n            }\n            return false;\n        }\n        return elem.contains(otherNode);\n    }\n    function isOverlappingElementMatch(elementsFromPoint, elem) {\n        if (elementsFromPoint.some(function (elementFromPoint) {\n            return elementFromPoint === elem || nodeContains(elem, elementFromPoint);\n        })) {\n            return true;\n        }\n        let elemsWithShadowRoot = [].concat(elementsFromPoint);\n        elemsWithShadowRoot = elemsWithShadowRoot.filter(function (x) {\n            return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n        });\n        let shadowElementsFromPoint = [];\n        for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n            let shadowElement = elemsWithShadowRoot[i];\n            shadowElementsFromPoint = shadowElementsFromPoint.concat(getOverlappingElements(elem, shadowElement.shadowRoot));\n        }\n        shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n        shadowElementsFromPoint = shadowElementsFromPoint.filter(function (x) {\n            return !elementsFromPoint.includes(x);\n        });\n        if (shadowElementsFromPoint.length === 0) {\n            return false;\n        }\n        return isOverlappingElementMatch(shadowElementsFromPoint, elem);\n    }\n    function isElementInViewport(elem) {\n        if (!elem.getBoundingClientRect) {\n            return false;\n        }\n        const rect = elem.getBoundingClientRect();\n        const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n        const windowWidth = (window.innerWidth || document.documentElement.clientWidth);\n        const vertInView = (rect.top <= windowHeight) && ((rect.top + rect.height) > 0);\n        const horInView = (rect.left <= windowWidth) && ((rect.left + rect.width) > 0);\n        return (vertInView && horInView);\n    }\n    function isClickable(elem) {\n        return (isElementInViewport(elem) && elem.disabled !== true &&\n            isOverlappingElementMatch(getOverlappingElements(elem), elem));\n    }\n    if (!isClickable(elem)) {\n        elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'nearest', inline: 'nearest' } : false);\n        if (!isClickable(elem)) {\n            elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : true);\n            return isClickable(elem);\n        }\n    }\n    return true;\n}).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166","ELEMENT":"a97d70eb-72f4-4a89-ab2c-a38e2ec28166"}]},"result":{"value":true},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:42.813Z"},{"type":"test","start":"2020-11-04T11:35:42.813Z","_duration":95,"uid":"test-00-4","cid":"0-0","title":"should have the current version of the Usercentrics integration running","fullTitle":"STEP 1 - initial visit to test page should have the current version of the Usercentrics integration running","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 1 - initial visit to test page - should have the current version of the Usercentrics integration running","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (() => {\n      return window.tealiumCmpIntegration && window.tealiumCmpIntegration.version\n    }).apply(null, arguments)","args":[]},"result":{"value":"v0.4-beta"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:42.908Z"}],"end":"2020-11-04T11:35:42.908Z","duration":14924},{"type":"suite","start":"2020-11-04T11:35:42.910Z","_duration":0,"uid":"suite-0-1","cid":"0-0","title":"STEP 2 - deny tracking","fullTitle":"STEP 2 - deny tracking","tests":[{"type":"test","start":"2020-11-04T11:35:42.910Z","_duration":4954,"uid":"test-01-0","cid":"0-0","title":"should deny tracking","fullTitle":"STEP 2 - deny tracking should deny tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"83597c0c-b6cf-4ffa-a064-4aad1d0cdbdf"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/83597c0c-b6cf-4ffa-a064-4aad1d0cdbdf/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/83597c0c-b6cf-4ffa-a064-4aad1d0cdbdf/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:47.864Z"},{"type":"test","start":"2020-11-04T11:35:47.864Z","_duration":664,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - deny tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-123547.906.png"}],"errorIndex":0,"end":"2020-11-04T11:35:48.528Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:35:42.910Z","_duration":4954,"uid":"test-01-0","cid":"0-0","title":"should deny tracking","fullTitle":"STEP 2 - deny tracking should deny tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should deny tracking","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-deny-all-button\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-deny-all-button\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"83597c0c-b6cf-4ffa-a064-4aad1d0cdbdf"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/83597c0c-b6cf-4ffa-a064-4aad1d0cdbdf/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/83597c0c-b6cf-4ffa-a064-4aad1d0cdbdf/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:47.864Z"},{"type":"test","start":"2020-11-04T11:35:47.864Z","_duration":664,"uid":"test-01-1","cid":"0-0","title":"should NOT have a visible Usercentrics banner anymore","fullTitle":"STEP 2 - deny tracking should NOT have a visible Usercentrics banner anymore","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 2 - deny tracking - should NOT have a visible Usercentrics banner anymore","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"GET","endpoint":"/session/:sessionId/screenshot","body":{},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#usercentrics-root"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"return (function (elem) { return ((function() {\n      // element has a shadowRoot property\n      if (this.shadowRoot) {\n        return this.shadowRoot.querySelector('[data-testid=\"uc-default-banner\"]')\n      }\n      // fall back to querying the element directly if not\n      return this.querySelector('[data-testid=\"uc-default-banner\"]')\n    })).call(elem); }).apply(null, arguments)","args":[{"element-6066-11e4-a52e-4f735466cecf":"18215ba0-1995-4998-ae66-c949bf83104b","ELEMENT":"18215ba0-1995-4998-ae66-c949bf83104b"}]},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"After decision."},{"type":"screenshot","value":"reports/html-reports/screenshots/20201104-123547.906.png"}],"errorIndex":0,"end":"2020-11-04T11:35:48.528Z"}],"end":"2020-11-04T11:35:48.528Z","duration":5618},{"type":"suite","start":"2020-11-04T11:35:48.531Z","_duration":0,"uid":"suite-0-2","cid":"0-0","title":"STEP 3 - fire virtual page view by clicking button","fullTitle":"STEP 3 - fire virtual page view by clicking button","tests":[{"type":"test","start":"2020-11-04T11:35:48.531Z","_duration":4917,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"cdfcd5be-21c6-4530-b369-af0539366db5"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/cdfcd5be-21c6-4530-b369-af0539366db5/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/cdfcd5be-21c6-4530-b369-af0539366db5/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:53.448Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:35:48.531Z","_duration":4917,"uid":"test-02-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 3 - fire virtual page view by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 3 - fire virtual page view by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#standard-virtual-view"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"cdfcd5be-21c6-4530-b369-af0539366db5"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/cdfcd5be-21c6-4530-b369-af0539366db5/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/cdfcd5be-21c6-4530-b369-af0539366db5/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:53.448Z"}],"end":"2020-11-04T11:35:53.448Z","duration":4917},{"type":"suite","start":"2020-11-04T11:35:53.449Z","_duration":0,"uid":"suite-0-3","cid":"0-0","title":"STEP 4 - fire virtual page view to tag 10 only by clicking button","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button","tests":[{"type":"test","start":"2020-11-04T11:35:53.449Z","_duration":4768,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a44f5494-1538-4412-9a0e-fcf125451777"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/a44f5494-1538-4412-9a0e-fcf125451777/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/a44f5494-1538-4412-9a0e-fcf125451777/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:58.217Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:35:53.449Z","_duration":4768,"uid":"test-03-0","cid":"0-0","title":"should click the button to fire tracking","fullTitle":"STEP 4 - fire virtual page view to tag 10 only by clicking button should click the button to fire tracking","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 4 - fire virtual page view to tag 10 only by clicking button - should click the button to fire tracking","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-10"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"a44f5494-1538-4412-9a0e-fcf125451777"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/a44f5494-1538-4412-9a0e-fcf125451777/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/a44f5494-1538-4412-9a0e-fcf125451777/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.002},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.002,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:35:58.217Z"}],"end":"2020-11-04T11:35:58.217Z","duration":4768},{"type":"suite","start":"2020-11-04T11:35:58.217Z","_duration":0,"uid":"suite-0-4","cid":"0-0","title":"STEP 5 - fire virtual page view to tag 11 only","fullTitle":"STEP 5 - fire virtual page view to tag 11 only","tests":[{"type":"test","start":"2020-11-04T11:35:58.217Z","_duration":4756,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"cc23b660-c08e-4dd4-9a45-07b1b52fa166"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/cc23b660-c08e-4dd4-9a45-07b1b52fa166/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/cc23b660-c08e-4dd4-9a45-07b1b52fa166/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:02.973Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:35:58.217Z","_duration":4756,"uid":"test-04-0","cid":"0-0","title":"should fire the virtual view to tag 11","fullTitle":"STEP 5 - fire virtual page view to tag 11 only should fire the virtual view to tag 11","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 5 - fire virtual page view to tag 11 only - should fire the virtual view to tag 11","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"cc23b660-c08e-4dd4-9a45-07b1b52fa166"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/cc23b660-c08e-4dd4-9a45-07b1b52fa166/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/cc23b660-c08e-4dd4-9a45-07b1b52fa166/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:02.973Z"}],"end":"2020-11-04T11:36:02.973Z","duration":4756},{"type":"suite","start":"2020-11-04T11:36:02.973Z","_duration":0,"uid":"suite-0-5","cid":"0-0","title":"STEP 6 - fire virtual page view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only","tests":[{"type":"test","start":"2020-11-04T11:36:02.974Z","_duration":4750,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"22587ec3-25ed-4bdc-8dbb-eddaf8f914e9"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/22587ec3-25ed-4bdc-8dbb-eddaf8f914e9/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/22587ec3-25ed-4bdc-8dbb-eddaf8f914e9/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:07.725Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:36:02.974Z","_duration":4750,"uid":"test-05-0","cid":"0-0","title":"should fire the virtual view to tags 7 and 11 only","fullTitle":"STEP 6 - fire virtual page view to tags 7 and 11 only should fire the virtual view to tags 7 and 11 only","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=STEP 6 - fire virtual page view to tags 7 and 11 only - should fire the virtual view to tags 7 and 11 only","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element","body":{"using":"css selector","value":"#specific-virtual-view-7-and-11"},"result":{"value":{"element-6066-11e4-a52e-4f735466cecf":"22587ec3-25ed-4bdc-8dbb-eddaf8f914e9"}},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/element/22587ec3-25ed-4bdc-8dbb-eddaf8f914e9/click","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/element/22587ec3-25ed-4bdc-8dbb-eddaf8f914e9/click","body":{},"result":{"value":null},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/async","body":{"script":"return (function (stabilityLength, maxTime, done) {\n      try {\n        const start = Date.now()\n        let lastActivity = start\n        // how long do we need to see inactivity to think all tags fired\n        const timeoutInMillseconds = stabilityLength || 2000\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver\n\n        if (MutationObserver) {\n          var mutationObserver = new MutationObserver(function () {\n            lastActivity = Date.now()\n          })\n\n          var inactivityInterval = window.setInterval(function () {\n            const currentTime = Date.now()\n            const currentInactivity = currentTime - lastActivity\n            const totalTime = currentTime - start\n            if (currentInactivity >= timeoutInMillseconds || totalTime >= maxTime) {\n              mutationObserver.disconnect()\n              window.clearInterval(inactivityInterval)\n              done((currentTime - start) / 1000)\n            }\n          }, 200) // polling frequency\n\n          mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n          })\n\n          mutationObserver.observe(document.head, {\n            childList: true,\n            subtree: true\n          })\n        } else {\n          const currentTime = Date.now()\n          window.setTimeout(function () { done((currentTime - start) / 1000) }, maxTime / 2) // use half of the maxTime as a fallback for older browsers\n        }\n      } catch (e) {\n        done(e)\n      }\n    }).apply(null, arguments)","args":[3000,20000]},"result":{"value":3.003},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"name":"waitForTraffic","result":3.003,"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:07.725Z"}],"end":"2020-11-04T11:36:07.725Z","duration":4752},{"type":"suite","start":"2020-11-04T11:36:07.726Z","_duration":0,"uid":"suite-0-6","cid":"0-0","title":"FINALIZE - get Proxy logs to confirm tag firings","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings","tests":[{"type":"test","start":"2020-11-04T11:36:07.726Z","_duration":9143,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:16.869Z"},{"type":"test","start":"2020-11-04T11:36:16.869Z","_duration":47,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:16.916Z"},{"type":"test","start":"2020-11-04T11:36:16.916Z","_duration":50,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T11:36:16.966Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:36:07.726Z","_duration":9143,"uid":"test-06-0","cid":"0-0","title":"finish the run and get the logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings finish the run and get the logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - finish the run and get the logs","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:16.869Z"},{"type":"test","start":"2020-11-04T11:36:16.869Z","_duration":47,"uid":"test-06-1","cid":"0-0","title":"should verify step creation in LiveConnect","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should verify step creation in LiveConnect","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should verify step creation in LiveConnect","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:16.916Z"},{"type":"test","start":"2020-11-04T11:36:16.916Z","_duration":50,"uid":"test-06-2","cid":"0-0","title":"should generate the filtered logs","fullTitle":"FINALIZE - get Proxy logs to confirm tag firings should generate the filtered logs","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=FINALIZE - get Proxy logs to confirm tag firings - should generate the filtered logs","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"{\n  \"allSteps\": [],\n  \"step1\": [],\n  \"step2\": [],\n  \"step3\": [],\n  \"step4\": [],\n  \"step5\": [],\n  \"step6\": []\n}"}],"errorIndex":0,"end":"2020-11-04T11:36:16.966Z"}],"end":"2020-11-04T11:36:16.966Z","duration":9240},{"type":"suite","start":"2020-11-04T11:36:16.967Z","_duration":0,"uid":"suite-0-7","cid":"0-0","title":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test.","tests":[{"type":"test","start":"2020-11-04T11:36:16.967Z","_duration":64,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:17.031Z"},{"type":"test","start":"2020-11-04T11:36:17.031Z","_duration":64,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.095Z"},{"type":"test","start":"2020-11-04T11:36:17.095Z","_duration":58,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.153Z"},{"type":"test","start":"2020-11-04T11:36:17.153Z","_duration":39,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.192Z"},{"type":"test","start":"2020-11-04T11:36:17.193Z","_duration":35,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.228Z"},{"type":"test","start":"2020-11-04T11:36:17.229Z","_duration":34,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.263Z"},{"type":"test","start":"2020-11-04T11:36:17.263Z","_duration":36,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.299Z"},{"type":"test","start":"2020-11-04T11:36:17.299Z","_duration":41,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:36:17.341Z"}],"hooks":[],"suites":[],"hooksAndTests":[{"type":"test","start":"2020-11-04T11:36:16.967Z","_duration":64,"uid":"test-07-0","cid":"0-0","title":"basic log validation","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. basic log validation","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - basic log validation","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[],"errorIndex":0,"end":"2020-11-04T11:36:17.031Z"},{"type":"test","start":"2020-11-04T11:36:17.031Z","_duration":64,"uid":"test-07-1","cid":"0-0","title":"Tag 6 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 6 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 6 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.095Z"},{"type":"test","start":"2020-11-04T11:36:17.095Z","_duration":58,"uid":"test-07-2","cid":"0-0","title":"Tag 7 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 7 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 7 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.153Z"},{"type":"test","start":"2020-11-04T11:36:17.153Z","_duration":39,"uid":"test-07-3","cid":"0-0","title":"Tag 8 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 8 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 8 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.192Z"},{"type":"test","start":"2020-11-04T11:36:17.193Z","_duration":35,"uid":"test-07-4","cid":"0-0","title":"Tag 9 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 9 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 9 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.228Z"},{"type":"test","start":"2020-11-04T11:36:17.229Z","_duration":34,"uid":"test-07-5","cid":"0-0","title":"Tag 10 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 10 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 10 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.263Z"},{"type":"test","start":"2020-11-04T11:36:17.263Z","_duration":36,"uid":"test-07-6","cid":"0-0","title":"Tag 11 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 11 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 11 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Missing map should mean that no tags fire, no matter what."}],"errorIndex":0,"end":"2020-11-04T11:36:17.299Z"},{"type":"test","start":"2020-11-04T11:36:17.299Z","_duration":41,"uid":"test-07-7","cid":"0-0","title":"Tag 15 should NOT have fired at any point in this test","fullTitle":"VERIFY - check the network logs to make sure no tags fired at any point in this test. Tag 15 should NOT have fired at any point in this test","output":[{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"POST","endpoint":"/session/:sessionId/execute/sync","body":{"script":"sauce:context=VERIFY - check the network logs to make sure no tags fired at any point in this test. - Tag 15 should NOT have fired at any point in this test","args":[]},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"command"},{"method":"DELETE","endpoint":"/session/:sessionId","body":{},"result":{"value":""},"sessionId":"be34d26958f547c885cac9b32e0ca4be","cid":"0-0","type":"result"}],"retries":0,"state":"passed","events":[{"type":"log","value":"Tag 15 is not configured in the mapping, so it should never fire"}],"errorIndex":0,"end":"2020-11-04T11:36:17.341Z"}],"end":"2020-11-04T11:36:17.341Z","duration":374}],"title":"Test Report Title","options":{"stdout":true,"outputDir":"./reports/html-reports/","filename":"report.html","templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"reportTitle":"Test Report Title","options":{"logLevel":"warn","outputDir":"./reports/html-reports/","filename":"report.html","showInBrowser":false,"useOnAfterCommandForScreenshot":false,"debug":true,"templateFilename":"/Users/calebjaquith/.git/webdriverio-standalone/report-templates/single-template.hbs","templateFuncs":{},"LOG":{"category":"default","context":{}},"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}},"showInBrowser":false,"useOnAfterCommandForScreenshot":false,"LOG":{"category":"default","context":{}},"logLevel":"warn","debug":true,"logFile":"reports/html-reports/wdio-0-0-HtmlReporter-reporter.log","writeStream":{}}}